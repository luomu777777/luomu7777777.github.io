<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java</title>
      <link href="/2023/05/13/%E7%AC%AC%E4%BA%94%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/13/%E7%AC%AC%E4%BA%94%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="若结局并非所愿，那就再尘埃落定前奋力以顾"><a href="#若结局并非所愿，那就再尘埃落定前奋力以顾" class="headerlink" title="若结局并非所愿，那就再尘埃落定前奋力以顾"></a>若结局并非所愿，那就再尘埃落定前奋力以顾</h2>]]></content>
      
      
      <categories>
          
          <category> -后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios基础</title>
      <link href="/2023/05/13/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/13/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a><em>Axios</em></h1><h1 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h1><h1 id="json-server-的简单使用"><a href="#json-server-的简单使用" class="headerlink" title="json-server 的简单使用"></a>json-server 的简单使用</h1><p>json-server用于模拟服务端接口数据，可以根据json数据建立一个完整的web服务。</p><h3 id="安装json-server"><a href="#安装json-server" class="headerlink" title="安装json-server"></a>安装json-server</h3><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ftypicode%2Fjson-server">github上的json-server地址</a></p><p>安装json-server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure><p>查看版本号，安装成功</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">json-server -v</span><br><span class="line"><span class="number">0.17</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="创建db-json"><a href="#创建db-json" class="headerlink" title="创建db.json"></a>创建db.json</h3><p>在文件夹下创建一个db.json文件，存放一些数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;posts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typicode&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;some comment&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;profile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typicode&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="启动json-server"><a href="#启动json-server" class="headerlink" title="启动json-server"></a>启动json-server</h3><p>在文件夹下，直接在地址栏cmd，进入终端。执行启动json-server命令。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server <span class="attr">--watch</span> .\db<span class="selector-class">.json</span> <span class="attr">--port</span> <span class="number">5222</span></span><br></pre></td></tr></table></figure><p>json-server 已经启动成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/27344388-26caced4da4b0d6b.png?imageMogr2/auto-orient/strip|imageView2/2/w/675/format/webp" alt="img"></p><h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><p>在浏览器中输入地址：<a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A%2B">http://localhost:+</a>端口号/接口名称，即可查看数据。<br>例如：输入<a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A5000%2Fcomments">http://localhost:5000/comments</a></p><p><img src="https://upload-images.jianshu.io/upload_images/27344388-4b559d6a3bbaebff.png?imageMogr2/auto-orient/strip|imageView2/2/w/355/format/webp" alt="img"></p><h3 id="public目录"><a href="#public目录" class="headerlink" title="public目录"></a>public目录</h3><p>在和db.json同级的目录下，创建public目录，里面可以存放一些静态资源。</p><p><img src="https://upload-images.jianshu.io/upload_images/27344388-4788f349ed752fa9.png?imageMogr2/auto-orient/strip|imageView2/2/w/335/format/webp" alt="img"></p><h1 id="使用axios-访问测试"><a href="#使用axios-访问测试" class="headerlink" title="使用axios 访问测试"></a>使用<a href="https://so.csdn.net/so/search?q=axios&amp;spm=1001.2101.3001.7020">axios</a> 访问测试</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testGet()&quot;</span>&gt;</span>GET请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testPost()&quot;</span>&gt;</span>POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testPut()&quot;</span>&gt;</span>PUT请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testDelete()&quot;</span>&gt;</span>DELETE请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">testGet</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/posts&#x27;</span>) <span class="comment">// 返回一个数组，数组里有两个对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// axios.get(&#x27;http://localhost:3000/posts/1&#x27;) // 返回一个对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// axios.get(&#x27;http://localhost:3000/posts?id=1&#x27;) // 返回一个数组，数组里有一个对象</span></span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/posts get&#x27;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">testPost</span>(<span class="params"></span>) &#123; <span class="comment">// 添加数据</span></span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/posts&#x27;</span>, &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;json-server3&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;typicode&quot;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/posts put&#x27;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">testPut</span>(<span class="params"></span>) &#123; <span class="comment">// 更新数据</span></span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">put</span>(<span class="string">&#x27;http://localhost:3000/posts/3&#x27;</span>, &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;json-server_put&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;typicode&quot;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/posts post&#x27;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">testDelete</span>(<span class="params"></span>) &#123; <span class="comment">// 删除数据</span></span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">delete</span>(<span class="string">&#x27;http://localhost:3000/posts/3&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/posts delete&#x27;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="XHR-的-ajax-封装-简单版axios"><a href="#XHR-的-ajax-封装-简单版axios" class="headerlink" title="XHR 的 ajax 封装 (简单版axios)"></a>XHR 的 <a href="https://so.csdn.net/so/search?q=ajax&amp;spm=1001.2101.3001.7020">ajax</a> 封装 (简单版axios)</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>函数的返回值为<code>promise</code>, 成功的结果为<code>response</code>, 失败的结果为<code>error</code></li><li>能处理多种类型的请求: GET/POST/PUT/DELETE</li><li>函数的参数为一个配置对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求地址</span></span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求方式GET/POST/PUT/DELETE</span></span><br><span class="line"><span class="attr">params</span>: &#123;&#125;, <span class="comment">// GET/DELETE 请求的 query 参数</span></span><br><span class="line"><span class="attr">data</span>: &#123;&#125;, <span class="comment">// POST/PUT 请求的请求体参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    4.响应 json数据 自动解析为 js的对象/数组</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">axios</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  url,</span></span><br><span class="line"><span class="params">  method=<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="params">  params=&#123;&#125;,</span></span><br><span class="line"><span class="params">  data=&#123;&#125;</span></span><br><span class="line"><span class="params">&#125;</span>)&#123;</span><br><span class="line">  <span class="comment">// 返回一个promise对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理method 转大写</span></span><br><span class="line">    method = method.<span class="title function_">toUpperCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 query参数（拼接到url上）id=1&amp;xxx=abc</span></span><br><span class="line">    <span class="keyword">let</span> queryString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      queryString += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>&amp;`</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span>(queryString)&#123;</span><br><span class="line">      <span class="comment">// 去除最后的&#x27;&amp;&#x27;</span></span><br><span class="line">      queryString = queryString.<span class="title function_">substring</span>(<span class="number">0</span>, queryString.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line">      <span class="comment">// 接到url</span></span><br><span class="line">      url += <span class="string">&#x27;?&#x27;</span> + queryString</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 执行异步Ajax请求</span></span><br><span class="line">    <span class="comment">// 创建xhr对象</span></span><br><span class="line">    <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 打开连接（初始化请求，没有请求）</span></span><br><span class="line">    request.<span class="title function_">open</span>(method, url, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="keyword">if</span>(method === <span class="string">&#x27;GET&#x27;</span> || method === <span class="string">&#x27;DELETE&#x27;</span>)&#123;</span><br><span class="line">      request.<span class="title function_">send</span>()<span class="comment">// undefined</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">&#x27;POST&#x27;</span> || method === <span class="string">&#x27;PUT&#x27;</span>)&#123;</span><br><span class="line">      <span class="comment">// 设置请求头，告诉服务器请求体的格式是json</span></span><br><span class="line">      request.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;appliaction/json;charset=utf-8&#x27;</span>); </span><br><span class="line">      <span class="comment">// 发送json格式请求参数</span></span><br><span class="line">      request.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)); <span class="comment">// 异步执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定状态改变的监听</span></span><br><span class="line">    request.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 同步执行</span></span><br><span class="line">      <span class="comment">// 如果请求没有完成，直接结束</span></span><br><span class="line">      <span class="keyword">if</span> (request.<span class="property">readyState</span> !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果响应状态码在[200, 300)之间代表成功，否则失败</span></span><br><span class="line">      <span class="keyword">const</span> &#123;status, statusText&#125; = request</span><br><span class="line">      <span class="keyword">if</span>( status&gt;= <span class="number">200</span> &amp;&amp; status&lt;=<span class="number">299</span>) &#123;<span class="comment">// 2.1 如果请求成功，调用resolve()</span></span><br><span class="line">        <span class="comment">// 准备结果数据对象response</span></span><br><span class="line">        <span class="keyword">const</span> response = &#123;</span><br><span class="line">          <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(request.<span class="property">response</span>),</span><br><span class="line">          status,</span><br><span class="line">          statusText</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title function_">resolve</span>(response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;<span class="comment">// 2.2 如果请求失败，调用reject()</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;request error status is &#x27;</span> + status));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. GET请求：从服务器端获取数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testGet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">xxx</span>: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. POST请求：向服务器端添加数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testPost</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: <span class="string">&quot;json-server_post&quot;</span>,</span><br><span class="line">      <span class="string">&quot;author&quot;</span>: <span class="string">&quot;typicode_post&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. PUT请求：服务器更新数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testPut</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: <span class="string">&quot;json-server_put&quot;</span>,</span><br><span class="line">      <span class="string">&quot;author&quot;</span>: <span class="string">&quot;typicode_put&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. DELETE请求：服务器删除数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testDelete</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="axios-的理解和使用"><a href="#axios-的理解和使用" class="headerlink" title="axios 的理解和使用"></a>axios 的理解和使用</h1><h2 id="axios-是什么"><a href="#axios-是什么" class="headerlink" title="axios 是什么?"></a>axios 是什么?</h2><ul><li><strong><em>前端最流行的 ajax请求库</em></strong></li><li><strong><em>文档: <a href="https://github.com/axios/axios">https://github.com/axios/axios</a></em></strong></li><li><strong><em>react/vue 官方都推荐使用 axios 发ajax 请求</em></strong></li></ul><h2 id="axios-特点"><a href="#axios-特点" class="headerlink" title="axios 特点"></a>axios 特点</h2><ul><li><em>基于 xhr + promise 的异步 ajax请求库</em></li><li><em>浏览器端/node 端都可以使用</em></li><li><em>支持请求／响应拦截器</em></li><li><em>支持请求取消</em></li><li><em>请求/响应数据转换</em></li><li><em>批量发送多个请求</em></li></ul><h2 id="axios-常用语法"><a href="#axios-常用语法" class="headerlink" title="axios 常用语法"></a>axios 常用语法</h2><blockquote><p><em>axios(config):</em>  <strong>通用/最本质的发任意类型请求的方式</strong><br><em>axios(url[, config]):</em> <strong>可以只指定url 发get 请求</strong><br><em>axios.request(config):</em> <strong>等同于axios(config)</strong><br><em>axios.get(url[, config]):</em> <strong>发get 请求</strong><br><em>axios.delete(url[, config]):</em> <strong>发delete 请求</strong><br><em>axios.post(url[, data, config]):</em> <strong>发post 请求</strong><br><em>axios.put(url[, data, config]):</em> <strong>发put 请求</strong></p><p><em>axios.defaults.xxx:</em> <strong>请求的默认全局配置（method\baseURL\params\timeout…）</strong><br><em>axios.interceptors.request.use():</em> <strong>添加请求拦截器</strong><br><em>axios.interceptors.response.use():</em> <strong>添加响应拦截器</strong></p><p><em>axios.create([config])</em>: <strong>创建一个新的axios(它没有下面的功能)</strong></p><p>axios.Cancel(): <strong>用于创建取消请求的错误对象</strong><br>axios.CancelToken(): <strong>用于创建取消请求的 token 对象</strong><br>axios.isCancel(): <strong>是否是一个取消请求的错误</strong><br>axios.all(promises): <strong>用于批量执行多个异步请求</strong><br>axios.spread(): <strong>用来指定接收所有成功数据的回调函数的方法</strong></p></blockquote><h1 id="难点语法的理解和使用"><a href="#难点语法的理解和使用" class="headerlink" title="难点语法的理解和使用"></a>难点语法的理解和使用</h1><h3 id="axios-create-config"><a href="#axios-create-config" class="headerlink" title="axios.create(config)"></a>axios.create(config)</h3><p><em>根据指定配置创建一个新的 axios, 也就是每个新 axios 都有自己的配置</em><br><em>新 axios 只是没有取消请求和批量发请求的方法, 其它所有语法都是一致的</em><br><em>为什么要设计这个语法?</em><br><strong>(1) 需求: 项目中有部分接口需要的配置与另一部分接口需要的配置不太一样, 如何处理（比如有多个baseURL需要指定）</strong><br><strong>(2) 解决: 创建2 个新axios, 每个都有自己特有的配置, 分别应用到不同要求的接口请求中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123; <span class="comment">// instance是函数类型</span></span><br><span class="line"><span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用instance发Ajax请求</span></span><br><span class="line"><span class="title function_">instance</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;/posts&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/posts&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拦截器函数-ajax-请求-请求的回调函数的调用顺序"><a href="#拦截器函数-ajax-请求-请求的回调函数的调用顺序" class="headerlink" title="拦截器函数/ajax 请求/请求的回调函数的调用顺序"></a>拦截器函数/ajax 请求/请求的回调函数的调用顺序</h3><p><strong>说明: 调用axios()并不是立即发送ajax 请求, 而是需要经历一个较长的流程</strong><br><strong><em>流程: 请求拦截器2 =&gt; 请求拦截器1 =&gt; 发ajax 请求 =&gt; 响应拦截器1 =&gt; 响应拦截器2 =&gt; 请求的回调</em></strong><br><strong>注意: 此流程是通过 promise 串连起来的, 请求拦截器传递的是config, 响应拦截器传递的是response</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//promise</span></span><br><span class="line">    <span class="comment">// 设置请求拦截器 config 配置对象</span></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功-1&#x27;</span>);</span><br><span class="line">        <span class="comment">//修改config中参数</span></span><br><span class="line">        config.<span class="property">params</span> = &#123; <span class="attr">a</span>: <span class="number">100</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">        <span class="comment">// thorw: &#x27;自定义请求失败&#x27;</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败-1&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功-2&#x27;</span>);</span><br><span class="line">        <span class="comment">//修改config中参数</span></span><br><span class="line">        config.<span class="property">timeout</span> = <span class="number">2000</span></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">        <span class="comment">// thorw: &#x27;自定义请求失败&#x27;</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败-2&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应拦截器</span></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功-1&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败-1&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功-2&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败-2&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自定义回调处理成功的结果&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reson</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自定义请求失败&#x27;</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><p>流程</p><ol><li><em>配置 <code>cancelToken</code> 对象</em></li><li><em>缓存用于取消请求的 <code>cancel</code> 函数</em></li><li><em>在后面特定时机调用 <code>cancel</code> 函数取消请求</em></li><li><em>在错误回调中判断如果 <code>error</code> 是 <code>cancel</code>, 做相应处理</em></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>axios基本使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>取消请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.声明全局变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> cancel = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//检测上一次请求是否完成</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(cancel !== <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//取消上一次请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">cancel</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1.添加配置对象的属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.<span class="title class_">CancelToken</span>(<span class="keyword">function</span>(<span class="params">c</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//3.将c的值赋值给cancel</span></span></span><br><span class="line"><span class="language-javascript">                cancel = c</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将cancel的值初始化设置</span></span></span><br><span class="line"><span class="language-javascript">            cancel = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//绑定第二个事件取消请求</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">cancel</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 <code>GET</code> 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的请求也可以这样做</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行 <code>POST</code> 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行多个并发请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserPermissions</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345/permissions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">getUserAccount</span>(), <span class="title function_">getUserPermissions</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="keyword">function</span> (<span class="params">acct, perms</span>) &#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><h2 id="axios的全局配置"><a href="#axios的全局配置" class="headerlink" title="axios的全局配置"></a>axios的全局配置</h2><p><img src="imgs\1570541353621.png" alt="1570541353621"></p><p>常见配置选项，具体可看官网</p><p><img src="imgs\1570541513944.png" alt="1570541513944"></p><p>封装axios</p><p><img src="imgs\1570542920896.png" alt="1570542920896"></p><p><img src="imgs\1570542391146.png" alt="1570542391146"></p><p><img src="imgs\1570542483129.png" alt="1570542483129"></p><h2 id="axios使用封装接口"><a href="#axios使用封装接口" class="headerlink" title="axios使用封装接口"></a>axios使用封装接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/p/getProblemSet/&#x27;</span>+index</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">).<span class="title function_">catch</span>(</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Parameters与Data的区别"><a href="#Parameters与Data的区别" class="headerlink" title="Parameters与Data的区别:"></a>Parameters与Data的区别:</h2><p>实际上就是GET和POST区别;</p><p>我们知道GET请求的参数都是在URL上的，服务器并不会读取http body里面的数据,这样我们传递的就是Params里的请求的参数了；如果想让服务器读取http body里面的数据那就需要用POST请求了，POST请求的参数就存放在body；</p><p>以后<strong>如果是GET请求最好是在parameters里面设置，而POST请求就在Body Data里面设置</strong>.</p><h2 id="axios接收图片"><a href="#axios接收图片" class="headerlink" title="axios接收图片"></a>axios接收图片</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getVerifyImage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/verify/image&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//将从后台获取的图片流进行转换</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="string">&quot;data:image/png;base64,&quot;</span> +</span><br><span class="line">            <span class="title function_">btoa</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(response.<span class="property">data</span>).<span class="title function_">reduce</span>(</span><br><span class="line">                    <span class="function">(<span class="params">data, byte</span>) =&gt;</span> data + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(byte),</span><br><span class="line">                    <span class="string">&quot;&quot;</span></span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">verifiedImg</span> = res;</span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="axios跨域"><a href="#axios跨域" class="headerlink" title="axios跨域"></a>axios跨域</h2><p>需要在默认实例添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">withCredentials</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>,  </span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">// 请求的超时时间</span></span><br><span class="line">    <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证，允许携带cookie</span></span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span>, <span class="comment">// default false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000011811117">https://segmentfault.com/a/1190000011811117</a></p><h2 id="axios上传文件"><a href="#axios上传文件" class="headerlink" title="axios上传文件"></a>axios上传文件</h2><p><a href="http://www.axios-js.com/">axios官网</a></p>]]></content>
      
      
      <categories>
          
          <category> -拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2023/05/13/%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/13/%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="若结局并非所愿，那就再尘埃落定前奋力以顾"><a href="#若结局并非所愿，那就再尘埃落定前奋力以顾" class="headerlink" title="若结局并非所愿，那就再尘埃落定前奋力以顾"></a>若结局并非所愿，那就再尘埃落定前奋力以顾</h2>]]></content>
      
      
      <categories>
          
          <category> -前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax基础</title>
      <link href="/2023/05/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax概述"><a href="#Ajax概述" class="headerlink" title="Ajax概述"></a><a href="https://so.csdn.net/so/search?q=Ajax&amp;spm=1001.2101.3001.7020">Ajax</a>概述</h1><h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h2><p>AJAX 全称为Asynchronous JavaScript And XML，就是异步的JS 和XML<br>通过AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong><br>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p><h2 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a>XML 简介</h2><p>XML 可扩展标记语言。<br>XML 被设计用来传输和存储数据。<br>XML 和HTML 类似，不同的是HTML 中都是预定义标签，而XML 中没有预定义标签，<br>全都是自定义标签，用来表示一些数据。</p><p>比如说我有一个学生数据：<br>name = “孙悟空” ; age = 18 ; gender = “男” ;<br>用XML 表示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在已经被JSON 取代了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;孙悟空&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;男&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h2><h3 id="AJAX-的优点"><a href="#AJAX-的优点" class="headerlink" title="AJAX 的优点"></a>AJAX 的优点</h3><ol><li>可以无需刷新页面而与服务器端进行通信</li><li>允许你根据用户事件来更新部分页面内容</li></ol><h3 id="AJAX-的缺点"><a href="#AJAX-的缺点" class="headerlink" title="AJAX 的缺点"></a>AJAX 的缺点</h3><ol><li>没有浏览历史，不能回退</li><li>存在跨域问题(同源)</li><li>SEO 不友好(SEO 搜索引擎优化)</li></ol><h1 id="HTTP相关问题"><a href="#HTTP相关问题" class="headerlink" title="HTTP相关问题"></a>HTTP相关问题</h1><h4 id="MDN-文档"><a href="#MDN-文档" class="headerlink" title="MDN 文档"></a>MDN 文档</h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview</a></p></blockquote><h4 id="HTTP-请求交互的基本过程"><a href="#HTTP-请求交互的基本过程" class="headerlink" title="HTTP 请求交互的基本过程"></a>HTTP 请求交互的基本过程</h4><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230415160908476.png" alt="image-20230415160908476"></p><ol><li>前后应用从浏览器端向服务器发送HTTP 请求(请求报文)</li><li>后台服务器接收到请求后, 调度服务器应用处理请求, 向浏览器端返回HTTP响应(响应报文)</li><li>浏览器端接收到响应, 解析显示响应体/调用监视回调</li></ol><h3 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h3><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method url`</span><br><span class="line">`GET /product_detail?id=2`</span><br><span class="line">`POST /login</span><br></pre></td></tr></table></figure><h4 id="多个请求头"><a href="#多个请求头" class="headerlink" title="多个请求头"></a>多个请求头</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.baidu.com`</span><br><span class="line">`Cookie: BAIDUID=AD3B0FA706E; BIDUPSID=AD3B0FA706;`</span><br><span class="line">`Content-Type: application/x-www-form-urlencoded 或者application/json</span><br></pre></td></tr></table></figure><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=tom&amp;pwd=123`</span><br><span class="line">`&#123;&quot;username&quot;: &quot;tom&quot;, &quot;pwd&quot;: 123&#125;</span><br></pre></td></tr></table></figure><h3 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h3><ol><li>响应状态行: <code>status statusText</code></li><li>多个响应头<br><code>Content-Type: text/html;charset=utf-8</code><br><code>Set-Cookie: BD_CK_SAM=1;path=/</code></li><li>响应体<br><code>html 文本/json 文本/js/css/图片...</code></li></ol><h3 id="POST-请求体参数格式"><a href="#POST-请求体参数格式" class="headerlink" title="POST 请求体参数格式"></a>POST 请求体参数格式</h3><p>1.<strong>Content-Type: application/x-www-form-urlencoded;charset=utf-8</strong><br>    用于键值对参数，参数的键值用=连接, 参数之间用&amp;连接<br>    例如: name=%E5%B0%8F%E6%98%8E&amp;age=12<br>2.<strong>Content-Type: application/json;charset=utf-8</strong><br>    用于 json 字符串参数<br>    例如: {“name”: “%E5%B0%8F%E6%98%8E”, “age”: 12}<br>3.<strong>Content-Type: multipart/form-data</strong><br>    用于文件上传请求</p><h3 id="常见的响应状态码"><a href="#常见的响应状态码" class="headerlink" title="常见的响应状态码"></a>常见的响应状态码</h3><blockquote><p>200 OK 请求成功。一般用于GET 与POST 请求<br>201 Created 已创建。成功请求并创建了新的资源<br>401 Unauthorized 未授权/请求要求用户的身份认证<br>404 Not Found 服务器无法根据客户端的请求找到资源<br>500 Internal Server Error 服务器内部错误，无法完成请求</p></blockquote><h3 id="不同类型的请求及其作用"><a href="#不同类型的请求及其作用" class="headerlink" title="不同类型的请求及其作用"></a>不同类型的请求及其作用</h3><ol><li><code>GET</code>: 从服务器端<strong>读取</strong>数据（查）</li><li><code>POST</code>: 向服务器端<strong>添加</strong>新数据 （增）</li><li><code>PUT</code>: <strong>更新</strong>服务器端已经数据 （改）</li><li><code>DELETE</code>: <strong>删除</strong>服务器端数据 （删）</li></ol><h3 id="API-的分类"><a href="#API-的分类" class="headerlink" title="API 的分类"></a>API 的分类</h3><p>1.<strong>REST API: restful （Representational State Transfer (资源)表现层状态转化）</strong><br>    (1) 发送请求进行CRUD 哪个操作由请求方式来决定<br>    (2) 同一个请求路径可以进行多个操作<br>    (3) 请求方式会用到GET/POST/PUT/DELETE<br>2.<strong>非REST API: restless</strong><br>    (1) 请求方式不决定请求的CRUD 操作<br>    (2) 一个请求路径只对应一个操作<br>    (3) 一般只有GET/POST</p><h3 id="区别-一般HTTP请求-与-Ajax请求"><a href="#区别-一般HTTP请求-与-Ajax请求" class="headerlink" title="区别 一般HTTP请求 与 Ajax请求"></a>区别 一般HTTP请求 与 Ajax请求</h3><p>1.ajax请求 是一种特别的 http请求<br>2.对服务器端来说, 没有任何区别, 区别在浏览器端<br>3.浏览器端发请求: 只有XHR 或fetch 发出的才是ajax 请求, 其它所有的都是非ajax 请求<br>4.浏览器端接收到响应</p><blockquote><pre><code>(1) 一般请求: 浏览器一般会直接显示响应体数据, 也就是我们常说的刷新/跳转页面(2) ajax请求: 浏览器不会对界面进行任何更新操作, 只是调用监视的回调函数并传入响应相关数据</code></pre></blockquote><h1 id="原生AJAX-的基本使用-XHR"><a href="#原生AJAX-的基本使用-XHR" class="headerlink" title="原生AJAX 的基本使用 XHR"></a>原生AJAX 的基本使用 XHR</h1><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p><a href="http://nodejs.cn/">http://nodejs.cn/</a></p><h4 id="安装express（服务端框架）"><a href="#安装express（服务端框架）" class="headerlink" title="安装express（服务端框架）"></a>安装express（服务端框架）</h4><p><a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230415161626530.png" alt="image-20230415161626530"></p><ol><li>初始化环境</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure><p>​    2.下载express包</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>​    3.编写js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//  设置响应</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&quot;Hello Express&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动, 8000 端口监听中...&quot;</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    4.运行js程序</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node .\<span class="number">01</span>express使用.js</span><br></pre></td></tr></table></figure><h4 id="安装nodemon自动重启工具"><a href="#安装nodemon自动重启工具" class="headerlink" title="安装nodemon自动重启工具"></a>安装nodemon自动重启工具</h4><p>文件内容有修改自动重新启动服务<br><a href="https://www.npmjs.com/package/nodemon">https://www.npmjs.com/package/nodemon</a></p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230415161920743.png" alt="image-20230415161920743"></p><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndoemon server.js</span><br></pre></td></tr></table></figure><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><ol><li>使用<code>XMLHttpRequest</code> (XHR)对象可以与服务器交互, 也就是发送ajax 请求</li><li>前端可以获取到数据，而无需让整个的页面刷新。</li><li>这使得Web 页面可以只更新页面的局部，而不影响用户的操作。</li></ol><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a><br><code>XMLHttpRequest</code>，AJAX 的所有操作都是通过该对象进行的</p><h3 id="核心对象使用步骤"><a href="#核心对象使用步骤" class="headerlink" title="核心对象使用步骤"></a>核心对象使用步骤</h3><h4 id="创建XMLHttpRequest-对象"><a href="#创建XMLHttpRequest-对象" class="headerlink" title="创建XMLHttpRequest 对象"></a>创建XMLHttpRequest 对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><h4 id="设置请求信息（请求方法和url）"><a href="#设置请求信息（请求方法和url）" class="headerlink" title="设置请求信息（请求方法和url）"></a>设置请求信息（请求方法和url）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求方式</span></span><br><span class="line">xhr.<span class="title function_">open</span>(method, url);</span><br><span class="line"><span class="comment">//可以设置请求头，一般不设置</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(body) <span class="comment">//get请求不传 body 参数，只有post请求使用</span></span><br></pre></td></tr></table></figure><h4 id="接收响应（事件绑定，处理服务端返回的结果）"><a href="#接收响应（事件绑定，处理服务端返回的结果）" class="headerlink" title="接收响应（事件绑定，处理服务端返回的结果）"></a>接收响应（事件绑定，处理服务端返回的结果）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xhr.responseXML 接收 xml格式 的响应数据</span></span><br><span class="line"><span class="comment">//xhr.responseText 接收 文本格式 的响应数据</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// readyState 是 xhr对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line"><span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> text = xhr.<span class="property">responseText</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ul><li>同源策略(Same-Origin Policy)最早由Netscape 公司提出，是浏览器的一种安全策略</li><li>同源： 协议、域名、端口号必须完全相同</li><li>跨域： 违背同源策略就是<strong>跨域</strong></li></ul><h2 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>1) JSONP 是什么<br>  JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明<br>  才智开发出来，只支持get 请求。<br>2) JSONP 怎么工作的？<br>  在网页有一些标签天生具有跨域能力，比如：img link iframe script。<br>  JSONP 就是利用script 标签的跨域能力来发送请求的。<br>3) JSONP 的使用</p><h5 id="动态的创建一个script-标签"><a href="#动态的创建一个script-标签" class="headerlink" title="动态的创建一个script 标签"></a>动态的创建一个script 标签</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="设置script-的src，设置回调函数"><a href="#设置script-的src，设置回调函数" class="headerlink" title="设置script 的src，设置回调函数"></a>设置script 的src，设置回调函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script.<span class="property">src</span> = <span class="string">&quot;http://localhost:3000/testAJAX?callback=abc&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(data.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="将script-添加到body-中"><a href="#将script-添加到body-中" class="headerlink" title="将script 添加到body 中"></a>将script 添加到body 中</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="服务器中路由的处理"><a href="#服务器中路由的处理" class="headerlink" title="服务器中路由的处理"></a>服务器中路由的处理</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/testAJAX&quot;</span> , <span class="keyword">function</span> (<span class="params">req , res</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到请求&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> callback = req.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">res.<span class="title function_">send</span>(callback+<span class="string">&quot;(&quot;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="jQuery-中的JSONP"><a href="#jQuery-中的JSONP" class="headerlink" title="jQuery 中的JSONP"></a>jQuery 中的JSONP</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;ul id=&quot;list&quot;&gt;&lt;/ul&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./jquery-1.12.3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">var btn = document.getElementById(&#x27;btn&#x27;)</span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">$.getJSON(&quot;http://api.douban.com/v2/movie/in_theaters?callback=?&quot;,function(data) &#123;</span><br><span class="line">console.log(data);</span><br><span class="line">//获取所有的电影的条目</span><br><span class="line">var subjects = data.subjects;</span><br><span class="line">//遍历电影条目</span><br><span class="line">for(var i=0 ; i&lt;subjects.length ; i++)&#123;</span><br><span class="line">$(&quot;#list&quot;).append(&quot;&lt;li&gt;&quot;+</span><br><span class="line">subjects[i].title+&quot;&lt;br /&gt;&quot;+</span><br><span class="line">&quot;&lt;img src=\&quot;&quot;+subjects[i].images.large+&quot;\&quot; &gt;&quot;+</span><br><span class="line">&quot;&lt;/li&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p><h4 id="CORS-是什么？"><a href="#CORS-是什么？" class="headerlink" title="CORS 是什么？"></a>CORS 是什么？</h4><p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get 和post 请求。跨域资源共享标准新增了一组HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p><h4 id="CORS-怎么工作的？"><a href="#CORS-怎么工作的？" class="headerlink" title="CORS 怎么工作的？"></a>CORS 怎么工作的？</h4><p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应<br>以后就会对响应放行</p><h4 id="CORS-的使用"><a href="#CORS-的使用" class="headerlink" title="CORS 的使用"></a>CORS 的使用</h4><p>主要是服务器端的设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/testAJAX&quot;</span> , <span class="keyword">function</span> (<span class="params">req , res</span>) &#123;</span><br><span class="line"><span class="comment">//通过res 来设置响应头，来允许跨域请求</span></span><br><span class="line"><span class="comment">//res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1:3000&quot;);</span></span><br><span class="line">res.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&quot;testAJAX 返回的响应&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise基础</title>
      <link href="/2023/05/12/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/12/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-Promise-对象"><a href="#JavaScript-Promise-对象" class="headerlink" title="JavaScript Promise 对象"></a>JavaScript Promise 对象</h2><h3 id="分类-编程技术"><a href="#分类-编程技术" class="headerlink" title="分类 编程技术"></a><em>分类</em> <a href="https://www.runoob.com/w3cnote_genre/code">编程技术</a></h3><p>ECMAscript 6 原生提供了 Promise 对象。</p><p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p><h3 id="Promise-对象有以下两个特点"><a href="#Promise-对象有以下两个特点" class="headerlink" title="Promise 对象有以下两个特点:"></a>Promise 对象有以下两个特点:</h3><p><strong><em>1、对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：</em></strong></p><ul><li><strong><em>pending: 初始状态，不是成功或失败状态。</em></strong></li><li><strong><em>fulfilled: 意味着操作成功完成。</em></strong></li><li><strong><em>rejected: 意味着操作失败。</em></strong></li></ul><p>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。</p><p>2、<strong><em>一旦状态改变，就不会再变，任何时候都可以得到这个结果。</em></strong></p><p><em>Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</em></p><h3 id="Promise-优缺点"><a href="#Promise-优缺点" class="headerlink" title="Promise 优缺点"></a>Promise 优缺点</h3><p><em>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。</em></p><p>Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="Promise-创建"><a href="#Promise-创建" class="headerlink" title="Promise 创建"></a>Promise 创建</h3><p><strong><em>要想创建一个 promise 对象、可以使用 new 来调用 Promise 的构造器来进行实例化。</em></strong></p><p>下面是创建 promise 的步骤：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;    </span><br><span class="line">    <span class="comment">// 异步处理    </span></span><br><span class="line">    <span class="comment">// 处理结束后、调用resolve 或 reject </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 构造函数包含一个参数和一个带有 resolve（解析）和 reject（拒绝）两个参数的回调。在回调中执行一些操作（例如异步），如果一切都正常，则调用 resolve，否则调用 reject。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFirstPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;    </span><br><span class="line">    <span class="comment">//当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)    </span></span><br><span class="line">    <span class="comment">//在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法。 </span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;        </span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功!&quot;</span>); </span><br><span class="line">        <span class="comment">//代码正常执行！    </span></span><br><span class="line">    &#125;, <span class="number">250</span>); &#125;);  </span><br><span class="line">myFirstPromise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">successMessage</span>)&#123;  </span><br><span class="line">    <span class="comment">//successMessage的值是上面调用resolve(...)方法传入的值.    </span></span><br><span class="line">    <span class="comment">//successMessage参数不一定非要是字符串类型，这里只是举个例子    </span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Yay! &quot;</span> + successMessage); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://c.runoob.com/codedemo/3343">尝试一下 »</a></p><p>对于已经实例化过的 promise 对象可以调用 promise.then() 方法，传递 resolve 和 reject 方法作为回调。</p><p>promise.then() 是 promise 最为常用的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><p>promise简化了对error的处理，上面的代码我们也可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(onFulfilled).<span class="title function_">catch</span>(onRejected)</span><br></pre></td></tr></table></figure><hr><h2 id="Promise-Ajax"><a href="#Promise-Ajax" class="headerlink" title="Promise Ajax"></a>Promise Ajax</h2><p>下面是一个用 Promise 对象实现的 Ajax 操作的例子。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">URL</span>) &#123;   </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;        </span><br><span class="line">     <span class="keyword">var</span> req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();         </span><br><span class="line">     req.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="variable constant_">URL</span>, <span class="literal">true</span>);        </span><br><span class="line">     req.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;        </span><br><span class="line">         <span class="keyword">if</span> (req.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">             <span class="title function_">resolve</span>(req.<span class="property">responseText</span>);            </span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(req.<span class="property">statusText</span>));            </span><br><span class="line">         &#125;         </span><br><span class="line">     &#125;;        </span><br><span class="line">     req.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;            </span><br><span class="line">         <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(req.<span class="property">statusText</span>));        </span><br><span class="line">     &#125;;        </span><br><span class="line">     req.<span class="title function_">send</span>();     </span><br><span class="line"> &#125;); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">URL</span> = <span class="string">&quot;/try/ajax/testpromise.php&quot;</span>;  </span><br><span class="line"><span class="title function_">ajax</span>(<span class="variable constant_">URL</span>).<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onFulfilled</span>(<span class="params">value</span>)&#123;    </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;内容是：&#x27;</span> + value);  </span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> <span class="title function_">onRejected</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;错误：&#x27;</span> + error);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/try/try.php?filename=tryjs_promise1">尝试一下 »</a></p><p>上面代码中，resolve 方法和 reject 方法调用时，都带有参数。它们的参数会被传递给回调函数。reject 方法的参数通常是 Error 对象的实例，而 resolve 方法的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123; </span><br><span class="line"><span class="comment">// ... some code </span></span><br><span class="line">&#125;);  </span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line"><span class="comment">// ... some code </span></span><br><span class="line"><span class="title function_">resolve</span>(p1); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码中，p1 和 p2 都是 Promise 的实例，但是 p2 的 resolve 方法将 p1 作为参数，这时 p1 的状态就会传递给 p2。如果调用的时候，p1 的状态是 pending，那么 p2 的回调函数就会等待 p1 的状态改变；如果 p1 的状态已经是 fulfilled 或者 rejected，那么 p2 的回调函数将会立刻执行。</p><hr><h1 id="Promise-prototype-then方法：链式操作"><a href="#Promise-prototype-then方法：链式操作" class="headerlink" title="Promise.prototype.then方法：链式操作"></a>Promise.prototype.then方法：链式操作</h1><p>Promise.prototype.then 方法<strong>返回的是一个新的 Promise 对象</strong>，因此可以采用链式写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> json.<span class="property">post</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="comment">// proceed</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码使用 then 方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p><p>如果前一个回调函数返回的是Promise对象，这时后一个回调函数就会等待该Promise对象有了运行结果，才会进一步调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/post/1.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>); </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">comments</span>) &#123;  </span><br><span class="line">    <span class="comment">// 对comments进行处理</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种设计使得嵌套的异步操作，可以被很容易得改写，<strong>从回调函数的”横向发展”改为”向下发展”。</strong></p><hr><h1 id="Promise-prototype-catch方法：捕捉错误"><a href="#Promise-prototype-catch方法：捕捉错误" class="headerlink" title="Promise.prototype.catch方法：捕捉错误"></a>Promise.prototype.catch方法：捕捉错误</h1><p>Promise.prototype.catch 方法是 <strong>Promise.prototype.then(null, rejection) 的别名，用于指定发生错误时的回调函数。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 对象的错误具有”冒泡”性质，会一直向后传递，<strong>直到被捕获为止</strong>。也就是说，<strong>错误总是会被下一个 catch 语句捕获。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/post/1.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">comments</span>) &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理前两个回调函数的错误</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="Promise-all方法，Promise-race方法"><a href="#Promise-all方法，Promise-race方法" class="headerlink" title="Promise.all方法，Promise.race方法"></a>Promise.all方法，Promise.race方法</h2><p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例。（Promise.all 方法的参数不一定是数组，但是必须具有 iterator 接口，且返回的每个成员都是 Promise 实例。）</p><p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p><ul><li>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li><li>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</li></ul><p>下面是一个具体的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个Promise对象的数组 </span></span><br><span class="line"><span class="keyword">var</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">id</span>)&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getJSON</span>(<span class="string">&quot;/post/&quot;</span> + id + <span class="string">&quot;.json&quot;</span>); </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123; </span><br><span class="line">    <span class="comment">// ...   </span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的返回值。</p><p>如果Promise.all方法和Promise.race方法的参数，不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。</p><hr><h2 id="Promise-resolve-方法，Promise-reject-方法"><a href="#Promise-resolve-方法，Promise-reject-方法" class="headerlink" title="Promise.resolve 方法，Promise.reject 方法"></a>Promise.resolve 方法，Promise.reject 方法</h2><p>有时需要<strong>将现有对象转为Promise对象</strong>，Promise.resolve方法就起到这个作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>($.<span class="title function_">ajax</span>(<span class="string">&#x27;/whatever.json&#x27;</span>));</span><br></pre></td></tr></table></figure><p>上面代码将 jQuery 生成 deferred 对象，转为一个新的 ES6 的 Promise 对象。</p><p>如果 Promise.resolve 方法的参数，不是具有 then 方法的对象（又称 thenable 对象），则返回一个新的 Promise 对象，且它的状态为fulfilled。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">s</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><p>上面代码<strong>生成一个新的Promise对象的实例p，它的状态为fulfilled</strong>，所以回调函数会立即执行，Promise.resolve方法的参数就是回调函数的参数。</p><p>如果Promise.resolve方法的参数是一个Promise对象的实例，则会被原封不动地返回。</p><p>Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected。Promise.reject方法的参数reason，会被传递给实例的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">p.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span> (<span class="params">s</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><p>上面代码生成一个Promise对象的实例，状态为rejected，回调函数会立即执行。</p>]]></content>
      
      
      <categories>
          
          <category> -拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -拓展 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
