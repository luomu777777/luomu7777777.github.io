<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Liunx</title>
      <link href="/2023/05/17/%E7%AC%AC%E4%B8%83%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/17/%E7%AC%AC%E4%B8%83%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="linux入门"><a href="#linux入门" class="headerlink" title="linux入门"></a>linux入门</h1><h2 id="VM和Linux系统-CentOS-安装"><a href="#VM和Linux系统-CentOS-安装" class="headerlink" title="VM和Linux系统(CentOS)安装"></a>VM和Linux系统(CentOS)安装</h2><p>3.1安装vm和Centos</p><p>学习Linux需要一个环境，我们需要创建一个虚拟机，然后在虚拟机上安装一个Centos系统来学习。</p><p>1)先安装virtualmachine,vm12</p><p>2)再安装Linux(CentOS6.8)</p><p>3)原理示意图，这里我们画图说明一下VM和CentOS的关系。</p><p>3.3VM安装的步骤</p><p>1)去BIOS里修改设置开启虚拟化设备支持（f2,f10）</p><p>2)安装虚拟机软件（vm12）看老师的具体演示：因为老师的电脑上已经安装了VM12，因此我先卸载然后再安装。</p><p>3.4CentOS安装的步骤</p><p>1)创建虚拟机(空间)这里在配置网络连接时，有三种形式，需要大家伙注意：</p><p><img src="Linux/1565526076287.png" alt="虚拟机连接网络三种方式"></p><h3 id="CentOS的终端使用和联网"><a href="#CentOS的终端使用和联网" class="headerlink" title="CentOS的终端使用和联网"></a>CentOS的终端使用和联网</h3><p>1)终端的使用，点击鼠标右键，即可选择打开终端</p><p>2)配置网络，可以上网。点击上面右侧的；两个计算机图片，选择启用eth0,即可成功连接到网络，就可以上网。</p><p><img src="Linux/centos联网-1652182443089.png" alt="1565532090697"></p><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p>4.1基本介绍</p><p>linux的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的目录。深刻理解linux树状文件目录是非常重要的，这里我给大家说明一下。</p><p>记住一句经典的话：==在Linux世界里，一切皆文件。==</p><p><img src="Linux/linux目录结构.png" alt="1565662869703"></p><p>具体的目录结构:</p><p><strong>/bin   [重点]   (/usr/bin、/usr/local/bin)</strong></p><p>•是Binary的缩写, 这个目录存放着最经常使用的命令</p><p><strong>/home [重点]</strong></p><p>•存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p><p><strong>/root [重点]</strong></p><p>•该目录为系统管理员，也称作超级权限者的用户主目录。</p><p><strong>/sbin(/usr/sbin、/usr/local/sbin)</strong></p><p>•s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><p><strong>/lib</strong></p><p>•系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><p><strong>/lost+found</strong></p><p>•这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p><strong>/etc [重点](etcetera,等等)</strong></p><p>•所有的系统管理所需要的配置文件和子目录my.conf </p><p><strong>/usr  [重点]</strong></p><p>•这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</p><p><strong>/boot [重点]</strong></p><p>•存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</p><p><strong>/srv</strong></p><p>•service缩写，该目录存放一些服务启动之后需要提取的数据。</p><p><strong>/sys</strong></p><p>•这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs</p><p><strong>/tmp</strong></p><p>•这个目录是用来存放一些临时文件的。</p><p><strong>/dev</strong> </p><p>•类似于windows的设备管理器，把所有的硬件用文件的形式存储。</p><p><strong>/media [重点]</strong></p><p>•linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p><p><strong>/mnt [重点]</strong></p><p>•系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里的内容了。d:/myshare</p><p><strong>/var [重点]</strong></p><p>•这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。</p><p><strong>/opt</strong>     </p><p>•这是给<strong>主机额外安装软件所摆放的目录</strong>。如安装ORACLE数据库就可放到该目录下。默认为空。</p><p><strong>/usr/local [重点]</strong> </p><p>•这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</p><p><strong>/selinux [security-enhanced linux] 360</strong></p><p>•SELinux是一种安全子系统,它能控制程序只能访问特定文件。</p><h3 id="Linux目录总结"><a href="#Linux目录总结" class="headerlink" title="Linux目录总结"></a>Linux目录总结</h3><p>1)linux的目录中有且只要一个根目录/<br>2)linux的各个目录存放的内容是规划好，不用乱放文件。<br>3)linux是以文件的形式管理我们的设备，因此linux系统，一切皆为文件。</p><p>4)linux的各个文件目录下存放什么内容，大家必须有一个认识。<br>5)学习后，你脑海中应该有一颗linux目录树</p><h2 id="远程登录Linux系统"><a href="#远程登录Linux系统" class="headerlink" title="远程登录Linux系统"></a>远程登录Linux系统</h2><p>5.1为什么需要远程登录Linux</p><p>5.1.1示意图</p><p><img src="Linux/远程登录linux示意图.png" alt="1565664273564"></p><p>为什么需要远程登录Linux<br>说明: 公司开发时候，具体的情况是这样的</p><p>1) linux服务器是开发小组共享的.<br>2) 正式上线的项目是运行在公网的.<br>3) 因此程序员需要远程登录到centos进行项目管理或者开发.<br>4) 画出简单的网络拓扑示意图(帮助理解)<br>5) 远程登录客户端有Xshell5，Xftp5 , 我们学习使用Xshell5 和Xftp , 其它的远程工具大同小异.</p><p><strong>远程登录Linux-Xshell5介绍:</strong></p><p>说明:<br>Xshell 是目前最好的远程登录到Linux操作的软件，流畅的速度并且完美解决了中文乱码的问题，是目前程序员首选的软件。Xshell[1]是一个强大的安全终端模拟软件，它支持SSH1, SSH2, 以及Microsoft Windows 平台的TELNET 协议。<br>Xshell可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。</p><p><strong>特别说明：</strong>如果希望安装好XShell5就可以远程访问Linux系统的话，需要有一个前提，就是Linux启用了SSHD服务，该服务会监听22号端口。</p><p><strong>==终端setup指令查看系统服务中ssh是否开启==</strong></p><p><strong>如果都有，还是不行，就重新建立连接</strong></p><h3 id="5-3安装XShell5并使用"><a href="#5-3安装XShell5并使用" class="headerlink" title="5.3安装XShell5并使用"></a>5.3安装XShell5并使用</h3><p>5.3.2XShell5的关键配置</p><p><img src="Linux/xshell新建回话.png" alt="1565666681964"></p><p>5.3.3XShel5远程登录到Linux后，就可以使用指令来操作Linux系统</p><h3 id="5-4远程上传下载文件Xftp5"><a href="#5-4远程上传下载文件Xftp5" class="headerlink" title="5.4远程上传下载文件Xftp5"></a>5.4远程上传下载文件Xftp5</h3><p>5.4.1XFtp5软件介绍</p><p>是一个基于windows平台的功能强大的SFTP、FTP文件传输软件。使用了Xftp以后，windows用户能安全地在UNIX/Linux和WindowsPC之间传输文件。</p><p>5.4.2XFtp5软件的安装这个看老师的演示即可.<br>5.4.3Xftp5的配置和使用</p><h1 id="linux基础"><a href="#linux基础" class="headerlink" title="linux基础"></a>linux基础</h1><h2 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h2><p>6.1vi和vim的基本介绍<br>所有的Linux系统都会内建vi文本编辑器。<br>Vim具有程序编辑的能力，可以看做是Vi的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><h3 id="vi和vim的三种常见模式"><a href="#vi和vim的三种常见模式" class="headerlink" title="vi和vim的三种常见模式"></a>vi和vim的三种常见模式</h3><p><strong>正常模式</strong></p><p>在<strong>正常模式下，我们可以使用快捷键</strong>。以vim打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中，你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容，也可以使用『复制、贴上』来处理你的文件数据。</p><p><strong>6.2.2插入模式/编辑模式</strong></p><p>在模式下，程序员可以输入内容。按下i,I,o,O,a,A,r,R等任何一个字母之后才会进入编辑模式,一般来说按i即可</p><p><strong>命令行模式</strong></p><p>在这个模式当中，可以提供你相关指令，完成读取、存盘、替换、离开vim、显示行号等的动作则是在此模式中达成的！</p><p>命令行模式下，有<code>:</code>符号使用相关快捷键，如退出命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:q</span><br></pre></td></tr></table></figure><h3 id="vi和vim三种模式的相互转化图"><a href="#vi和vim三种模式的相互转化图" class="headerlink" title="vi和vim三种模式的相互转化图"></a>vi和vim三种模式的相互转化图</h3><p><img src="Linux/vi和vim三种模式的相互转化图.png" alt="1565770723325"></p><h3 id="快捷键使用练习"><a href="#快捷键使用练习" class="headerlink" title="*快捷键使用练习:"></a><em>*快捷键使用练习:</em></h3><p>1) 拷贝当前行yy , 拷贝当前行向下的5行5yy，并粘贴。</p><p>2) 删除当前行dd  , 删除当前行向下的5行 5+dd</p><h4 id="3-在文件中查找某个单词"><a href="#3-在文件中查找某个单词" class="headerlink" title="3) 在文件中查找某个单词"></a>3) 在<strong>文件中查找某个单词</strong></h4><p>[命令行下/关键字，回车查找,  <strong>输入n （next）就是查找下一个</strong>]</p><p>如查找bind</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bind</span><br></pre></td></tr></table></figure><p>4) <strong>设置文件的行号，取消文件的行号.</strong></p><p>[命令行下: set nu 和:set nonu]</p><p>5) 编辑/etc/profile 文件，使用快捷键到底文档的最末行[G]和最首行[gg]</p><p>6) 在一个文件中输入”hello” ,然后又撤销这个动作u7) 编辑/etc/profile 文件，并将光标移动到20行shift+g8) 更多的看整理的文档</p><p>7)编辑/etc/profile文件，并将光标移动到第20行shift+g</p><p>第一步：显示行号:setnu</p><p>第二步：输入20这个数</p><p>第三步:输入（G）shift+g，</p><p>：20在按gg</p><h4 id="vim-到文件开头-结尾"><a href="#vim-到文件开头-结尾" class="headerlink" title="vim 到文件开头 结尾"></a>vim 到文件开头 结尾</h4><p>gg:命令将光标移动到文档开头</p><p>G:命令将光标移动到文档末尾</p><p><strong>uu回退</strong></p><h3 id="vim和vi的快捷键键盘一览图"><a href="#vim和vi的快捷键键盘一览图" class="headerlink" title="vim和vi的快捷键键盘一览图"></a>vim和vi的快捷键键盘一览图</h3><p><img src="Linux/vim和vi的快捷键键盘一览图.png" alt="1565771568531"></p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>粘贴前<strong>需要进入编辑模式（i），然后再粘贴</strong></p><h2 id="开机、重启和用户登录注销"><a href="#开机、重启和用户登录注销" class="headerlink" title="开机、重启和用户登录注销"></a>开机、重启和用户登录注销</h2><p>7.1关机&amp;重启命令</p><p>7.1.1基本介绍</p><p><strong>shutdown</strong></p><p>shutdown-hnow:表示立即关机</p><p>shutdown-h1:表示1分钟后关机</p><p>shutdown-rnow:立即重启</p><p>halt</p><p>就是直接使用，效果等价于关机</p><p>reboot就是重启系统。</p><p>sync：把内存的数据同步到磁盘</p><p>7.1.2注意细节</p><p>当我们关机或者重启时，都应该先执行以下sync指令，把内存的数据写入磁盘，防止数据丢失。</p><p>7.2用户登录和注销</p><p>7.2.1基本介绍</p><p>1)登录时尽量少用root帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录后再用”su-用户名’命令来切换成系统管理员身份.</p><p>2)在提示符下输入logout即可注销用户</p><p>7.2.2使用细节</p><p>1)logout注销指令在图形运行级别无效，在运行级别3下有效.</p><p>2)运行级别这个概念，后面给大家介绍</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>8.1基本介绍</p><p>给大家画一个示意图，帮助大家理解用户管理的规则。</p><p><img src="Linux/用户管理.png" alt="1565781941709"></p><p>说明</p><p>1)Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>2)Linux的用户需要至少要属于一个组。</p><h3 id="查看所有用户名"><a href="#查看所有用户名" class="headerlink" title="查看所有用户名"></a>查看所有用户名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## more /etc/passwd</span><br><span class="line">[root@hapdoop1 ~]## more /etc/passwd | cut -f 1 -d :</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">gopher</span><br><span class="line">ftp</span><br><span class="line">nobody</span><br><span class="line">dbus</span><br><span class="line">usbmuxd</span><br><span class="line">rtkit</span><br><span class="line">avahi-autoipd</span><br><span class="line">vcsa</span><br><span class="line">abrt</span><br><span class="line">haldaemon</span><br><span class="line">ntp</span><br><span class="line">apache</span><br><span class="line">saslauth</span><br><span class="line">postfix</span><br><span class="line">gdm</span><br><span class="line">pulse</span><br><span class="line">sshd</span><br><span class="line">tcpdump</span><br><span class="line">xm</span><br><span class="line">fox</span><br><span class="line">tom</span><br></pre></td></tr></table></figure><p>8.2添加用户</p><p>8.2.1基本语法</p><p>useradd [选项] 用户名</p><p>8.2.2实际案例</p><p>特别说明：<strong>==cd表示changedirectory==</strong>,切换目录.</p><p>8.2.3细节说明</p><p>1)<strong>当创建用户成功后，(加上-m参数)会自动的创建和用户同名的家目录</strong></p><p><strong>==没有-m参数不会有缺省目录==</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@iZuf6i77uwsb2oiszspgvkZ:~## useradd -m nicolas</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2)也可以通过useradd-d指定目录新的用户名，给新创建的用户指定家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## useradd -d /home/dog xh</span><br></pre></td></tr></table></figure><p>指定/修改密码基本语法</p><p>passwd    用户名</p><p>删除用户基本语法userdel   用户名</p><p>应用案例1)删除用户xiaoming，但是要保留家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## userdel xm</span><br></pre></td></tr></table></figure><p>2)删除用户以及用户主目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## userdel -r xh</span><br></pre></td></tr></table></figure><p>8.4.3思考题在删除用户时，我们一般不会将家目录删除。</p><p>8.5查询用户信息</p><p>8.5.1基本语法</p><p>id 用户名</p><p>应用实例案例1：请查询root信息8.5.3</p><p><img src="Linux/id username.png" alt="1565783310913"></p><p>细节说明</p><p>1)当用户不存在时，返回”无此用户”</p><h3 id="8-6切换用户"><a href="#8-6切换用户" class="headerlink" title="8.6切换用户"></a>8.6切换用户</h3><p>8.6.1介绍(substitute user)</p><p>在操作Linux中，如果当前用户的权限不够，可以通过su-指令，切换到高权限用户，比如root</p><p>8.6.2基本语法(run a shell with substitute user and group IDs)</p><p>su– 切换用户名</p><p>8.6.3应用实例</p><p>1)创建一个用户zf,，指定密码，然后切换到zf.</p><p><img src="Linux/su-切换用户.png" alt="1565785356718"></p><p>细节说明</p><p>1)从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p><p>2)当需要返回到原来用户时，使用exit指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>8.7用户组</p><p>8.7.1介绍类似于角色，系统可以对有共性的多个用户进行统一的管理。</p><p><strong>8.7.2增加组</strong></p><p>groupadd 组名</p><p>案例演示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## groupadd wudang</span><br></pre></td></tr></table></figure><p><strong>8.7.4删除组指令</strong></p><p>(基本语法)groupdel 组名</p><p>8.7.5案例演示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## groupdel wudang</span><br></pre></td></tr></table></figure><h3 id="8-8增加用户时直接加上组"><a href="#8-8增加用户时直接加上组" class="headerlink" title="8.8增加用户时直接加上组"></a>8.8增加用户时直接加上组</h3><p>8.8.1指令(基本语法)</p><p>useradd -g 用户组 用户名</p><p>8.8.2案例演示</p><p>增加一个用户zwj,直接将他指定到wudang步骤看演示：</p><p><img src="Linux/useradd -g.png" alt="1565786129905"></p><p>8.9修改用户的组</p><p>8.9.1指令(基本语法)</p><p>usermod -g 用户组 用户名</p><p>8.9.2案例演示创建一个shaolin组，让将zwj用户修改到shaolin</p><p><img src="Linux/usermod -g.png" alt="1565786180228"></p><p><strong>8.10/etc/passwd文件</strong></p><p>用户（user）的配置文件，记录用户的各种信息</p><p>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><p><img src="Linux/1565792119178.png" alt="1565792119178"></p><p>8.11/etc/shadow文件</p><p>口令的配置文件</p><p>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p><p>8.12/etc/group文件</p><p>组(group)的配置文件，记录Linux包含的组的信息</p><p>每行含义：组名:口令:组标识号:组内用户列表</p><p><img src="Linux/1565792160979.png" alt="1565792160979"></p><h1 id="9实用指令"><a href="#9实用指令" class="headerlink" title="9实用指令"></a>9实用指令</h1><h3 id="9-1指定运行级别"><a href="#9-1指定运行级别" class="headerlink" title="9.1指定运行级别"></a>9.1指定运行级别</h3><p><strong>运行级别说明：</strong></p><p>0：关机</p><p>1：单用户【找回丢失密码】</p><p>2：多用户状态没有网络服务</p><p>3：多用户状态有网络服务4：系统未使用保留给用户</p><p>5：图形界面</p><p>6：系统重启</p><p>常用运行级别是3和5，要修改默认的运行级别可改文件/etc/inittab的id:5:initdefault:这一行中的数字运行级别的示意图：</p><p><img src="Linux/1565792596928.png" alt="1565792596928"></p><p>9.2切换到指定运行级别的指令</p><p>9.2.1基本语法</p><p>init[012356]</p><p><img src="Linux/1565792796464.png" alt="1565792796464"></p><p>9.2.2应用实例案例</p><p>1：通过init来切换不同的运行级别，比如动5-&gt;3，然后关机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init3</span><br><span class="line"></span><br><span class="line">init5</span><br><span class="line"></span><br><span class="line">init0</span><br></pre></td></tr></table></figure><p>9.2.3面试题</p><p>  <strong>如何找回root密码</strong>，如果我们不小心，忘记root密码，怎么找回。</p><p>思路：进入到单用户模式，然后修改root密码。</p><p>因为进入单用户模式，root不需要密码就可以登录。演示一把（注意观察）：</p><p><strong>总结:</strong>开机-&gt;在引导时输入回车键-&gt;看到一个界面输入e-&gt;看到一个新的界面，选中第二行（编辑内核）在输入e-&gt;在这行最后输入1,再输入回车键-&gt;再次输入b,这时就会进入到单用户模式。这时，我们就进入到单用户模式，使用passwd指令来修改root密码。</p><p>2)请设置我们的运行级别，linux运行后，直接进入到命令行界面，即进入到3</p><p>运行级别vim/etc/inittab将id:5:initdefault:这一行中的数字,5这个数字改成对应的运行级别即可。</p><h3 id="9-3帮助指令"><a href="#9-3帮助指令" class="headerlink" title="9.3帮助指令"></a>9.3帮助指令</h3><p>9.3.1介绍</p><p>当我们对某个指令不熟悉时，我们可以使用Linux提供的帮助指令来了解这个指令的使用方法。</p><p><strong>9.3.2man(manual)</strong> 获得帮助信息</p><ul><li>基本语法</li><li>man [命令或配置文件]（功能描述：获得帮助信息）</li><li>应用实例案例：查看ls命令的帮助信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## man ls</span><br></pre></td></tr></table></figure><p>9.3.3help指令</p><p> 基本语法</p><p>help命令（功能描述：获得shell内置命令的帮助信息）</p><p>应用实例案例：查看cd命令的帮助信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## help cd</span><br></pre></td></tr></table></figure><h2 id="4文件目录类"><a href="#4文件目录类" class="headerlink" title="4文件目录类"></a>4文件目录类</h2><p>9.4.1pwd 指令(print name of current/working directory)</p><p>•基本语法</p><p>pwd (功能描述：显示当前工作目录的绝对路径)</p><p>•应用实例案例：显示当前工作目录的绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## pwd</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><p>9.4.2ls指令 (list directory contents)</p><p>•基本语法</p><p>ls [选项] [目录或是文件]</p><p>•常用选项</p><p>-a：显示当前目录所有的文件和目录，包括隐藏的。</p><p>-l：以列表的方式显示信息</p><p>•应用实例案例:查看当前目录的所有内容信息</p><h4 id="9-4-3cd指令"><a href="#9-4-3cd指令" class="headerlink" title="9.4.3cd指令"></a>9.4.3cd指令</h4><p>•基本语法</p><p>cd [参数] (功能描述：切换到指定目录)</p><p>•常用参数</p><p>绝对路径和相对路径</p><p>如何理解绝对路径和相对路径：</p><p>cd~ 或者 cd：回到自己的家目录</p><p>cd.. : 回到当前目录的上一级目录</p><p>•应用实例</p><p>案例1：使用绝对路径切换到root目录</p><p>cd/root</p><p>案例2:</p><p>使用相对路径到/root目录</p><p>这里我们需要知道该用户目录在哪个目录下，才能写出这个指令，假设在/usr/lib</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd../../root</span><br></pre></td></tr></table></figure><p>案例3：表示回到当前目录的上一级目录cd..案例4：回到家目录</p><p>cd cd~</p><h4 id="9-4-4-mkdir指令"><a href="#9-4-4-mkdir指令" class="headerlink" title="9.4.4 mkdir指令"></a>9.4.4 mkdir指令</h4><p>mkdir指令用于创建目录(makedirectory)</p><p>基本语法</p><p>mkdir [选项] 要创建的目录</p><p>•常用选项</p><p>-p(—parents)：创建多级目录</p><p>•应用实例案例1:创建一个目录/home/dog</p><p><img src="Linux/1565837024122.png" alt="1565837024122"></p><p>案例2:创建多级目录/home/animal/tiger</p><p><img src="Linux/1565837051989.png" alt="1565837051989"></p><h4 id="9-4-5rmdir指令"><a href="#9-4-5rmdir指令" class="headerlink" title="9.4.5rmdir指令"></a>9.4.5rmdir指令</h4><p>介绍</p><p>rmdir指令删除空目录</p><p>基本语法</p><p>rmdir [选项] 要删除的空目录</p><p>应用实例案例1:删除一个目录/home/dog</p><p><img src="Linux/1565837251812.png" alt="1565837251812"></p><p>使用细节</p><p>rmdir删除的是空目录，如果目录下有内容时无法删除的。</p><p>提示：如果需要删除非空目录，需要使用rm-rf要删除的目录</p><p><img src="Linux/1565837276308.png" alt="1565837276308"></p><h4 id="9-4-6touch指令"><a href="#9-4-6touch指令" class="headerlink" title="9.4.6touch指令"></a>9.4.6touch指令</h4><p>touch指令 <strong>创建空文件</strong></p><p>•基本语法</p><p>touch 文件名称</p><p>•应用实例案例</p><p>1:创建一个空文件hello.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## touch ok1.txt ok2.txt</span><br><span class="line">[root@hapdoop1 home]## ls</span><br><span class="line">ok1.txt  ok2.txt  xm</span><br></pre></td></tr></table></figure><h4 id="9-4-7cp指令-重要"><a href="#9-4-7cp指令-重要" class="headerlink" title="9.4.7cp指令[重要]"></a><strong>9.4.7cp指令[重要]</strong></h4><p>cp指令 拷贝文件到指定目录</p><p>•基本语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [选项] source dest</span><br></pre></td></tr></table></figure><p>•常用选项-r：递归复制整个文件夹</p><p>•应用实例案例</p><p>1:将/home/aaa.txt拷贝到/home/bbb目录下[拷贝单个文件</p><p><img src="Linux/1565838042908.png" alt="1565838042908"></p><p>案例2:递归复制整个文件夹，举例将/home/test整个目录拷贝到/home/zwj目录</p><p><img src="Linux/1565838068157.png" alt="1565838068157"></p><p>•使用细节</p><p>强制覆盖不提示的方法：\cp</p><p><img src="Linux/1565838103619.png" alt="1565838103619"></p><p>9.4.8rm指令</p><p>rm 指令移除</p><p>【删除】文件或目录</p><p>•基本语法rm[选项]要删除的文件或目录</p><p>•常用选项</p><p>-r：递归删除整个文件夹</p><p>-f：强制删除不提示</p><p>•应用实例案例1:将/home/aaa.txt删除</p><p><img src="Linux/1565838446936.png" alt="1565838446936"></p><p>案例2:递归删除整个文件夹/bb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 /]## rm -r bb/</span><br><span class="line">rm：是否删除目录 &quot;bb&quot;？y</span><br></pre></td></tr></table></figure><p>使用细节</p><p>强制删除不提示的方法：带上-f参数即可</p><p><img src="Linux/1565838608072.png" alt="1565838608072"></p><h4 id="mv指令"><a href="#mv指令" class="headerlink" title="mv指令"></a>mv指令</h4><p>mv 移动文件与目录或重命名</p><p>•基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv oldNameFile newNameFile</span><br></pre></td></tr></table></figure><p> (功能描述：重命名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /temp/movefile /targetFolder</span><br></pre></td></tr></table></figure><p>(功能描述：移动文件)</p><p>•应用实例</p><p>案例1:将/home/aaa.txt文件重新命名为pig.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## mv aaa.txt pig.txt</span><br><span class="line">[root@hapdoop1 home]## ls</span><br><span class="line">ok1.txt  ok2.txt  pig.txt  xm</span><br></pre></td></tr></table></figure><p>案例2:将/home/pig.txt文件移动到/root目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## mv pig.txt /root</span><br><span class="line">[root@hapdoop1 home]## cd ~</span><br><span class="line">[root@hapdoop1 ~]## ls</span><br><span class="line">anaconda-ks.cfg  install.log.syslog  公共的   视频  下载</span><br><span class="line">hello.java       ok.txt              红1.jpg  图片  音乐</span><br><span class="line">install.log      pig.txt             模板     文档  桌面</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><h4 id="1-tail用于查看文件末尾内容"><a href="#1-tail用于查看文件末尾内容" class="headerlink" title="1.tail用于查看文件末尾内容"></a>1.tail用于查看文件末尾内容</h4><p><strong>-f 每当有新的内容 实时展示出来</strong>。</p><p>答：</p><p>tail -n 10 文件名 : n=行数 10=查看多少行</p><p>tail -n 10 -f 文件名 : </p><p><strong>用tail -f指令查看日志</strong></p><h4 id="10cat指令-concatenate"><a href="#10cat指令-concatenate" class="headerlink" title="10cat指令(concatenate)"></a>10cat指令(concatenate)</h4><p><strong>cat查看文件内容，是以只读的方式打开</strong>。</p><p>•基本语法</p><p>cat [选项] 要查看的文件</p><p>•常用选项-n：显示行号</p><p>•应用实例</p><p>案例1:/etc/profile文件内容，并显示行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## cat -n /etc/profile | more</span><br></pre></td></tr></table></figure><p>•使用细节</p><p>cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上管道命令|more</p><p>cat文件名|more[分页浏览]</p><h4 id="11more指令"><a href="#11more指令" class="headerlink" title="11more指令"></a>11more指令</h4><p>more指令是一个基于VI编辑器的文本过滤器，它以<strong>全屏幕的方式按页显示文本文件的内容</strong>。</p><p>more指令中内置了若干快捷键，详见操作说明</p><p>•基本语法 </p><p>more 要查看的文件</p><p>•操作说明</p><p>•应用实例案例:</p><p>采用more查看文件/etc/profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## more /etc/profile</span><br></pre></td></tr></table></figure><p>12less指令</p><p>less指令用来<strong>分屏查看文件内容</strong>，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于<strong>显示大型文件具有较高的效率</strong>。</p><p>•基本语法</p><p>less 要查看的文件</p><p>•操作说明</p><p>•应用实例</p><p>案例:采用less查看一个大文件文件/opt/金庸-射雕英雄传txt精校版.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 opt]## less 金庸-射雕英雄传txt精校版.txt </span><br></pre></td></tr></table></figure><p><img src="Linux/1565840469904.png" alt="1565840469904"></p><h4 id="9-4-13-gt-指令和-gt-gt-指令"><a href="#9-4-13-gt-指令和-gt-gt-指令" class="headerlink" title="9.4.13&gt;指令和&gt;&gt;指令"></a>9.4.13&gt;指令和&gt;&gt;指令</h4><p>介绍</p><p> 指令和&gt;&gt;指令<br> <strong>> 输出重定向:会将原来的文件的内容覆盖</strong></p><p> >&gt;追加：不会覆盖原来文件的内容，而是追加到文件的尾部。•</p><p>基本语法</p><p>1)ls-l&gt;文件（功能描述：列表的内容写入文件a.txt中（覆盖写））</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## ls -l &gt; a.txt</span><br></pre></td></tr></table></figure><p>说明：ls-l&gt;a.txt,将ls-l的显示的内容覆盖写入到a.txt文件，如果该文件不存在，就创建该文件。</p><p>2)ls-al&gt;&gt;文件（功能描述：列表的内容追加到文件aa.txt的末尾）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## ls -al &gt;&gt; a.txt</span><br></pre></td></tr></table></figure><p>3)cat文件1&gt;文件2（功能描述：将文件1的内容覆盖到文件2）<strong>相当于复制文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## cat /etc/profile &gt; c.txt</span><br></pre></td></tr></table></figure><p>9.4.14echo指令</p><p>echo输出内容到控制台。</p><p>•基本语法echo[选项] [输出内容]</p><p>•应用实例</p><p>案例:使用echo指令输出环境变量,输出当前的环境路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## echo $PATH</span><br><span class="line"></span><br><span class="line">[root@hapdoop1 ~]## echo &quot;hello&quot;</span><br></pre></td></tr></table></figure><p>9.4.15head指令</p><p>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容</p><p>•基本语法</p><p>head 文件(功能描述：查看文件头10行内容)</p><p>head -n 5 文件   (功能描述：查看文件头5行内容，5可以是任意行数)</p><p>•应用实例</p><p>案例:查看/etc/profile的前面5行代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## head -n 5 /etc/profile</span><br></pre></td></tr></table></figure><p>9.4.16tail指令</p><p>tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容。</p><p>•基本语法</p><p>1)tail 文件（功能描述：查看文件后10行内容）</p><p>2)tail -n 5 文件（功能描述：查看文件后5行内容，5可以是任意行数）3)tail -f 文件（功能描述：实时追踪该文档的所有更新，工作经常使用）</p><p>•应用实例</p><p>案例1:查看/etc/profile最后5行的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## tail -n 5 /etc/profile</span><br></pre></td></tr></table></figure><p>案例2:实时监控mydate.txt,看看到文件有变化时，是否看到，实时的追加日期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## tail -f mydate.txt </span><br></pre></td></tr></table></figure><p>9.4.17ln指令</p><p>软链接也叫符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径</p><p>•基本语法</p><p>ln -s [原文件或目录] [软链接名]（功能描述：给原文件创建一个软链接）</p><p>•应用实例</p><p>案例1:在/home目录下创建一个软连接linkToRoot，连接到/root目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## ln -s /root linkToRoot</span><br></pre></td></tr></table></figure><p>案例2:删除软连接linkToRoot</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## rm linkToRoot</span><br></pre></td></tr></table></figure><p>•细节说明</p><p>当我们使用pwd指令查看目录时，仍然看到的是软链接所在目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## cd linkToRoot/</span><br><span class="line">[root@hapdoop1 linkToRoot]## pwd</span><br><span class="line">/home/linkToRoot</span><br><span class="line">[root@hapdoop1 linkToRoot]## ls</span><br><span class="line">anaconda-ks.cfg  install.log.syslog  公共的   视频  下载</span><br><span class="line">hello.java       ok.txt              红1.jpg  图片  音乐</span><br><span class="line">install.log      pig.txt             模板     文档</span><br></pre></td></tr></table></figure><h4 id="9-4-18history指令"><a href="#9-4-18history指令" class="headerlink" title="9.4.18history指令"></a>9.4.18history指令</h4><p>查看已经执行过历史命令,也可以执行历史指令</p><p>•基本语法history（功能描述：查看已经执行过历史命令）</p><p>•应用实例案例1:显示所有的历史命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## history</span><br></pre></td></tr></table></figure><p>案例2:显示最近使用过的10个指令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## history 10</span><br></pre></td></tr></table></figure><p>案例3：执行历史编号为5的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## !111</span><br></pre></td></tr></table></figure><h3 id="9-5时间日期类"><a href="#9-5时间日期类" class="headerlink" title="9.5时间日期类"></a>9.5时间日期类</h3><h4 id="9-5-1date指令"><a href="#9-5-1date指令" class="headerlink" title="9.5.1date指令"></a>9.5.1date指令</h4><p>-显示当前日期</p><p>•基本语法</p><p>1)date（功能描述：显示当前时间）</p><p>2)date+%Y（功能描述：显示当前年份）</p><p>3)date+%m（功能描述：显示当前月份）</p><p>4)date+%d（功能描述：显示当前是哪一天）</p><p>5)date”+%Y-%m-%d%H:%M:%S”（功能描述：显示年月日时分秒）</p><p>•应用实例案例1:显示当前时间信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## date</span><br><span class="line">2019年 08月 15日 星期四 17:57:34 CST</span><br></pre></td></tr></table></figure><p>案例2:显示当前时间年月日</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## date &quot;+%Y %m %d&quot;</span><br><span class="line">2019 08 15</span><br></pre></td></tr></table></figure><p>案例3:显示当前时间年月日时分秒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## date &quot;+%Y %m %d %H:%M:%S&quot;</span><br><span class="line">2019 08 15 18:04:05</span><br></pre></td></tr></table></figure><p>9.5.2date指令</p><p>-设置日期</p><p>•基本语法</p><p>date -s 字符串时间</p><p>•应用实例</p><p>案例1:设置系统当前时间，比如设置成2018-10-1011:22:22</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## date -s &quot;2019-9-9 11:11:11&quot;</span><br><span class="line">2019年 09月 09日 星期一 11:11:11 CST</span><br></pre></td></tr></table></figure><p>9.5.3cal指令(calendar)</p><p>查看日历指令</p><p>•基本语法cal[选项]（功能描述：不加选项，显示本月日历）</p><p>•应用实例案例1:显示当前日历</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## cal</span><br></pre></td></tr></table></figure><p>案例2:显示2020年日历</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## cal 2020</span><br></pre></td></tr></table></figure><h3 id="9-6搜索查找类"><a href="#9-6搜索查找类" class="headerlink" title="9.6搜索查找类"></a>9.6搜索查找类</h3><p>9.6.1find指令</p><p>find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p><p>•基本语法</p><p>find [搜索范围] [选项]</p><p>•选项说明</p><p><img src="Linux/1565860782439.png" alt="1565860782439"></p><p>•应用实例</p><p>案例1:按文件名：根据名称查找/home目录下的hello.txt文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## find /home -name hello.txt</span><br></pre></td></tr></table></figure><p>案例2：按拥有者：查找/opt目录下，用户名称为root的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## find /opt -user root</span><br></pre></td></tr></table></figure><p>案例3：查找整个linux系统下大于20m的文件（+n大于-n小于n等于）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## find /opt -size +20M</span><br></pre></td></tr></table></figure><p>查询/目录下，所有.txt的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## find / -name \*.txt</span><br></pre></td></tr></table></figure><p>9.6.2locate指令</p><p>locaate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</p><p>•基本语法</p><p>locate 搜索文件</p><p>•特别说明由于locate指令基于数据库进行查询，所以<strong>第一次运行前，必须使用updatedb指令创建locate数据库。</strong></p><p>•应用实例</p><p>案例1:请使用locate指令快速定位hello.txt文件所在目录</p><p><img src="Linux/1565861704260.png" alt="1565861704260"></p><h4 id="9-6-3grep指令和管道符号"><a href="#9-6-3grep指令和管道符号" class="headerlink" title="9.6.3grep指令和管道符号|"></a>9.6.3grep指令和管道符号|</h4><p><strong>grep过滤查找</strong>，管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。</p><p>•基本语法</p><p>grep [选项] 查找内容源文件</p><p>•常用选项</p><p><img src="Linux/1565862055457.png" alt="1565862055457"></p><p>•应用实例</p><p>案例1:请在hello.txt文件中，查找”yes”所在行，并且显示行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## cat hello.txt | grep -n yes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不区分大小写</span></span><br><span class="line">[root@hapdoop1 home]## cat hello.txt | grep -ni yes</span><br></pre></td></tr></table></figure><h3 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h3><p>9.7.1gzip/gunzip指令</p><p>gzip用于压缩文件，gunzip用于解压的</p><p>•基本语法</p><p>gzip 文件（功能描述：压缩文件，只能将文件压缩为*.gz文件）</p><p>gunzip 文件.gz（功能描述：解压缩文件命令）</p><p>•应用实例</p><p>案例1:gzip压缩，将/home下的hello.txt文件进行压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## gzip hello.txt</span><br></pre></td></tr></table></figure><p>案例2:gunzip压缩，将/home下的hello.txt.gz文件进行解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## gunzip hello.txt.gz </span><br></pre></td></tr></table></figure><p>细节说明</p><p>当我们使用gzip对文件进行压缩后，不会保留原来的文件。</p><p>9.7.2 zip/unzip指令</p><p>zip用于压缩文件，unzip用于解压的，这个在项目打包发布中很有用的</p><p>•基本语法</p><p>zip [选项] XXX.zip 将要压缩的内容（功能描述：压缩文件和目录的命令）unzip [选项] XXX.zip（功能描述：解压缩文件）</p><p>•zip常用选项</p><p>-r：递归压缩，即压缩目录</p><p>unzip的常用选项</p><p>-d &lt;目录&gt;：指定解压后文件的存放目录</p><p>•应用实例</p><p>案例1:将/home下的所有文件进行压缩成mypackage.zip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## zip -r mypackge.zip /home/</span><br></pre></td></tr></table></figure><p>案例2:将mypackge.zip解压到/opt/tmp目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## unzip -d /opt/tmp/ mypackge.zip </span><br></pre></td></tr></table></figure><h4 id="tar指令"><a href="#tar指令" class="headerlink" title="tar指令"></a>tar指令</h4><p>tar指令是打包指令，最后打包后的文件是.tar.gz的文件。</p><p>•基本语法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar [选项] XXX.tar.gz(打包的内容)</span><br></pre></td></tr></table></figure><p>(功能描述：打包目录，压缩后的文件格式.tar.gz)</p><p>•选项说明</p><div class="table-container"><table><thead><tr><th>选项<br/></th><th>功能<br/></th></tr></thead><tbody><tr><td>-c(—create)</td><td>产生.tar打包文件</td></tr><tr><td>-v(verbose，adj. 冗长的；啰嗦的)</td><td>显示详细信息<br/></td></tr><tr><td>-f(file)</td><td>指定压缩后的文件名</td></tr><tr><td>-z(gzip)</td><td>打包同时压缩<br/></td></tr><tr><td>x(extract)</td><td>解包.tar文件</td></tr></tbody></table></div><p>•应用实例</p><p>案例1:压缩多个文件，将/home/a1.txt和/home/a2.txt压缩成a.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## tar -zcvf a.tar.gz ok1.txt ok2.txt </span><br></pre></td></tr></table></figure><p>案例3:将a.tar.gz解压到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## tar -zxvf a.tar.gz </span><br></pre></td></tr></table></figure><p>案例4:将myhome.tar.gz解压到/opt/目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## tar -zxvf a.tar.gz -C /opt</span><br></pre></td></tr></table></figure><h2 id="10组管理和权限管理"><a href="#10组管理和权限管理" class="headerlink" title="10组管理和权限管理"></a>10组管理和权限管理</h2><p>10.1Linux组</p><p>基本介绍</p><p>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件有所有者、所在组、其它组的概念。</p><p>1)所有者</p><p>2)所在组</p><p>3)其它组</p><p>4)改变用户所在的组</p><p><img src="Linux/1565875927535.png" alt="1565875927535"></p><p>10.2文件/目录所有者</p><p>一般为文件的创建者,谁创建了该文件，就自然的成为该文件的所有者。10.2.1查看文件的所有者</p><p>1)指令：ls -ahl</p><p>2)应用实例：创建一个组police,再创建一个用户tom,将tom放在police组,然后使用tom来创建一个文件ok.txt，看看情况如何</p><p><img src="Linux/1565875980700.png" alt="1565875980700"></p><p><img src="Linux/1565875994021.png" alt="1565875994021"></p><p><img src="linux\1565876017558.png" alt="1565876017558"></p><h3 id="10-3组的创建"><a href="#10-3组的创建" class="headerlink" title="10.3组的创建"></a>10.3组的创建</h3><p>10.3.1基本指令</p><p>groupadd 组名</p><p>10.3.2应用实例:</p><p>创建一个组,monster</p><p>创建一个用户fox，并放入到monster组中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## groupadd monster</span><br><span class="line">[root@hapdoop1 ~]## useradd -g monster fox</span><br></pre></td></tr></table></figure><h3 id="10-4文件-目录所在组"><a href="#10-4文件-目录所在组" class="headerlink" title="10.4文件/目录所在组"></a>10.4文件/目录所在组</h3><p>当某个用户创建了一个文件后，默认这个文件的所在组就是该用户所在的组。#### 10.4.1查看文件/目录所在组</p><p>•基本指令</p><p>ls –ahl</p><h4 id="10-4-2修改文件所在的组"><a href="#10-4-2修改文件所在的组" class="headerlink" title="10.4.2修改文件所在的组"></a>10.4.2修改文件所在的组</h4><p>•基本指令</p><p> chgrp 组名 文件名</p><p>•应用实例</p><p>使用root用户创建文件orange.txt,看看当前这个文件属于哪个组，然后将这个文件所在组，修改到police组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## chgrp police orange.txt </span><br><span class="line">[root@hapdoop1 ~]## ls -ahl</span><br><span class="line">-rw-r--r--.  1 root police   12 9月  16 02:17 orange.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>10.5其它组</p><p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组.</p><p>10.6改变用户所在组</p><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某个用户所在的组。</p><p>10.6.1改变用户所在组</p><p>1)usermod –g 组名 用户名</p><p>2)usermod –d 目录名 用户名 改变该用户登陆的初始目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## usermod -g  bandit fox</span><br></pre></td></tr></table></figure><h3 id="10-7权限的基本介绍"><a href="#10-7权限的基本介绍" class="headerlink" title="10.7权限的基本介绍"></a>10.7权限的基本介绍</h3><p>ls -l中显示的内容如下：</p><p>-rwxrw-r—1rootroot1213Feb209:39abc</p><p>0-9位说明</p><p>1)第0位确定文件类型(d,-,l,c,b)</p><p>2)第1-3位确定所有者（该文件的所有者）拥有该文件的权限。—-User</p><p>3)第4-6位确定所属组（同用户组的）拥有该文件的权限，—-Group</p><p>4)第7-9位确定其他用户拥有该文件的权限—-Other</p><p><img src="Linux/1565876081126.png" alt="1565876081126"></p><h3 id="10-8rwx权限详解"><a href="#10-8rwx权限详解" class="headerlink" title="10.8rwx权限详解"></a>10.8rwx权限详解</h3><p><strong>10.8.1rwx作用到文件</strong></p><p>1)[r]代表可读(read):可以读取,查看 ： 数字4</p><p>2)[w]代表可写(write):可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件. ：数字2</p><p>3)[x]代表可执行(execute):可以被执行 ：数字1</p><p><strong>10.8.2rwx作用到目录</strong></p><p>1)[r]代表可读(read):可以读取，ls查看目录内容</p><p>2)[w]代表可写(write):可以修改,目录内创建+删除+重命名目录</p><p>3)[x]代表可执行(execute):可以进入该目录10.9文件及目录权限实际案例ls-l中显示的内容如下：(记住)-rwxrw-r—1rootroot1213Feb209:39abc</p><p>10个字符确定不同用户能对文件干什么</p><p><strong>第一个字符代表文件类型：文件(-),目录(d),链接(l)</strong></p><p>其余字符每3个一组(rwx)读(r)写(w)执行(x)</p><p>第一组rwx:文件拥有者的权限是读、写和执行</p><p>第二组rw-:与文件拥有者同一组的用户的权限是读、写但不能执行</p><p>第三组r—:不与文件拥有者同组的其他用户的权限是读不能写和执行</p><p>可用数字表示为:r=4,w=2,x=1因此rwx=4+2+1=7</p><p>1                     文件：硬连接数或目录：子目录数</p><p>root                 用户root组</p><p>1213                文件大小(字节)，如果是文件夹，显示4096字节</p><p>Feb209:39        最后修改日期</p><p>abc                    文件名</p><h4 id="10-9文件及目录权限"><a href="#10-9文件及目录权限" class="headerlink" title="10.9文件及目录权限"></a>10.9文件及目录权限</h4><p>ls-l中显示的内容如下：(记住)</p><p>-rwxrw-r—1rootroot1213Feb209:39abc</p><h3 id="10修改权限-chmod"><a href="#10修改权限-chmod" class="headerlink" title="10修改权限-chmod"></a>10修改权限-chmod</h3><p>10.10.1基本说明：</p><p>通过chmod指令，可以修改文件或者目录的权限</p><p>10.10.2第一种方式：+、-、=变更权限</p><p>u:所有者g:所有组o:其他人a:所有人(u、g、o的总和)</p><p>1)chmod u=rwx,g=rx,o=x文件目录名</p><p>2)chmod o+w 文件目录名</p><p>3)chmod a-x 文件目录名</p><p>•案例演示</p><p>1)给abc文件的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## chmod u=rwx,g=x,o=rx abc</span><br><span class="line">[root@hapdoop1 ~]## ls -l</span><br><span class="line">总用量 136</span><br><span class="line">drwx--xr-x. 2 root root    4096 9月  16 02:34 abc</span><br></pre></td></tr></table></figure><p>2)给abc文件的所有用户添加读的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## chmod a+r abc</span><br></pre></td></tr></table></figure><p>10.10.3第二种方式：通过数字变更权限</p><p><strong>规则：r=4 w=2 x=1 ,rwx=4+2+1=7</strong></p><p>chmod u=rwx, g=rx, o=x文件目录名</p><p>相当于 chmod 751 文件目录名</p><p>•案例演示</p><p>要求：将/home/abc.txt文件的权限修改成rwxr-xr-x,使用给数字的方式实现：rwx=4+2+1=7</p><p>r-x=4+1=5</p><p>r-x=4+1=5</p><p>指令：chmod 755 /home/abc.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 /home/ubuntu/static</span><br></pre></td></tr></table></figure><h3 id="10-11修改文件所有者-chown"><a href="#10-11修改文件所有者-chown" class="headerlink" title="10.11修改文件所有者-chown"></a>10.11修改文件所有者-chown</h3><p>(chmod - <strong>change</strong> file <strong>mode</strong> bits)</p><p>10.11.1基本介绍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown newowner file 改变文件的所有者</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown  [-R]  newowner:newgroupfile  改变用户的所有者和所有组 [-R] 如果是目录则使其下所有子文件或目录递归生效</span><br></pre></td></tr></table></figure><p>10.11.2案例演示：</p><p>1)请将/home/abc.txt文件的所有者修改成tom</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## chown fox abc.txt</span><br></pre></td></tr></table></figure><p>2)请将/home/kkk目录下所有的文件和目录的所有者都修改成tom</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## chown -R tom kkk/</span><br></pre></td></tr></table></figure><h3 id="10-13最佳实践-警察和土匪游戏"><a href="#10-13最佳实践-警察和土匪游戏" class="headerlink" title="10.13最佳实践-警察和土匪游戏"></a>10.13最佳实践-警察和土匪游戏</h3><p>police，bandit</p><p>jack,jerry:警察</p><p>xh,xq:土匪</p><p>(1)创建组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## groupadd police</span><br><span class="line">[root@hapdoop1 ~]## groupadd bandit</span><br></pre></td></tr></table></figure><p>(2)创建用户</p><h2 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h2><p>11.1原理示意图</p><p><img src="Linux/1566443136248.png" alt="1566443136248"></p><p><img src="Linux/1566443160749.png" alt="1566443160749"></p><p>crontab进行定时任务的设置。</p><p>1.2概述</p><p>任务调度：是指系统在某个时间执行的特定的命令或程序。</p><p>任务调度分类：</p><p>1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等</p><p>2.个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份。</p><p>11.3基本语法</p><p>crontab [选项]</p><p>11.3.1常用选项</p><p><img src="Linux/1566443233289.png" alt="1566443233289"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>11.4.1任务的要求</p><p>设置任务调度文件：/etc/crontab</p><p>设置个人任务调度。执行crontab–e命令。</p><p>接着输入任务到调度文件如：<em>/1ls–l/etc/&gt;/tmp/to.txt意思说每小时的每分钟执行ls–l/etc/&gt;/tmp/to.txt命令</em></p><p><em>11.4.2步骤如下</em></p><p>1)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## crontab -e</span><br></pre></td></tr></table></figure><p>2) <em>/1 </em> <em> </em> * ls -l /etc &gt;&gt; /tmp/to.txt</p><p>3)当保存退出后就程序。</p><p>4)在每一分钟都会自动的调用</p><p>ls -l /etc &gt;&gt; /tmp/to.txt</p><p>11.4.3参数细节说明</p><p><img src="Linux/1566443808504.png" alt="1566443808504"></p><p><img src="Linux/1566443825065.png" alt="1566443825065"></p><p><img src="Linux/1566443838977.png" alt="1566443838977"></p><p>11.5.1</p><p>案例1：每隔1分钟，就将当前的日期信息，追加到/tmp/mydate文件中</p><p>1)先编写一个文件/home/mytask1.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &gt;&gt; /tmp/mydate</span><br></pre></td></tr></table></figure><p>2)给mytask1.sh一个可以执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## chmod 774 mytask1.sh </span><br></pre></td></tr></table></figure><p>3)crontab-e</p><p>4)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * /home/mytask1.sh</span><br></pre></td></tr></table></figure><p>11.5.2</p><p>案例2：每隔1分钟，将当前日期和日历都追加到/home/mycal文件中</p><p>1)先编写一个文件/home/mytask2.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date &gt;&gt; /tmp/mycal</span><br><span class="line">cal &gt;&gt; /tmp/mycal</span><br></pre></td></tr></table></figure><p>2)给mytask2.sh一个可以执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## chmod 774 mytask2.sh </span><br></pre></td></tr></table></figure><p>3)crontab -e</p><p>4)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * /home/mytask2.sh</span><br></pre></td></tr></table></figure><p>11.5.3</p><p>案例3:每天凌晨2:00将mysql数据库testdb，备份到文件中mydb.bak。</p><p>1)先编写一个文件/home/mytask2.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqldump -u root-proot testdb&gt;/tmp/mydb.bak</span><br></pre></td></tr></table></figure><p>2)给mytask3.sh一个可以执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## chmod 774 mytask2.sh </span><br></pre></td></tr></table></figure><p>3)crontab -e</p><p>4)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 * * */home/mytask3.sh</span><br></pre></td></tr></table></figure><p>11.6crond相关指令:</p><p>1)conrtab–r：终止任务调度。</p><p>2)crontab–l：列出当前有那些任务调度</p><p>3)service crond restart [重启任务调度]</p><h2 id="Linux磁盘分区、挂载"><a href="#Linux磁盘分区、挂载" class="headerlink" title="Linux磁盘分区、挂载"></a>Linux磁盘分区、挂载</h2><h3 id="分区基础知识"><a href="#分区基础知识" class="headerlink" title="分区基础知识"></a>分区基础知识</h3><p>12.1.1分区的方式：</p><p>1)mbr分区:</p><p>1.最多支持四个主分区</p><p>2.系统只能安装在主分区</p><p>3.扩展分区要占一个主分区4.MBR最大只支持2TB，但拥有最好的兼容性</p><p>2)gpt分区:</p><p>1.支持无限多个主分区（但操作系统可能限制，比如windows下最多128个分区）</p><p>2.最大支持18EB的大容量（1EB=1024PB，1PB=1024TB）3.windows764位以后支持gpt</p><p>12.1.2windows下的磁盘分区</p><p><img src="Linux/1566455383816.png" alt="1566455383816"></p><h3 id="12-2Linux分区"><a href="#12-2Linux分区" class="headerlink" title="12.2Linux分区"></a>12.2Linux分区</h3><p>12.2.1原理介绍</p><p>1)Linux来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构,Linux中每个分区都是用来组成整个文件系统的一部分。</p><p>2)Linux采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</p><p>3)示意图</p><p><img src="Linux/1566455612778.png" alt="1566455612778"></p><p>12.2.2硬盘说明</p><p>1)Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</p><p>2)对于IDE硬盘，驱动器标识符为“hdx~”,其中“hd”表明分区所在设备的类型，这里是指IDE硬盘了。“x”为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘）,“~”代表分区，前四个分区用数字1到4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。例，hda3表示为第一个IDE硬盘上的第三个主分区或扩展分区,hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。</p><p>3)对于SCSI硬盘则标识为“sdx~”，SCSI硬盘是用“sd”来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样</p><p>12.2.3使用lsblk指令查看当前系统的分区情况</p><p><img src="Linux/1566455656227.png" alt="1566455656227"></p><p><img src="Linux/1566455673574.png" alt="1566455673574"></p><h3 id="12-5磁盘情况查询"><a href="#12-5磁盘情况查询" class="headerlink" title="12.5磁盘情况查询"></a>12.5磁盘情况查询</h3><p>12.5.1查询系统整体磁盘使用情况</p><p>基本语法</p><p>df -h</p><p>应用实例</p><p>查询系统整体磁盘使用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## df -lh</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sda3        18G  4.2G   13G  26% /</span><br><span class="line">tmpfs          1003M   80K 1003M   1% /dev/shm</span><br><span class="line">/dev/sda1       190M   39M  142M  22% /boot</span><br><span class="line">/dev/sr0        3.7G  3.7G     0 100% /media/CentOS_6.8_Final</span><br></pre></td></tr></table></figure><p>12.5.2查询指定目录的磁盘占用情况</p><p>•基本语法</p><p>du -h/目录查询指定目录的磁盘占用情况，默认为当前目录</p><p>-s指定目录占用大小汇总</p><p>-h带计量单位</p><p>-a含文件</p><p>—max-depth=1子目录深度</p><p>-c列出明细的同时，增加汇总值</p><p>•应用实例查询/opt目录的磁盘占用情况，深度为1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## du -ach --max-depth=1 /opt</span><br><span class="line">4.0K/opt/Hello.java</span><br><span class="line">64K/opt/tmp</span><br><span class="line">147M/opt/jdk-7u79-linux-x64.gz</span><br><span class="line">35M/opt/mysql-5.6.14.tar.gz</span><br><span class="line">8.6M/opt/apache-tomcat-7.0.70.tar.gz</span><br><span class="line">298M/opt/jdk1.7.0_79</span><br><span class="line">4.0K/opt/rh</span><br><span class="line">4.0K/opt/Hello.class</span><br><span class="line">0/opt/ok2.txt</span><br><span class="line">28M/opt/金庸-射雕英雄传txt精校版.txt</span><br><span class="line">69M/opt/VMwareTools-10.0.5-3228253.tar.gz</span><br><span class="line">15M/opt/apache-tomcat-7.0.70</span><br><span class="line">214M/opt/vmware-tools-distrib</span><br><span class="line">0/opt/ok1.txt</span><br><span class="line">274M/opt/eclipse-jee-mars-2-linux-gtk-x86_64.tar.gz</span><br><span class="line">1.1G/opt</span><br><span class="line">1.1G总用量</span><br></pre></td></tr></table></figure><h3 id="12-6磁盘情况-工作实用指令"><a href="#12-6磁盘情况-工作实用指令" class="headerlink" title="12.6磁盘情况-工作实用指令"></a>12.6磁盘情况-工作实用指令</h3><p>1)统计/home文件夹下文件的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## ll /home | grep &quot;^-&quot; | wc -l</span><br><span class="line">11</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2)统计/home文件夹下目录的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## ll /home | grep &quot;^d&quot; | wc -l</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>3)统计/home文件夹下文件的个数，包括子文件夹里的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## ls -lR /home | grep &quot;^-&quot; | wc -l</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p>4)统计文件夹下目录的个数，包括子文件夹里的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## ls -lR /home | grep &quot;^d&quot; | wc -l</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>5)以树状显示目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## yum install tree</span><br><span class="line">[root@hapdoop1 home]## tree</span><br><span class="line">.</span><br><span class="line">├── a.tar.gz</span><br><span class="line">├── a.txt</span><br><span class="line">├── c.txt</span><br><span class="line">├── fox</span><br><span class="line">├── hello.txt</span><br><span class="line">├── mydate.txt</span><br><span class="line">├── mydate.txt~</span><br><span class="line">├── mypackge.zip</span><br><span class="line">├── mytask1.sh</span><br><span class="line">├── mytask2.sh</span><br><span class="line">├── ok1.txt</span><br><span class="line">├── ok2.txt</span><br><span class="line">├── tom</span><br><span class="line">└── xm</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>13.1Linux网络配置</p><p>原理图(含虚拟机)</p><p>目前我们的网络配置采用的是NAT。</p><p><img src="Linux/1566461905906.png" alt="1566461905906"></p><h4 id="2查看网络IP和网关"><a href="#2查看网络IP和网关" class="headerlink" title="2查看网络IP和网关"></a>2查看网络IP和网关</h4><p>13.2.1查看虚拟网络编辑器</p><p><img src="Linux/1566461935674.png" alt="1566461935674"></p><p>13.2.2修改ip地址(修改虚拟网络的ip)</p><p><img src="Linux/1566461976494.png" alt="1566461976494"></p><p>3.2.3查看网关</p><p><img src="Linux/1566462004597.png" alt="1566462004597"></p><p>13.2.4查看windows环境的中VMnet8网络配置(ipconfig指令)</p><p>1)使用ipconfig查看</p><p>2)界面查看</p><p><img src="Linux/1566462037006.png" alt="1566462037006"></p><p>13.3ping测试主机之间网络连通</p><p>13.3.1基本语法ping目的主机（功能描述：测试当前服务器是否可以连接目的主机）</p><p>13.3.2应用实例测试当前服务器是否可以连接百度</p><p>[root@hadoop100桌面]#pingwww.baidu.com</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 home]## vim /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br></pre></td></tr></table></figure><h4 id="4linux网络环境配置"><a href="#4linux网络环境配置" class="headerlink" title="4linux网络环境配置"></a>4linux网络环境配置</h4><p>13.4.1第一种方法(自动获取)</p><p><img src="Linux/1566464269470.png" alt="1566464269470"></p><p>缺点:linux启动后会自动获取IP,缺点是每次自动获取的ip地址可能不一样。这个不适用于做服务器，因为我们的服务器的ip需要时固定的。</p><p><strong>13.4.2第二种方法(指定固定的ip)</strong></p><p>说明直接修改配置文件来指定IP,并可以连接到外网(程序员推荐)，编辑vi/etc/sysconfig/network-scripts/ifcfg-eth0</p><p>要求：将ip地址配置的静态的，ip地址为192.168.184.130</p><p><img src="Linux/1566464329056.png" alt="1566464329056"></p><p>修改后，一定要重启服务</p><p>1)service network restart</p><p>2)reboot重启系统 不推荐</p><p><img src="Linux/1566464369323.png" alt="1566464369323"></p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="14-1进程的基本介绍"><a href="#14-1进程的基本介绍" class="headerlink" title="14.1进程的基本介绍"></a>14.1进程的基本介绍</h3><p>1)在LINUX中，每个执行的程序（代码）都称为一个进程。每一个进程都分配一个ID号。</p><p>2)每一个进程，都会对应一个父进程，而这个父进程可以复制多个子进程。例如www服务器。</p><p>3)每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。</p><p>4)一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。</p><h3 id="2显示系统执行的进程ps"><a href="#2显示系统执行的进程ps" class="headerlink" title="2显示系统执行的进程ps"></a>2显示系统执行的进程ps</h3><p>14.2.1说明：</p><p>查看进行使用的指令是ps,一般来说使用的参数是ps -aux</p><p>ps显示的信息选项</p><div class="table-container"><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>PID</td><td>进程识别号</td></tr><tr><td>TTY</td><td>终端机号</td></tr><tr><td>TIME</td><td>此进程所消CPU时间</td></tr><tr><td>CMD</td><td>正在执行的命令或进程名</td></tr></tbody></table></div><p><img src="Linux/1566464975777.png" alt="1566464975777"></p><h4 id="14-2-2ps指令详解"><a href="#14-2-2ps指令详解" class="headerlink" title="14.2.2ps指令详解"></a>14.2.2ps指令详解</h4><p>1)指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep xxx</span><br></pre></td></tr></table></figure><p>，比如我看看有没有sshd服务</p><p>2)指令说明</p><p>•SystemV展示风格•USER：用户名称</p><p>•PID：进程号•%CPU：进程占用CPU的百分比</p><p>•%MEM：进程占用物理内存的百分比</p><p>•VSZ：进程占用的虚拟内存大小（单位：KB）</p><p>•RSS：进程占用的物理内存大小（单位：KB）</p><p>•TT：终端名称,缩写</p><p>.•STAT：进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等</p><p>•STARTED：进程的启动时间</p><p>•TIME：CPU时间，即进程使用CPU的总时间•COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</p><p>14.2.3应用实例</p><p>要求：以全格式显示当前所有的进程，查看进程的父进程。</p><p><img src="Linux/1566465056050.png" alt="1566465056050"></p><p><strong>ps -ef</strong>是以全格式显示当前所有的进程</p><p> -e显示所有进程(every)。</p><p> -f全格式(Do <strong>full-format</strong> listing)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep xxx</span><br></pre></td></tr></table></figure><p>•是BSD风格</p><p>•UID：用户ID</p><p>•PID：进程ID</p><p>•PPID：父进程ID</p><p>•C：CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高•STIME：进程启动的时间</p><p>•TTY：完整的终端名称</p><p>•TIME：CPU时间</p><p>•CMD：启动进程所用的命令和参数</p><p>思考题，如果我们希望查看sshd进程的父进程号是多少，应该怎样查询？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## ps -ef | grep sshd</span><br><span class="line">root      14263      1  0 (ppid) 05:34 ?        00:00:00 /usr/sbin/sshd</span><br><span class="line">root      16269  14263  0 06:07 ?        00:00:00 sshd: root@pts/1 </span><br><span class="line">root      16321  16273  0 06:19 pts/1    00:00:00 grep sshd</span><br></pre></td></tr></table></figure><h3 id="3终止进程kill和killall"><a href="#3终止进程kill和killall" class="headerlink" title="3终止进程kill和killall"></a>3终止进程kill和killall</h3><p>14.3.1介绍:</p><p>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用kill命令来完成此项任务。</p><p>14.3.2基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill [选项] 进程号</span><br></pre></td></tr></table></figure><p>（功能描述：通过进程号杀死进程）</p><p>killall进程名称（功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</p><p>14.3.3常用选项：</p><p>-9:表示强迫进程立即停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9中，9代表的就是9号信号，带有强制执行的意思，它告诉进程：“无论你现在在做什么，立刻停止”。.</span><br></pre></td></tr></table></figure><p>14.3.4最佳实践：</p><p>案例1：踢掉某个非法登录用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## ps -aux | grep sshd</span><br><span class="line">Warning: bad syntax, perhaps a bogus &#x27;-&#x27;? See /usr/share/doc/procps-3.2.8/FAQ</span><br><span class="line">root      14263  0.0  0.0  66236  1200 ?        Ss   05:34   0:00 /usr/sbin/sshd</span><br><span class="line">root      16269  0.0  0.2 102084  4156 ?        Ss   06:07   0:00 sshd: root@pts/1 </span><br><span class="line">root      16357  0.4  0.1 102084  4040 ?        Ss   06:28   0:00 sshd: fox [priv] </span><br><span class="line">fox       16361  0.1  0.0 102084  1904 ?        S    06:28   0:00 sshd: fox@pts/2  </span><br><span class="line">root      16387  0.0  0.0 103332   860 pts/1    S+   06:29   0:00 grep sshd</span><br><span class="line">[root@hapdoop1 ~]## kill 16361</span><br></pre></td></tr></table></figure><p>案例2:终止远程登录服务sshd,在适当时候再次重启sshd服</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## ps -aux | grep sshd</span><br><span class="line">Warning: bad syntax, perhaps a bogus &#x27;-&#x27;? See /usr/share/doc/procps-3.2.8/FAQ</span><br><span class="line">root      14263  0.0  0.0  66236  1200 ?        Ss   05:34   0:00 /usr/sbin/sshd</span><br><span class="line">root      16269  0.0  0.2 102084  4156 ?        Ss   06:07   0:00 sshd: root@pts/1 </span><br><span class="line">root      16357  0.4  0.1 102084  4040 ?        Ss   06:28   0:00 sshd: fox [priv] </span><br><span class="line">fox       16361  0.1  0.0 102084  1904 ?        S    06:28   0:00 sshd: fox@pts/2  </span><br><span class="line">root      16387  0.0  0.0 103332   860 pts/1    S+   06:29   0:00 grep sshd</span><br><span class="line">[root@hapdoop1 ~]## kill 14263</span><br></pre></td></tr></table></figure><p>案例3:终止多个gedit编辑器【killall,通过进程名称来终止进程】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 桌面]## killall gedit</span><br></pre></td></tr></table></figure><p>案例4：强制杀掉一个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 桌面]## ps -aux |grep bash</span><br><span class="line">Warning: bad syntax, perhaps a bogus &#x27;-&#x27;? See /usr/share/doc/procps-3.2.8/FAQ</span><br><span class="line">root      15158  0.0  0.0 108348  1840 pts/0    Ss   05:37   0:00 /bin/bash</span><br><span class="line">root      16273  0.0  0.0 108348  1820 pts/1    Ss+  06:07   0:00 -bash</span><br><span class="line">root      16398  0.0  0.0 108428  1828 pts/2    Ss+  06:33   0:00 /bin/bash</span><br><span class="line">root      16411  0.0  0.0 108348  1788 pts/3    Ss   06:33   0:00 /bin/bash</span><br><span class="line">root      16438  0.0  0.0 103328   856 pts/3    S+   06:37   0:00 grep bash</span><br><span class="line">[root@hapdoop1 桌面]## kill -9 16398</span><br></pre></td></tr></table></figure><h3 id="14-4查看进程树pstree"><a href="#14-4查看进程树pstree" class="headerlink" title="14.4查看进程树pstree"></a>14.4查看进程树pstree</h3><p>14.4.1基本语法：</p><p>pstree [选项] ,可以更加直观的来看进程信息</p><p>14.4.2常用选项：</p><p>-p:显示进程的PID</p><p>-u:显示进程的所属用户</p><p>14.4.3应用实例：</p><p>案例1：请你树状的形式显示进程的pid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## pstree -p</span><br><span class="line">init(1)─┬─ManagementAgent(13688)─┬─&#123;ManagementAgen&#125;(13706)</span><br><span class="line">        │                        └─&#123;ManagementAgen&#125;(13707)</span><br><span class="line">        ├─NetworkManager(14070)─┬─dhclient(16203)</span><br><span class="line">        │                       └─&#123;NetworkManager&#125;(14099)</span><br><span class="line">        ├─VGAuthService(13576)</span><br><span class="line">        ├─abrtd(14468)</span><br><span class="line">        ├─acpid(14133)</span><br><span class="line">        ├─atd(14495)</span><br></pre></td></tr></table></figure><h3 id="5服务-systemctl-管理"><a href="#5服务-systemctl-管理" class="headerlink" title="5服务(systemctl)管理"></a>5服务(systemctl)管理</h3><p><strong>在CentOS7.0后不再使用service,而是systemctl</strong></p><p>4.5.1介绍:</p><p>服务(service)本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysql,sshd防火墙等)，因此我们又称为守护进程，是Linux中非常重要的知识点。</p><p>【原理图】</p><p><img src="Linux/1566482705612.png" alt="1566482705612"></p><h4 id="2systemctl管理指令："><a href="#2systemctl管理指令：" class="headerlink" title="2systemctl管理指令："></a>2systemctl管理指令：</h4><div class="table-container"><table><thead><tr><th>systemctl命令</th><th>说明</th></tr></thead><tbody><tr><td>systemctl start [unit type]</td><td>启动服务</td></tr><tr><td>systemctl stop [unit type]</td><td>停止服务</td></tr><tr><td>systemctl restart [unit type]</td><td>重启服务</td></tr><tr><td>systemctl enable nginx.service</td><td>在开机时启用一个服务</td></tr><tr><td>systemctl disable nginx.service</td><td>在开机时禁用一个服务</td></tr></tbody></table></div><p>显示一个服务的状态：<code>systemctl status postfix.service</code></p><p>查看服务是否开机启动：<code>systemctl is-enabled nginx.service</code><br>查看已启动的服务列表：<code>systemctl list-unit-files|grep enabled</code></p><p>查看启动失败的服务列表：<code>systemctl --failed</code></p><p>14.5.3使用案例：</p><p><strong>启动docker服务</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>centos7后关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>设置开机关闭防火墙服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl disable firewalld</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br></pre></td></tr></table></figure><p>1)查看当前防火墙的状况，关闭防火墙和重启防火墙。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## service iptables status</span><br><span class="line">表格：filter</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED </span><br><span class="line">2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22 </span><br><span class="line">5    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:8080 </span><br><span class="line">6    REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## service iptables stop</span><br><span class="line">iptables：将链设置为政策 ACCEPT：filter                    [确定]</span><br><span class="line">iptables：清除防火墙规则：                                 [确定]</span><br><span class="line">iptables：正在卸载模块：                                   [确定]</span><br><span class="line">[root@hapdoop1 ~]## service iptables status</span><br><span class="line">iptables：未运行防火墙。</span><br><span class="line">[root@hapdoop1 ~]## service iptables start</span><br><span class="line">iptables：应用防火墙规则：                                 [确定]</span><br><span class="line">[root@hapdoop1 ~]## service iptables status</span><br><span class="line">表格：filter</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br></pre></td></tr></table></figure><p>centos</p><p><strong>service iptables status 报错</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Redirecting to /bin/systemctl status iptables.service</span><br><span class="line">Unit iptables.service could not be found.</span><br></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure><p>14.5.4细节讨论：</p><p>1)关闭或者启用防火墙后，立即生效。[telnet测试某个端口即可]windows</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\11623&gt;<span class="title">Telnet</span> 192.168.163.129 22</span></span><br></pre></td></tr></table></figure><p>2)这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。如果希望设置某个服务自启动或关闭永久生效，要使用chkconfig指令，马上讲</p><p>14.5.5查看服务名:</p><p>方式1：使用setup-&gt;系统服务就可以看到。</p><p><img src="Linux/1566483352808.png" alt="1566483352808"></p><p>方式2:/etc/init.d/服务名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@hapdoop1 ~]##  ll /etc/init.d/</span><br><span class="line">总用量 376</span><br><span class="line">-rwxr-xr-x. 1 root root  1288 5月  12 2016 abrt-ccpp</span><br><span class="line">-rwxr-xr-x. 1 root root  1628 5月  12 2016 abrtd</span><br><span class="line">-rwxr-xr-x. 1 root root  1642 5月  12 2016 abrt-oops</span><br><span class="line">-rwxr-xr-x. 1 root root  1818 2月  17 2016 acpid</span><br></pre></td></tr></table></figure><p>14.5.6服务的运行级别(runlevel):</p><p>查看或者修改默认级别：vi/etc/inittab</p><p>Linux系统有7种运行级别(runlevel)：常用的是级别3和5</p><p>•运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p><p>•运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</p><p>•运行级别2：多用户状态(没有NFS)，不支持网络</p><p>•运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</p><p>•运行级别4：系统未使用，保留</p><p>•运行级别5：X11控制台，登陆后进入图形GUI模式</p><p>•运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><p>14.5.7开机的流程说明</p><p><img src="Linux/1566484075622.png" alt="1566484075622"></p><p>14.5.8chkconfig指令</p><p>介绍</p><p>通过chkconfig命令可以给每个服务的各个运行级别设置自启动/关闭</p><p>基本语法</p><p>1)查看服务chkconfig —list| grep xxx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## chkconfig --list </span><br><span class="line">NetworkManager 0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br><span class="line">abrt-ccpp      0:关闭1:关闭2:关闭3:启用4:关闭5:启用6:关闭</span><br><span class="line">abrtd          0:关闭1:关闭2:关闭3:启用4:关闭5:启用6:关闭</span><br><span class="line">....</span><br><span class="line">[root@hapdoop1 ~]## chkconfig --list | grep ssh</span><br><span class="line">sshd           0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br></pre></td></tr></table></figure><p>2)chkconfig 服务名 —list</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## chkconfig iptables --list</span><br><span class="line">iptables       0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br></pre></td></tr></table></figure><p>3)chkconfig —level 5 服务名 on/off</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## chkconfig --list | grep ssh</span><br><span class="line">sshd           0:关闭1:关闭2:启用3:启用4:启用5:启用6:关闭</span><br><span class="line">[root@hapdoop1 ~]## chkconfig --level 5 sshd off</span><br><span class="line">[root@hapdoop1 ~]## chkconfig sshd --list</span><br><span class="line">sshd           0:关闭1:关闭2:启用3:启用4:启用5:关闭6:关闭</span><br></pre></td></tr></table></figure><p>14.5.9应用实例：</p><p>1)案例1：请显示当前系统所有服务的各个运行级别的运行状态bash&gt;chkconfig—list</p><p>2)案例2：请查看sshd服务的运行状态bash&gt;servicesshdstatus</p><p>3)案例3：将sshd服务在运行级别5下设置为不自动启动，看看有什么效果？bash&gt;chkconfig—level5sshdoff</p><p>4)案例4：当运行级别为5时，关闭防火墙。bash&gt;chkconfig—level5iptablesoff</p><p>5)案例5：在所有运行级别下，关闭防火墙bash&gt;chkconfigiptablesoff</p><p>6)案例6：在所有运行级别下，开启防火墙bash&gt;chkconfigiptableson</p><p>14.5.10•使用细节</p><p>1)chkconfig重新设置服务后自启动或关闭，需要重启机器reboot才能生效.</p><h3 id="14-6动态监控进程"><a href="#14-6动态监控进程" class="headerlink" title="14.6动态监控进程"></a>14.6动态监控进程</h3><p>14.6.1介绍：</p><p>top与ps命令很相似。它们都用来显示正在执行的进程。Top与ps最大的不同之处，在于top在执行一段时间可以更新正在运行的的进程。</p><p>14.6.2基本语法：</p><p>top [选项]</p><p>14.6.3 选项说明：</p><p><img src="Linux/1566485165661.png" alt="1566485165661"></p><p>14.6.4应用实例：</p><p>案例1.监视特定用户top：输入此命令，按回车键，查看执行的进程。</p><p>u：然后输入“u”回车，再输入用户名，即可</p><p><img src="Linux/1566485234799.png" alt="1566485234799"></p><p>案例2：终止指定的进程。</p><p>top：输入此命令，按回车键，查看执行的进程。</p><p>k：然后输入“k”回车，再输入要结束的进程ID号</p><p><img src="Linux/1566485265213.png" alt="1566485265213"></p><p>案例3:指定系统状态更新的时间(每隔10秒自动更新，默认是3秒)：</p><p>bash&gt;top -d 10</p><p>14.6.5查看系统网络情况netstat(重要)</p><p>•基本语法</p><p>netstat[选项]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp</span><br></pre></td></tr></table></figure><p>•选项说明</p><p>-an按一定顺序排列输出</p><p>-p显示哪个进程在调用</p><p>•应用案例</p><p>查看系统所有的网络服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## netstat -anp | more</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program na</span><br><span class="line">me   </span><br><span class="line">tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      14263/sshd    </span><br></pre></td></tr></table></figure><p>请查看服务名为sshd的服务的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 ~]## netstat  -anp |grep sshd </span><br><span class="line">tcp        0      0 0.0.0.0:22                  0.0.0.0:*                   LISTEN      14263/sshd          </span><br><span class="line">tcp        0      0 127.0.0.1:6010              0.0.0.0:*                   LISTEN      16552/sshd          </span><br><span class="line">tcp        0      0 192.168.163.129:22          192.168.163.1:61806         ESTABLISHED 16552/sshd          </span><br><span class="line">tcp        0      0 :::22                       :::*                        LISTEN      14263/sshd          </span><br><span class="line">tcp        0      0 ::1:6010                    :::*                        LISTEN      16552/sshd          </span><br><span class="line">unix  2      [ ]         DGRAM                    48552  16552/sshd  </span><br></pre></td></tr></table></figure><h1 id="JavaEE篇搭建"><a href="#JavaEE篇搭建" class="headerlink" title="JavaEE篇搭建"></a>JavaEE篇搭建</h1><p>JavaEE环境</p><p>16.1概述16.1.1示意图：</p><p><img src="Linux/1565878374722.png" alt="1565878374722"></p><h2 id="16-2安装JDK"><a href="#16-2安装JDK" class="headerlink" title="16.2安装JDK"></a>16.2安装JDK</h2><p>16.2.1看老师演示，一会整理笔记：</p><p>16.2.2安装步骤</p><p>0)先将软件通过xftp5上传到/opt下</p><p>1)解压缩到/opt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:~$ sudo tar -zxvf jdk-8u221-linux-x64.tar.gz -C /opt/jvm</span><br></pre></td></tr></table></figure><p>2)配置环境变量的配置文件vim/etc/profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unset i</span><br><span class="line">unset -f pathmunge</span><br><span class="line"></span><br><span class="line">JAVA_HOME=/opt/jdk1.7.0_79</span><br><span class="line">PATH=/opt/jdk1.7.0_79/bin:$PATH</span><br><span class="line">export JAVA_HOME PATH</span><br></pre></td></tr></table></figure><p>3)需要注销用户，环境变量才能生效。如果是在3运行级别，logout如果是在5运行级别，</p><p>4)在任何目录下就可以使用java和javac</p><p>16.2.3测试是否安装成功</p><p>编写一个简单的Hello.java输出”hello,world!”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 opt]# vim Hello.java</span><br><span class="line">[root@hapdoop1 opt]# javac Hello.java </span><br><span class="line">[root@hapdoop1 opt]# java Hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h2 id="16-3安装tomcat"><a href="#16-3安装tomcat" class="headerlink" title="16.3安装tomcat"></a>16.3安装tomcat</h2><p>16.3.1步骤:</p><p>1)解压缩到/opt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 bin]# tar -zxvf apache-tomcat-7.0.70.tar.gz </span><br></pre></td></tr></table></figure><p>2)启动tomcat./startup.sh</p><p>先进入到tomcat的bin目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 bin]# cd apache-tomcat-7.0.70/bin/</span><br><span class="line">[root@hapdoop1 bin]# ./startup.sh </span><br></pre></td></tr></table></figure><p>使用Linux本地的浏览是可以访问到tomcat</p><p>3)开放端口8080,这样外网才能访问到tomcat</p><p>vim /etc/sysconfig/iptables</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@hapdoop1 bin]# service iptables restart</span><br><span class="line">iptables：将链设置为政策 ACCEPT：filter                    [确定]</span><br><span class="line">iptables：清除防火墙规则：                                 [确定]</span><br><span class="line">iptables：正在卸载模块：                                   [确定]</span><br><span class="line">iptables：应用防火墙规则：                                 [确定]</span><br><span class="line">[root@hapdoop1 bin]# service iptables status</span><br><span class="line">表格：filter</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED </span><br><span class="line">2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">3    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22 </span><br><span class="line">5    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:8080 </span><br><span class="line">6    REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br><span class="line">1    REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination         </span><br></pre></td></tr></table></figure><h2 id="16-4Eclipse的安装"><a href="#16-4Eclipse的安装" class="headerlink" title="16.4Eclipse的安装"></a>16.4Eclipse的安装</h2><p>16.4.1步骤:</p><p>1)解压缩到/opt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:~$ sudo tar -zxvf eclipse-java-2019-06-R-linux-gtk-x86_64.tar.gz -C /opt</span><br></pre></td></tr></table></figure><p>2)启动eclipse，配置jre和server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nicolas@ubuntu:/opt/sts-4.3.2.RELEASE$ sudo mkdir /opt/sts-4.3.2.RELEASE/jre</span><br><span class="line">nicolas@ubuntu:/opt/sts-4.3.2.RELEASE$ sudo ln -s /opt/jvm/jdk1.8.0_221/bin/ /opt/sts-4.3.2.RELEASE/jre/</span><br></pre></td></tr></table></figure><p>启动方法1:创建一个快捷方式</p><p>启动方式2:进入到eclipse解压后的文件夹，然后执行./eclipse即可</p><p>3)编写jsp页面,并测试成功!</p><h1 id="my"><a href="#my" class="headerlink" title="my"></a>my</h1><h2 id="Linux下rz-sz安装及使用方法"><a href="#Linux下rz-sz安装及使用方法" class="headerlink" title="Linux下rz/sz安装及使用方法"></a>Linux下rz/sz安装及使用方法</h2><p>能直接通过xshell拖拽文件到shell的当前目录</p><p>ubuntu</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install lrzsz</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h2 id="每次进入命令都要重新source-etc-profile-才能生效"><a href="#每次进入命令都要重新source-etc-profile-才能生效" class="headerlink" title="每次进入命令都要重新source /etc/profile 才能生效"></a>每次进入命令都要重新source /etc/profile 才能生效</h2><p>如java命令</p><h3 id="1、也可以放在-bashrc里面。或者在-bashrc里面加一句source-etc-profile"><a href="#1、也可以放在-bashrc里面。或者在-bashrc里面加一句source-etc-profile" class="headerlink" title="1、也可以放在~/.bashrc里面。或者在~/.bashrc里面加一句source /etc/profile"></a>1、也可以放在~/.bashrc里面。或者在~/.bashrc里面加一句source /etc/profile</h3><h3 id="2、你可以把这几条命令写在-etc-bash里面-就会自动执行了"><a href="#2、你可以把这几条命令写在-etc-bash里面-就会自动执行了" class="headerlink" title="2、你可以把这几条命令写在 /etc/bash里面   就会自动执行了"></a>2、你可以把这几条命令写在 /etc/bash里面   就会自动执行了</h3><h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><p>nohup </p><p>命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部。</p><p><strong>nohup 是 no hang up 的缩写，就是不挂断的意思。</strong></p><p>nohup命令：</p><p>如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。</p><p>在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ol><li>nohup command &gt; myout.file 2&gt;&amp;1 &amp;   </li></ol><p>在上面的例子中，0 – stdin (standard input)，1 – stdout (standard output)，2 – stderr (standard error) ；</p><p>2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到myout.file文件中。</p><p>\2. 0 22 <em> </em> * /usr/bin/python /home/pu/download_pdf/download_dfcf_pdf_to_oss.py &gt; /home/pu/download_pdf/download_dfcf_pdf_to_oss.log 2&gt;&amp;1</p><p>这是放在crontab中的定时任务，晚上22点时候怕这个任务，启动这个python的脚本，并把日志写在download_dfcf_pdf_to_oss.log文件中</p><h2 id="ubuntu查看java安装路径和设置环境变量"><a href="#ubuntu查看java安装路径和设置环境变量" class="headerlink" title="ubuntu查看java安装路径和设置环境变量"></a>ubuntu查看java安装路径和设置环境变量</h2><p>whereis java （java安装路径）</p><p>which java （java执行路径）</p><p>echo $JAVA_HOME（java环境变量）</p><p>环境变量路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH </span><br></pre></td></tr></table></figure><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>wget 是一个从网络上自动下载文件的自由工具，支持通过 HTTP、HTTPS、FTP 三个最常见的 <a href="https://baike.baidu.com/item/TCP%2FIP协议">TCP/IP协议</a> 下载，并可以使用 HTTP 代理。”wget” 这个名称来源于 “World Wide Web” 与 “get” 的结合。</p><p>所谓自动下载，是指 wget 可以在用户退出系统的之后在继续后台执行，直到下载任务完成。</p><h1 id="Centos下安装SSH、FTP服务"><a href="#Centos下安装SSH、FTP服务" class="headerlink" title="Centos下安装SSH、FTP服务"></a>Centos下安装SSH、FTP服务</h1><p><a href="https://blog.csdn.net/qq_57007794/article/details/124080886">https://blog.csdn.net/qq_57007794/article/details/124080886</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Port=22  #设置SSH的端口号是22(默认端口号为22)</span><br><span class="line"></span><br><span class="line">Protocol 2  #启用SSH版本2协议</span><br><span class="line"></span><br><span class="line">ListenAddress 192.168.0.222  #设置服务监听的地址</span><br><span class="line"></span><br><span class="line">DenyUsers   user1 user2 foo  #拒绝访问的用户(用空格隔开)</span><br><span class="line"></span><br><span class="line">AllowUsers  root osmond vivek  #允许访问的用户(用空格隔开)</span><br><span class="line"></span><br><span class="line">PermitRootLogin  no  #禁止root用户登陆</span><br><span class="line"></span><br><span class="line">PermitEmptyPasswords no  #用户登陆需要密码认证</span><br><span class="line"></span><br><span class="line">PasswordAuthentication  yes  #启用口令认证方式</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet                # 网卡类型：为以太网</span><br><span class="line">PROXY_METHOD=none            # 代理方式：关闭状态</span><br><span class="line">BROWSER_ONLY=no                # 只是浏览器：否</span><br><span class="line">BOOTPROTO=dhcp                # 网卡的引导协议：DHCP[中文名称: 动态主机配置协议]</span><br><span class="line">DEFROUTE=yes                # 默认路由：是, 不明白的可以百度关键词 `默认路由` </span><br><span class="line">IPV4_FAILURE_FATAL=no        # 是不开启IPV4致命错误检测：否</span><br><span class="line">IPV6INIT=yes                # IPV6是否自动初始化: 是[不会有任何影响, 现在还没用到IPV6]</span><br><span class="line">IPV6_AUTOCONF=yes            # IPV6是否自动配置：是[不会有任何影响, 现在还没用到IPV6]</span><br><span class="line">IPV6_DEFROUTE=yes            # IPV6是否可以为默认路由：是[不会有任何影响, 现在还没用到IPV6]</span><br><span class="line">IPV6_FAILURE_FATAL=no        # 是不开启IPV6致命错误检测：否</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy            # IPV6地址生成模型：stable-privacy [这只一种生成IPV6的策略]</span><br><span class="line">NAME=ens33                    # 网卡物理设备名称</span><br><span class="line">UUID=f47bde51-fa78-4f79-b68f-d5dd90cfc698    # 通用唯一识别码, 每一个网卡都会有, 不能重复, 否两台linux只有一台网卡可用</span><br><span class="line">DEVICE=ens33                    # 网卡设备名称, 必须和 `NAME` 值一样</span><br><span class="line">ONBOOT=no  </span><br><span class="line">IPADDR=&quot;192.168.36.5&quot; #192.168.59.x, x为3~255. </span><br><span class="line">NETMASK=&quot;255.255.255.0&quot; #子网掩码 </span><br><span class="line">GATEWAY=&quot;192.168.36.1&quot; #网关IP</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet                # 网卡类型：为以太网</span><br><span class="line">PROXY_METHOD=none            # 代理方式：关闭状态</span><br><span class="line">BROWSER_ONLY=no                # 只是浏览器：否</span><br><span class="line">BOOTPROTO=static                # 网卡的引导协议：DHCP[中文名称: 动态主机配置协议]</span><br><span class="line">DEFROUTE=yes                # 默认路由：是, 不明白的可以百度关键词 `默认路由` </span><br><span class="line">IPV4_FAILURE_FATAL=no        # 是不开启IPV4致命错误检测：否</span><br><span class="line">IPV6INIT=yes                # IPV6是否自动初始化: 是[不会有任何影响, 现在还没用到IPV6]</span><br><span class="line">IPV6_AUTOCONF=yes            # IPV6是否自动配置：是[不会有任何影响, 现在还没用到IPV6]</span><br><span class="line">IPV6_DEFROUTE=yes            # IPV6是否可以为默认路由：是[不会有任何影响, 现在还没用到IPV6]</span><br><span class="line">IPV6_FAILURE_FATAL=no        # 是不开启IPV6致命错误检测：否</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy            # IPV6地址生成模型：stable-privacy [这只一种生成IPV6的策略]</span><br><span class="line">NAME=ens33                    # 网卡物理设备名称</span><br><span class="line">UUID=f47bde51-fa78-4f79-b68f-d5dd90cfc698    # 通用唯一识别码, 每一个网卡都会有, 不能重复, 否两台linux只有一台网卡可用</span><br><span class="line">DEVICE=ens33                    # 网卡设备名称, 必须和 `NAME` 值一样</span><br><span class="line">ONBOOT=yes  </span><br><span class="line">IPADDR=&quot;192.168.36.5&quot; #192.168.59.x, x为3~255. </span><br><span class="line">NETMASK=&quot;255.255.255.0&quot; #子网掩码 </span><br><span class="line">GATEWAY=&quot;192.168.36.1&quot; #网关IP</span><br></pre></td></tr></table></figure><h2 id="SSH连接缓慢解决方法"><a href="#SSH连接缓慢解决方法" class="headerlink" title="SSH连接缓慢解决方法"></a>SSH连接缓慢解决方法</h2><p><a href="https://blog.csdn.net/tainyu/article/details/124317063">https://blog.csdn.net/tainyu/article/details/124317063</a>        </p><h1 id="systemctl-实现开机自启服务"><a href="#systemctl-实现开机自启服务" class="headerlink" title="systemctl 实现开机自启服务"></a>systemctl 实现开机自启服务</h1><p><a href="https://blog.csdn.net/qq_29663071/article/details/80814081">https://blog.csdn.net/qq_29663071/article/details/80814081</a></p>]]></content>
      
      
      <categories>
          
          <category> -操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2023/05/17/%E7%AC%AC%E4%BA%94%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/17/%E7%AC%AC%E4%BA%94%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-内置指令"><a href="#Vue-内置指令" class="headerlink" title="Vue 内置指令"></a>Vue 内置指令</h2><p>如果在Vue2项目中莫名其妙安装不上第三方库可以在最后加上 —legacy-peer-deps</p><p>例如：npm i axios -S —legacy-peer-deps</p><p>\1. v-text : 更新元素的 textContent</p><p>\2. v-html : 更新元素的 innerHTML</p><p>\3. v-if : 如果为 true, 当前标签才会输出到页面</p><p>\4. v-else: 如果为 false, 当前标签才会输出到页面</p><p>\5. v-show : 通过控制 display 样式来控制显示/隐藏</p><p>\6. v-for : 遍历数组/对象</p><p>\7. v-on : 绑定事件监听, 一般简写为@</p><p>\8. v-bind : 绑定解析表达式, 可以省略 v-bind</p><p>\9. v-model : 双向数据绑定</p><p>\10. v-cloak : 防止闪现, 与 css 配合: [v-cloak] { display: none }</p><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line"><span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"><span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步使用混入：</p><p>​    全局混入：<code>Vue.mixin(xxx)</code><br>​    局部混入：<code>mixins:[&#39;xxx&#39;]</code></p></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol><li><p>组件化编码流程：</p><p>​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>​            1).一个组件在用：放在组件自身即可。</p><p>​            2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p>​    (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>​    (1).父组件 ==&gt; 子组件 通信</p><p>​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p><pre><code>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code>xxxxxStorage.clear()</code></p><p>​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%" /></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​        多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2></li><li><p>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</p></li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>​    作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> -前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS</title>
      <link href="/2023/05/17/%E7%AC%AC%E5%85%AD%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/17/%E7%AC%AC%E5%85%AD%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h1><h2 id="NodeJS的应用"><a href="#NodeJS的应用" class="headerlink" title="NodeJS的应用"></a>NodeJS的应用</h2><ul><li>开发服务器应用</li><li>开发工具类应用</li><li>开发桌面端应用</li></ul><h2 id="命令行常用操作"><a href="#命令行常用操作" class="headerlink" title="命令行常用操作"></a>命令行常用操作</h2><div class="table-container"><table><thead><tr><th>说明</th><th style="text-align:left">操作</th></tr></thead><tbody><tr><td>切换盘符</td><td style="text-align:left">C: D：</td></tr><tr><td>切换工作目录</td><td style="text-align:left">cd</td></tr><tr><td>查看文件目录</td><td style="text-align:left">dir</td></tr><tr><td>启动Js文件(需要在当前JS的文件夹下使用)</td><td style="text-align:left">node + Js文件名（需要加后缀）</td></tr></tbody></table></div><h2 id="编码注意事项"><a href="#编码注意事项" class="headerlink" title="编码注意事项"></a>编码注意事项</h2><p>1.NodeJs中不能使用BOM和DOM的API，可以使用console和定时器API</p><p>2.NodeJS中的顶级对象为global，也可以用globalThis访问顶级对象</p><h1 id="Buffer【缓冲器】"><a href="#Buffer【缓冲器】" class="headerlink" title="Buffer【缓冲器】"></a>Buffer【缓冲器】</h1><ul><li>buffer中文译为【缓冲区】，是一个类似于Array的对象，用于表示固定长度的字节序列，换句话说，Buffer就是一段固定长度的内存空间，用于处理二进制数据</li></ul><blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><p>1.Buffer大小固定且无法调整</p><p>2.Buffer性能较好，可以直接对计算机内存进行操作</p><p>3.每个元素的大小为1字节（byte）</p></blockquote><h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.alloc（分配）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建一个10字节的buffer</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> buf  = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(buf);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.allocUnsafe(用这个创建的方法会有旧数据)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> buf_2 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(buf_2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.from   </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> buf_3 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//一下代码可以将数组里的数据转换成二进制</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> buf_4 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">105</span>,<span class="number">108</span>,<span class="number">111</span>,<span class="number">118</span>,<span class="number">101</span>,<span class="number">121</span>,<span class="number">111</span>,<span class="number">117</span>])</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(buf_4);</span><br></pre></td></tr></table></figure><h3 id="buffer的操作"><a href="#buffer的操作" class="headerlink" title="buffer的操作"></a>buffer的操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Buffer与字符串的转换</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> buf_4 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">105</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">117</span>])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_4.<span class="title function_">toString</span>());<span class="comment">//转换成字符串时是默认采用UTF-8的编码格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过[]的操作对元素的读取和修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里面的toString是用来进行对进制的转换</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf[<span class="number">0</span>].<span class="title function_">toString</span>(<span class="number">2</span>));<span class="comment">//01101000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"></span><br><span class="line">buf[<span class="number">0</span>] = <span class="number">95</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//溢出</span></span><br><span class="line">  <span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  buf[<span class="number">0</span>] = <span class="number">361</span>;<span class="comment">//舍弃高位的数字 361转换成二进制为 0001 0110 1001 =&gt; 0110 1001</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//中文</span></span><br><span class="line">  <span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(buf);</span><br></pre></td></tr></table></figure><h3 id="程序运行的基本流程"><a href="#程序运行的基本流程" class="headerlink" title="程序运行的基本流程"></a>程序运行的基本流程</h3><p>1.程序一般保存在硬盘中，软件安装的过程就是将程序写入硬盘的过程</p><p>2.程序在运行时会加载进入内存，然后由cpu读取并执行程序</p><h1 id="Fs模块！"><a href="#Fs模块！" class="headerlink" title="Fs模块！"></a>Fs模块！</h1><p><strong><em> fs 全称为 file system ,称之为 文件系统 ,是 Node.js 中的 内置模块 ,可以对计算机中的磁盘进行操作。</em></strong></p><h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><p><strong><em> 文件写入就是将 数据 保存到 文件 中，我们可以使用如下几个方法来实现该效果</em></strong></p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>writeFile</td><td>异步写入</td></tr><tr><td>writeFileSync</td><td>同步写入</td></tr><tr><td>appendFile / appendFileSync</td><td>追加写入</td></tr><tr><td>createWriteStream</td><td>流式写入</td></tr></tbody></table></div><h4 id="writeFile-异步写入"><a href="#writeFile-异步写入" class="headerlink" title="writeFile 异步写入"></a>writeFile <strong>异步写入</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： fs.<span class="title function_">writeFile</span>(file, data[, options], callback)</span><br></pre></td></tr></table></figure><ul><li><p><strong>参数说明 </strong></p></li><li><p><em>file 文件名</em></p></li><li><p><em>data 待写入的数据</em></p></li><li><p><em>options 选项设置 （可选）</em></p></li><li><p><em>callback 写入回调</em></p></li><li><p><em>返回值： undefined</em></p><p><strong>代码示例 </strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// //2.写入文件</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>,<span class="string">&#x27;高尚是高尚者的墓志铭，卑鄙是卑鄙者的通行证&#x27;</span>,<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//如果写入失败 err就为写入失败的错误对象。 写入成功： err的值为null</span></span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="writeFileSync-同步写入"><a href="#writeFileSync-同步写入" class="headerlink" title="writeFileSync 同步写入"></a>writeFileSync <strong>同步写入</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法: fs.<span class="title function_">writeFileSync</span>(file, data[, options])</span><br></pre></td></tr></table></figure><ul><li>参数与 fs.writeFile 大体一致，只是没有 callback 参数</li><li>返回值： undefined</li></ul><p><strong>代码示例 </strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;三人行，必有我师焉。&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Node.js 中的磁盘操作是由其他 线程 完成的，结果的处理有两种模式： </strong></p><blockquote><ul><li><p>同步处理 JavaScript 主线程 会等待 其他线程的执行结果，然后再继续执行主线程的代码，效率较低</p></li><li><p>异步处理 JavaScript 主线程 不会等待 其他线程的执行结果，直接执行后续的主线程代码，效率较好</p></li></ul></blockquote></blockquote><h4 id="appendFile-appendFileSync-追加写入"><a href="#appendFile-appendFileSync-追加写入" class="headerlink" title="appendFile / appendFileSync 追加写入"></a>appendFile / appendFileSync <strong>追加写入</strong></h4><p><strong>appendFile 作用是在文件尾部追加内容，appendFile 语法与 writeFile 语法完全相同 </strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">fs.<span class="title function_">appendFile</span>(file, data[, options], callback)</span><br><span class="line">fs.<span class="title function_">appendFileSync</span>(file, data[, options])</span><br></pre></td></tr></table></figure><ul><li>返回值： 二者都为 undefined</li></ul><p><strong>代码示例 </strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.调用appendFile</span></span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;\r\n东风吹走恋爱脑，生活磨灭英雄梦&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">appendFileSync</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;\r\n你所谓的迷茫，不过是清醒的看着自己沉沦&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="createWriteStream-流式写入"><a href="#createWriteStream-流式写入" class="headerlink" title="createWriteStream 流式写入"></a>createWriteStream <strong>流式写入</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： fs.<span class="title function_">createWriteStream</span>(path[, options])</span><br></pre></td></tr></table></figure><p><strong>参数说明 </strong></p><ul><li><em>path 文件路径</em></li><li><em>options 选项配置（ 可选 ）</em></li><li><em>返回值： Object</em></li></ul><p><strong>代码示例 </strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建写入流对象</span></span><br><span class="line"><span class="keyword">const</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./relife.txt&#x27;</span>)</span><br><span class="line"><span class="comment">//3.write</span></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;relife7\r\n&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;relife77\r\n&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;relife777\r\n&#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;relife7777\r\n&#x27;</span>)</span><br><span class="line"><span class="comment">//4.关闭通道</span></span><br><span class="line">ws.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure><p><strong>* 程序打开一个文件是需要消耗资源的，流式写入可以减少打开关闭文件的次数</strong></p><p><strong>* 流式写入方式适用于大文件写入或频繁写入的场景，writeFile适合于写入频繁较低的场景</strong></p><hr><h4 id="写入文件的场景"><a href="#写入文件的场景" class="headerlink" title="写入文件的场景"></a><strong>写入文件的场景</strong></h4><blockquote><p><strong><em> 文件写入 在计算机中是一个非常常见的操作，下面的场景都用到了文件写入</em></strong></p><ul><li><p>下载文件</p></li><li><p>安装软件</p></li><li><p>保存程序日志，如 Git</p></li><li><p>编辑器保存文件</p></li><li><p>视频录制</p></li><li><blockquote><p><strong><em> 当 需要持久化保存数据 的时候，应该想到 文件写入</em></strong></p></blockquote></li></ul></blockquote><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a><strong>文件读取</strong></h3><p><strong>文件读取顾名思义，就是通过程序从文件中取出其中的数据，我们可以使用如下几种方式 </strong></p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>readFile</td><td>异步读取</td></tr><tr><td>readFileSync</td><td>同步读取</td></tr><tr><td>createReadStream</td><td>流式读取</td></tr></tbody></table></div><h4 id="readFile-异步读取"><a href="#readFile-异步读取" class="headerlink" title="readFile 异步读取"></a>readFile <strong>异步读取</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： fs.<span class="title function_">readFile</span>(path[, options], callback)</span><br></pre></td></tr></table></figure><p><strong>参数说明 </strong></p><ul><li><em>path 文件路径</em></li><li><em>options 选项配置 (可选)</em></li><li><em>callback 回调函数</em></li><li><em>返回值：undefined</em></li></ul><p><strong>代码示例 </strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.异步读取</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./relife.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取成功\r\n&#x27;</span> + data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="readFileSync-同步读取"><a href="#readFileSync-同步读取" class="headerlink" title="readFileSync 同步读取"></a>readFileSync <strong>同步读取</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： fs.<span class="title function_">readFileSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p><strong>参数说明 </strong></p><ul><li><p><em>path 文件路径</em></p></li><li><p><em>options 选项配置</em></p></li><li><p><em>返回值：string | Buffer</em></p></li></ul><p><strong>代码示例 </strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> data2 = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="createReadStream流式读取"><a href="#createReadStream流式读取" class="headerlink" title="createReadStream流式读取"></a>createReadStream流式读取</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： fs.<span class="title function_">createReadStream</span>(path[, options])</span><br></pre></td></tr></table></figure><p><strong>参数说明 </strong></p><ul><li><em>path 参数路径</em></li><li><em>options 选项配置（可选）</em></li><li><em>返回值：Object</em></li></ul><p><strong>代码示例 </strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建读取流对象</span></span><br><span class="line"><span class="keyword">const</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;../video/PR 01.avi&#x27;</span>)</span><br><span class="line"><span class="comment">//3.绑定data事件 chunk 块</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function"><span class="params">chunk</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk.<span class="property">length</span>); <span class="comment">//65536字节 =&gt; 64KB</span></span><br><span class="line">    <span class="comment">// console.log(chunk.toString()); //会乱码</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.end 可选事件</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取完成&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="读取文件应用场景"><a href="#读取文件应用场景" class="headerlink" title="读取文件应用场景"></a><strong>读取文件应用场景</strong></h4><blockquote><p><strong><em>电脑开机</em></strong></p><p><strong><em>程序运行</em></strong></p><p><strong><em>编辑器打开文件</em></strong></p><p><strong><em>查看图片</em></strong></p><p><strong><em>播放视频</em></strong></p><p><strong><em>播放音乐</em></strong></p><p><strong><em>Git 查看日志</em></strong></p><p><strong><em>上传文件</em></strong></p><p><strong><em>查看聊天记录</em></strong></p></blockquote><h3 id="文件移动与重命名"><a href="#文件移动与重命名" class="headerlink" title="文件移动与重命名"></a><strong>文件移动与重命名</strong></h3><p><strong>在 Node.js 中，我们可以使用 rename 或 renameSync 来移动或重命名 文件或文件夹</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">fs.<span class="title function_">rename</span>(oldPath, newPath, callback)</span><br><span class="line">fs.<span class="title function_">renameSync</span>(oldPath, newPath)</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><em>oldPath 文件当前的路径</em></li><li><em>newPath 文件新的路径</em></li><li><em>callback 操作后的回调</em></li></ul><p><strong>代码示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs =<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.调用rename方法</span></span><br><span class="line"> fs.<span class="title function_">rename</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>,<span class="string">&#x27;./文案.txt&#x27;</span>,<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(err)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败~&#x27;</span>);</span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件的移动</span></span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;./data.txt&#x27;</span>,<span class="string">&#x27;../video/data.txt&#x27;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败~&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功&#x27;</span>); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a><strong>文件删除</strong></h3><p><strong>在 Node.js 中，我们可以使用 unlink 或 unlinkSync 来删除文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">fs.<span class="title function_">unlink</span>(path, callback)</span><br><span class="line">fs.<span class="title function_">unlinkSync</span>(path)</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><em>path 文件路径</em></li><li><em>callback 操作后的回调</em></li></ul><p><strong>代码示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.调用unlink方法 同步方法unlinkSync</span></span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&#x27;./relife.txt&#x27;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用rm方法  同步方法rmSync</span></span><br><span class="line">fs.<span class="title function_">rm</span>(<span class="string">&#x27;./文案.txt&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a><strong>文件夹操作</strong></h3><p><strong>借助 Node.js 的能力，我们可以对文件夹进行 创建 、 读取 、 删除 等操作</strong></p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>mkdir / mkdirSync</td><td>创建文件夹</td></tr><tr><td>readdir / readdirSync</td><td>读取文件夹</td></tr><tr><td>rmdir / rmdirSync</td><td>删除文件夹</td></tr></tbody></table></div><h4 id="mkdir-创建文件夹"><a href="#mkdir-创建文件夹" class="headerlink" title="mkdir 创建文件夹"></a>mkdir <strong>创建文件夹</strong></h4><p><strong>在 Node.js 中，我们可以使用 mkdir 或 mkdirSync 来创建文件夹</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">fs.<span class="title function_">mkdir</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">mkdirSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><em>path 文件夹路径</em></li><li><em>options 选项配置（ 可选 ）</em></li><li><em>callback 操作后的回调</em></li></ul><p><strong>示例代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//创建文件夹 mk make 制作 dir directory 文件夹</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./HTML&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-2递归创建 recursive 递归的意思</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./a/b/c&#x27;</span>,&#123;<span class="attr">recursive</span>:<span class="literal">true</span>&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="readdir-读取文件夹"><a href="#readdir-读取文件夹" class="headerlink" title="readdir 读取文件夹"></a>readdir <strong>读取文件夹</strong></h4><p><strong>在 Node.js 中，我们可以使用 readdir 或 readdirSync 来读取文件夹</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">fs.<span class="title function_">readdir</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">readdirSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><em>path 文件夹路径</em></li><li><em>options 选项配置（ 可选 ）</em></li><li><em>callback 操作后的回调</em></li></ul><p><strong>示例代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2-3 读取文件夹 异步读取</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功\r\n&#x27;</span> + data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><h4 id="rmdir-删除文件夹"><a href="#rmdir-删除文件夹" class="headerlink" title="rmdir 删除文件夹"></a>rmdir <strong>删除文件夹</strong></h4><p><strong>在 Node.js 中，我们可以使用 rmdir 或 rmdirSync 来删除文件夹</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">fs.<span class="title function_">rmdir</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">rmdirSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><em>path 文件夹路径</em></li><li><em>options 选项配置（ 可选 ）</em></li><li><em>callback 操作后的回调</em></li></ul><p><strong>示例代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2-4删除文件夹 rm remove 移除</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./HTML&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-5递归删除 不推荐使用</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./a&#x27;</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//建议使用</span></span><br><span class="line">fs.<span class="title function_">rm</span>(<span class="string">&#x27;./a&#x27;</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查看资源状态"><a href="#查看资源状态" class="headerlink" title="查看资源状态"></a><strong>查看资源状态</strong></h3><p><strong>在 Node.js 中，我们可以使用 stat 或 statSync 来查看资源的详细信息</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">fs.<span class="title function_">stat</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">statSync</span>(path[, options])</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><em>path 文件夹路径</em></li><li><em>options 选项配置（ 可选 ）</em></li><li>callback 操作后的回调</li></ul><p><strong>示例代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.stat方法 staus缩写 状态</span></span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;../video/原神.mp4&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作失败~&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="comment">//获取文件类型 isFile</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">isFile</span>());</span><br><span class="line">    <span class="comment">//isDirectory</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">isDirectory</span>());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>结果值对象结构：</em></strong></p><p><em>size 文件体积</em></p><p><em>birthtime 创建时间</em></p><p><em>mtime 最后修改时间</em></p><p><em>isFile 检测是否为文件</em></p><p><em>isDirectory 检测是否为文件夹</em></p></blockquote><h3 id="相对路径问题"><a href="#相对路径问题" class="headerlink" title="相对路径问题"></a><strong>相对路径问题</strong></h3><p><strong>fs 模块对资源进行操作时，路径的写法有两种：</strong></p><p><strong><em>相对路径</em></strong></p><p><strong>./座右铭.txt</strong> <em>当前目录下的座右铭.txt</em></p><p><strong>座右铭.txt</strong> <em>等效于上面的写法</em></p><p><strong>../座右铭.txt</strong> <em>当前目录的上一级目录中的座右铭.tx</em>t</p><p><strong>绝对路径</strong></p><p><strong>D:/Program Files</strong>  <em>windows 系统下的绝对路径</em></p><p><strong>/usr/bin</strong>   <em>Linux 系统下的绝对路径</em></p><blockquote><p><strong><em>相对路径中所谓的 当前目录 ，指的是 命令行的工作目录 ，而并非是文件的所在目录</em></strong></p><p><strong><em>所以当命令行的工作目录与文件所在目录不一致时，会出现一些 BUG</em></strong></p></blockquote><h3 id="dirname"><a href="#dirname" class="headerlink" title="__dirname"></a><strong>__dirname</strong></h3><p><strong><em>__dirname 与 require 类似，都是 Node.js 环境中的’全局’变量</em></strong></p><p><em><strong>dirname 保存着 当前文件所在目录的绝对路径 ，可以使用 </strong><strong>dirname 与文件名拼接成绝对路径</strong></em></p><p><strong>代码示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/data.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><blockquote><p><em>使用 fs 模块的时候，尽量使用 __dirname 将路径转化为绝对路径，这样可以避免相对路径产生的Bug</em></p></blockquote><h1 id="PATH模块"><a href="#PATH模块" class="headerlink" title="PATH模块"></a>PATH模块</h1><p><strong>path 模块提供了 操作路径 的功能，我们将介绍如下几个较为常用的几个 API：</strong></p><div class="table-container"><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>path.resolve</td><td>拼接规范的绝对路径 常用</td></tr><tr><td>path.sep</td><td>获取操作系统的路径分隔符</td></tr><tr><td>path.parse</td><td>解析路径并返回对象</td></tr><tr><td>path.basename</td><td>获取路径的基础名称</td></tr><tr><td>path.dirname</td><td>获取路径的目录名</td></tr><tr><td>path.extname</td><td>获得路径的扩展名</td></tr></tbody></table></div><p><strong>代码示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//导入path模块</span></span><br><span class="line"><span class="keyword">const</span> path  = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// fs.writeFileSync(__dirname + &#x27;/index.html&#x27;,&#x27;love&#x27;)</span></span><br><span class="line"><span class="comment">// console.log(__dirname + &#x27;/index.html&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//resolve 解决 第一个参数给绝对路径，第二个给相对路径</span></span><br><span class="line"><span class="comment">// console.log(path.resolve(__dirname,&#x27;./index.html&#x27;));</span></span><br><span class="line"><span class="comment">// console.log(path.resolve(__dirname,&#x27;index.html&#x27;));</span></span><br><span class="line"><span class="comment">// console.log(path.resolve(__dirname,&#x27;/index.html&#x27;,&#x27;./test&#x27;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sep分隔符</span></span><br><span class="line"><span class="comment">// console.log(path.sep); //window \ liunx /</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//parse 方法 __dirname &#x27;全局变量&#x27; //解析路径并返回对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__filename); <span class="comment">//文件的绝对路径</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;D:\WebTest\\Nodejs\\代码\\Path\\path.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">parse</span>(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">//basename 获取路径的基础名称</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">//dirname 获取路径的目录名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">//extname 获取路径的扩展名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(str));</span><br></pre></td></tr></table></figure><hr><h1 id="HTTP模块"><a href="#HTTP模块" class="headerlink" title="HTTP模块"></a>HTTP模块</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h3><p>HTTP（hypertext transport protocol）协议；中文叫<strong>超文本传输协议</strong></p><p><em>是一种基于TCP/IP的应用层通信协议</em></p><p><em>这个协议详细规定了 浏览器 和万维网 服务器 之间互相通信的规则。</em></p><p><strong><em>协议中主要规定了两个方面的内容</em></strong></p><p>客户端：用来向服务器发送数据，可以被称之为<strong>请求报文</strong></p><p>服务端：向客户端返回数据，可以被称之为<strong>响应报文</strong></p><blockquote><p><strong><em>报文：可以简单理解为就是一堆字符串</em></strong></p></blockquote><h3 id="请求报文的组成"><a href="#请求报文的组成" class="headerlink" title="请求报文的组成"></a><strong>请求报文的组成</strong></h3><ul><li><em>请求行</em></li><li><em>请求头</em></li><li><em>空行</em></li><li><em>请求体</em></li></ul><h3 id="HTTP-的请求行"><a href="#HTTP-的请求行" class="headerlink" title="HTTP 的请求行"></a><strong>HTTP</strong> <strong>的请求行</strong></h3><ul><li><p><strong>请求方法</strong>（get、post、put、delete等）</p></li><li><p><strong>请求 URL</strong>（统一资源定位器）</p></li></ul><blockquote><p>例如：<strong><a href="http://www.baidu.com:80/index.html?a=100&amp;b=200#logo">http://www.baidu.com:80/index.html?a=100&amp;b=200#logo</a></strong></p><p><em>http：</em> 协议（https、ftp、ssh等）</p><p><strong><em>www.baidu.com</em></strong> 域名</p><p><em>80</em> 端口号</p><p><em>/index.html</em> 路径</p><p><em>a=100&amp;b=200</em> 查询字符串</p><p><em>#logo</em> 哈希（锚点链接）</p></blockquote><ul><li><strong>HTTP协议版本号</strong></li></ul><h3 id="HTTP-请求头"><a href="#HTTP-请求头" class="headerlink" title="HTTP 请求头"></a><strong>HTTP</strong> <strong>请求头</strong></h3><p><em>格式：『头名：头值』</em></p><p><strong>常见的请求头有：</strong></p><div class="table-container"><table><thead><tr><th>请求头</th><th>解释</th></tr></thead><tbody><tr><td>Host</td><td>主机名</td></tr><tr><td>Connection</td><td>连接的设置 keep-alive（保持连接）；close（关闭连接）</td></tr><tr><td>Cache-Control</td><td>缓存控制 max-age = 0 （没有缓存）</td></tr><tr><td>Upgrade-Insecure-Requests</td><td>将网页中的http请求转化为https请求（很少用）老网站升级</td></tr><tr><td>User-Agent</td><td>用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自哪个客户端 ，一般在PC端和手机端的区分</td></tr><tr><td>Accept</td><td>设置浏览器接收的数据类型</td></tr><tr><td>Accept-Encoding</td><td>设置接收的压缩方式</td></tr><tr><td>Accept-Language</td><td>设置接收的语言 q=0.7 为喜好系数，满分为1</td></tr><tr><td>Cookie</td><td>用户访问网站携带的唯一标识</td></tr></tbody></table></div><h3 id="HTTP-的请求体"><a href="#HTTP-的请求体" class="headerlink" title="HTTP 的请求体"></a><strong>HTTP</strong> <strong>的请求体</strong></h3><p><em>请求体内容的格式是非常灵活的，</em></p><p>（可以是空）==&gt; GET请求，</p><p>（也可以是字符串，还可以是JSON）===&gt; POST请求</p><p><strong>例如：</strong></p><ul><li><p><em>字符串：keywords=手机&amp;price=2000</em></p></li><li><p><em>JSON：{“keywords”:”手机”,”price”:2000}</em></p></li></ul><h3 id="响应报文的组成"><a href="#响应报文的组成" class="headerlink" title="响应报文的组成"></a><strong>响应报文的组成</strong></h3><ul><li><strong><em>响应行</em></strong></li></ul><blockquote><p> <strong><em>HTTP/1.1 200 OK</em></strong></p><ul><li><p>HTTP/1.1：HTTP协议版本号</p></li><li><p>200：响应状态码 404 Not Found 500 Internal Server Error</p></li><li><p>还有一些状态码，参考：<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></strong></p></li><li><p>OK： 响应状态描述</p></li><li><blockquote><p> <strong><em>响应状态码和响应字符串关系是一一对应的。</em></strong></p></blockquote></li></ul></blockquote><ul><li><strong><em>响应头</em></strong></li></ul><blockquote><p><em>Cache-Control:缓存控制 private 私有的，只允许客户端缓存数据</em></p><p><em>Connection 链接设置</em></p><p><em>Content-Type:text/html;charset=utf-8 设置响应体的数据类型以及字符集,响应体为html，字符集:utf-8</em></p><p><em>Content-Length:响应体的长度，单位为字节</em></p></blockquote><ul><li><p><strong><em>空行</em></strong></p></li><li><p><strong><em>响应体</em></strong></p></li></ul><blockquote><p><em>响应体内容的类型是非常灵活的，常见的类型有 HTML、CSS、JS、图片、JSON</em> </p></blockquote><h3 id="创建-HTTP-服务"><a href="#创建-HTTP-服务" class="headerlink" title="创建 HTTP 服务"></a><strong>创建</strong> <strong>HTTP</strong> <strong>服务</strong></h3><p>使用 nodejs 创建 HTTP 服务</p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a><strong>操作步骤</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">//2. 创建服务对象 create 创建 server 服务</span></span><br><span class="line"><span class="comment">// request 意为请求. 是对请求报文的封装对象, 通过 request 对象可以获得请求报文的数据</span></span><br><span class="line"><span class="comment">// response 意为响应. 是对响应报文的封装对象, 通过 response 对象可以设置响应报文</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">response.<span class="title function_">end</span>(<span class="string">&#x27;Hello HTTP server&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//3. 监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动, 端口 9000 监听中...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>http.createServer 里的回调函数的执行时机： 当接收到 HTTP 请求的时候，就会执行</em></strong></p></blockquote><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h4><p>浏览器请求对应端口</p><blockquote><p><a href="http://127.0.0.1:9000">http://127.0.0.1:9000</a></p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><ol><li><p>命令行 ctrl + c 停止服务</p></li><li><p>当服务启动后，更新代码 必须重启服务才能生效</p></li><li><p>响应内容中文乱码的解决办法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>端口号被占用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Error</span>: listen <span class="attr">EADDRINUSE</span>: address already <span class="keyword">in</span> use :::<span class="number">9000</span></span><br></pre></td></tr></table></figure><blockquote><p><em>1）关闭当前正在运行监听端口的服务 （ 使用较多 ）</em></p><p><em>2）修改其他端口号</em></p></blockquote></li></ol><p>​    5.HTTP 协议默认端口是 80 。HTTPS 协议的默认端口是 443, HTTP 服务开发常用端口有 3000，8080，8090，9000 等</p><blockquote><p><strong><em>如果端口被其他程序占用，可以使用 资源监视器 找到占用端口的程序，然后使用 任务管理器 关闭对应的程序</em></strong></p></blockquote><h3 id="浏览器查看-HTTP-报文"><a href="#浏览器查看-HTTP-报文" class="headerlink" title="浏览器查看 HTTP 报文"></a><strong>浏览器查看</strong> <strong>HTTP</strong> <strong>报文</strong></h3><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230406222457916.png" alt="image-20230406222457916"></p><h4 id="查看请求行与请求头"><a href="#查看请求行与请求头" class="headerlink" title="查看请求行与请求头"></a><strong>查看请求行与请求头</strong></h4><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230406222520040.png" alt="image-20230406222520040"></p><h4 id="查看请求体"><a href="#查看请求体" class="headerlink" title="查看请求体"></a><strong>查看请求体</strong></h4><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230406222537980.png" alt="image-20230406222537980"></p><h4 id="查看-URL-查询字符串"><a href="#查看-URL-查询字符串" class="headerlink" title="查看 URL 查询字符串"></a><strong>查看</strong> <strong>URL</strong> <strong>查询字符串</strong></h4><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230406222601325.png" alt="image-20230406222601325"></p><h4 id="查看响应行与响应头"><a href="#查看响应行与响应头" class="headerlink" title="查看响应行与响应头"></a><strong>查看响应行与响应头</strong></h4><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230406222618906.png" alt="image-20230406222618906"></p><h4 id="查看响应体"><a href="#查看响应体" class="headerlink" title="查看响应体"></a><strong>查看响应体</strong></h4><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230406222632259.png" alt="image-20230406222632259"></p><h3 id="获取-HTTP-请求报文"><a href="#获取-HTTP-请求报文" class="headerlink" title="获取 HTTP 请求报文"></a><strong>获取</strong> <strong>HTTP</strong> <strong>请求报文</strong></h3><p><em>想要获取请求的数据，需要通过 request 对象</em></p><div class="table-container"><table><thead><tr><th>含义</th><th>语法</th><th>重点掌握</th></tr></thead><tbody><tr><td>请求方法</td><td>request.method</td><td>*</td></tr><tr><td>请求版本</td><td>request.httpVersion</td><td></td></tr><tr><td>请求路径</td><td>request.url</td><td>*</td></tr><tr><td>URL 路径</td><td>require(‘url’).parse(request.url).pathname</td><td>*</td></tr><tr><td>URL 查询字符串</td><td>require(‘url’).parse(request.url, true).query</td><td>*</td></tr><tr><td>请求头</td><td>request.headers</td><td>*</td></tr><tr><td>请求体</td><td>request.on(‘data’, function(chunk){})   request.on(‘end’, function(){});</td></tr></tbody></table></div><p>注意事项：</p><blockquote><ol><li><p><em>request.url 只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容</em></p></li><li><p><em>request.headers 将请求信息转化成一个对象，并将属性名都转化成了『小写』</em></p></li><li><p><em>关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为『 / 』</em></p></li><li><p><em>关于 favicon.ico：这个请求是属于浏览器自动发送的请求</em></p></li></ol></blockquote><h3 id="设置-HTTP-响应报文"><a href="#设置-HTTP-响应报文" class="headerlink" title="设置 HTTP 响应报文"></a><strong>设置</strong> <strong>HTTP</strong> <strong>响应报文</strong></h3><div class="table-container"><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>设置响应状态码</td><td>response.statusCode</td></tr><tr><td>设置响应状态描述</td><td>response.statusMessage （ 用的非常少 ）</td></tr><tr><td>设置响应头信息</td><td>response.setHeader(‘头名’, ‘头值’)</td></tr><tr><td>设置响应体</td><td>response.write(‘xx’)/response.end(‘xxx’)</td></tr></tbody></table></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">write 和 end 的两种使用情况：</span><br><span class="line"><span class="comment">//1. write 和 end 的结合使用 响应体相对分散</span></span><br><span class="line">response.<span class="title function_">write</span>(<span class="string">&#x27;xx&#x27;</span>);</span><br><span class="line">response.<span class="title function_">write</span>(<span class="string">&#x27;xx&#x27;</span>);</span><br><span class="line">response.<span class="title function_">write</span>(<span class="string">&#x27;xx&#x27;</span>);</span><br><span class="line">response.<span class="title function_">end</span>(); <span class="comment">//每一个请求，在处理的时候必须要执行 end 方法的</span></span><br><span class="line"><span class="comment">//2. 单独使用 end 方法 响应体相对集中</span></span><br><span class="line">response.<span class="title function_">end</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="网页资源的基本加载过程"><a href="#网页资源的基本加载过程" class="headerlink" title="网页资源的基本加载过程"></a><strong>网页资源的基本加载过程</strong></h3><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230407140105509.png" alt="image-20230407140105509"></p><p><em>网页资源的加载都是循序渐进的，首先获取 HTML 的内容， 然后解析 HTML 在发送其他资源的请求，如CSS，Javascript，图片等。 理解了这个内容对于后续的学习与成长有非常大的帮助</em></p><h3 id="静态资源服务"><a href="#静态资源服务" class="headerlink" title="静态资源服务"></a><strong>静态资源服务</strong></h3><p><em>静态资源是指 <strong>内容长时间不发生改变</strong>的资源 ，例如图片，视频，CSS 文件，JS文件，HTML文件，字体文件等</em></p><p><em>动态资源是指 <strong>内容经常更新</strong>的资源 ，例如百度首页，网易首页，京东搜索列表页面等</em></p><h4 id="网站根目录或静态资源目录"><a href="#网站根目录或静态资源目录" class="headerlink" title="网站根目录或静态资源目录"></a><strong>网站根目录或静态资源目录</strong></h4><p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 静态资源目录 ，也称之为 网站根目录</p><blockquote><p>思考：vscode 中使用 live-server 访问 HTML 时， 它启动的服务中网站根目录是谁？ <strong>文件所在的文件夹</strong></p></blockquote><h4 id="网页中的-URL"><a href="#网页中的-URL" class="headerlink" title="网页中的 URL"></a><strong>网页中的</strong> <strong>URL</strong></h4><p>网页中的 URL 主要分为两大类：相对路径与绝对路径</p><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a><strong>绝对路径</strong></h4><p><em>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</em></p><div class="table-container"><table><thead><tr><th>形式</th><th>特点</th></tr></thead><tbody><tr><td><strong><a href="http://atguigu.com/web">http://atguigu.com/web</a> </strong></td><td>直接向目标资源发送请求，容易理解。网站的外链会用到此形式</td></tr><tr><td>//atguigu.com/web</td><td>与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td></tr><tr><td>/web</td><td>与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站</td></tr></tbody></table></div><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a><strong>相对路径</strong></h4><p>相对路径在发送请求时，需要与当前页面 URL 路径进行 计算 ，得到完整 URL 后，再发送请求，学习阶段用的较多</p><p>例如当前网页 url 为 <strong><a href="http://www.atguigu.com/course/h5.html">http://www.atguigu.com/course/h5.html</a></strong></p><div class="table-container"><table><thead><tr><th>形式</th><th>最终的URL</th></tr></thead><tbody><tr><td>./css/app.css</td><td><strong><a href="http://www.atguigu.com/course/css/app.css">http://www.atguigu.com/course/css/app.css</a></strong></td></tr><tr><td>js/app.js</td><td><strong><a href="http://www.atguigu.com/course/js/app.js">http://www.atguigu.com/course/js/app.js</a></strong></td></tr><tr><td>../img/logo.png</td><td><strong><a href="http://www.atguigu.com/img/logo.png">http://www.atguigu.com/img/logo.png</a></strong></td></tr><tr><td>../../mp4/show.mp4</td><td><strong><a href="http://www.atguigu.com/mp4/show.mp4">http://www.atguigu.com/mp4/show.mp4</a></strong></td></tr></tbody></table></div><h4 id="网页中使用-URL-的场景小结"><a href="#网页中使用-URL-的场景小结" class="headerlink" title="网页中使用 URL 的场景小结"></a><strong>网页中使用</strong> <strong>URL</strong> <strong>的场景小结</strong></h4><p>包括但不限于如下场景：</p><ul><li>a 标签 href</li><li>link 标签 href</li><li>script 标签 src</li><li>img 标签 srcvideo audio 标签 src</li><li>form 中的 action</li><li>AJAX 请求中的 URL</li></ul><h4 id="设置资源类型（mime-类型）"><a href="#设置资源类型（mime-类型）" class="headerlink" title="设置资源类型（mime 类型）"></a><strong>设置资源类型（mime 类型）</strong></h4><p><strong>媒体类型</strong>（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mime 类型结构： [type]/[subType]</span><br><span class="line">例如： text/html text/css image/jpeg image/png application/json</span><br></pre></td></tr></table></figure><p>HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源</p><p>下面是常见文件对应的 mime 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">html</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line"><span class="attr">css</span>: <span class="string">&#x27;text/css&#x27;</span>,</span><br><span class="line"><span class="attr">js</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line"><span class="attr">png</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line"><span class="attr">jpg</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line"><span class="attr">gif</span>: <span class="string">&#x27;image/gif&#x27;</span>,</span><br><span class="line"><span class="attr">mp4</span>: <span class="string">&#x27;video/mp4&#x27;</span>,</span><br><span class="line"><span class="attr">mp3</span>: <span class="string">&#x27;audio/mpeg&#x27;</span>,</span><br><span class="line"><span class="attr">json</span>: <span class="string">&#x27;application/json&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><em>*</em>对于未知的资源类型，可以选择 application/octet-stream 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 下载 效果</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">//读取文件导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建服务对象 request请求 response响应（这两都是形参）</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//获取请求的url</span></span><br><span class="line">    <span class="keyword">let</span> &#123; pathname &#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1:9000&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//读取文件内容</span></span><br><span class="line">        <span class="keyword">let</span> html = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/table.html&#x27;</span>)</span><br><span class="line">        response.<span class="title function_">end</span>(html)<span class="comment">//参数可以是字符串也可以是个buffer</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">&#x27;/index.css&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> css = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/index.css&#x27;</span>)</span><br><span class="line">        response.<span class="title function_">end</span>(css)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">&#x27;/index.js&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> js = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/index.js&#x27;</span>)</span><br><span class="line">        response.<span class="title function_">end</span>(js)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.<span class="property">statusCode</span> = <span class="number">404</span></span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404 NOT Found&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3.监听端口，启动服务 9000为端口号</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>很明显上面的代码，当只要有一个请求路径就需要进行判断，显然这种方式不够完美，那么我们需要封装</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">//读取文件导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> mimes = &#123;</span><br><span class="line">    <span class="attr">html</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">    <span class="attr">css</span>: <span class="string">&#x27;text/css&#x27;</span>,</span><br><span class="line">    <span class="attr">js</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line">    <span class="attr">png</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">    <span class="attr">jpg</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">    <span class="attr">gif</span>: <span class="string">&#x27;image/gif&#x27;</span>,</span><br><span class="line">    <span class="attr">mp4</span>: <span class="string">&#x27;video/mp4&#x27;</span>,</span><br><span class="line">    <span class="attr">mp3</span>: <span class="string">&#x27;audio/mpeg&#x27;</span>,</span><br><span class="line">    <span class="attr">json</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.创建服务对象 request请求 response响应（这两都是形参）</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(request.<span class="property">method</span> !==<span class="string">&#x27;GET&#x27;</span>)&#123;</span><br><span class="line">        response.<span class="property">statusCode</span> = <span class="number">405</span></span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;405 Method NOT Allowed&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取请求的url</span></span><br><span class="line">    <span class="keyword">let</span> &#123; pathname &#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">    <span class="comment">//声明一个变量 网站根目录可以根据自己需求去调整</span></span><br><span class="line">    <span class="keyword">let</span> root = __dirname + <span class="string">&#x27;/page&#x27;</span></span><br><span class="line">    <span class="comment">// let root = __dirname + &#x27;/../&#x27;</span></span><br><span class="line">    <span class="comment">//拼接文件路径</span></span><br><span class="line">    <span class="keyword">let</span> filepath = root + pathname;</span><br><span class="line">    <span class="comment">//读取文件 fs 异步 API</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(filepath, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(err);</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">//判断错误代号</span></span><br><span class="line">            <span class="keyword">switch</span> (err.<span class="property">code</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;ENOENT&#x27;</span>:</span><br><span class="line">                    response.<span class="property">statusCode</span> = <span class="number">404</span></span><br><span class="line">                    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404 NOT Found&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;EPERM&#x27;</span>:</span><br><span class="line">                    response.<span class="property">statusCode</span> = <span class="number">403</span></span><br><span class="line">                    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    response.<span class="property">statusCode</span> = <span class="number">500</span>   </span><br><span class="line">                    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;500 Internal Server Error&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取文件后缀名.slice(1)是为了去除后缀里的小数点</span></span><br><span class="line">            <span class="keyword">let</span> ext = path.<span class="title function_">extname</span>(filepath).<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">// console.log(ext);</span></span><br><span class="line">            <span class="comment">//获取对应的类型</span></span><br><span class="line">            <span class="keyword">let</span> type = mimes[ext]</span><br><span class="line">            <span class="keyword">if</span> (type) &#123;</span><br><span class="line">                <span class="comment">//匹配到了</span></span><br><span class="line">                <span class="comment">//解决乱码问题text/html(type);charset=utf-8</span></span><br><span class="line">                response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, type + <span class="string">&#x27;;charset=utf-8&#x27;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//没有匹配到</span></span><br><span class="line">                response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/octet-stream&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//响应读取文件</span></span><br><span class="line">            response.<span class="title function_">end</span>(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3.监听端口，启动服务 9000为端口号</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>GET</strong> <strong>和</strong> <strong>POST</strong> <strong>请求场景小结</strong></p><p><strong>GET 请求的情况：</strong></p><ol><li><em>在地址栏直接输入 url 访问</em></li><li><em>点击 a 链接</em></li><li><em>link 标签引入 css</em></li><li><em>script 标签引入 js</em></li><li><em>img 标签引入图片</em></li><li><em>form 标签中的 method 为 get （不区分大小写）</em></li><li><em>ajax 中的 get 请求</em></li></ol><p><strong>POST 请求的情况：</strong></p><ol><li><em>form 标签中的 method 为 post（不区分大小写）</em></li><li><em>AJAX 的 post 请求</em></li></ol><h3 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h3><p>GET 和 POST 是 HTTP 协议请求的两种方式。</p><ul><li><strong>GET 主要用来获取数据，POST 主要用来提交数据</strong></li><li><strong>GET 带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求，</strong></li><li><strong>POST 带参数请求是将参数放到请求体中</strong></li><li><strong>POST 请求相对 GET 安全一些，因为在浏览器中参数会暴露在地址栏</strong></li><li><strong>GET 请求大小有限制，一般为 2K，而 POST 请求则没有大小限制</strong></li></ul><h1 id="Node-js-模块化"><a href="#Node-js-模块化" class="headerlink" title="Node.js 模块化"></a><strong>Node.js</strong> <strong>模块化</strong></h1><h3 id="什么是模块化与模块"><a href="#什么是模块化与模块" class="headerlink" title="什么是模块化与模块 ?"></a><strong>什么是模块化与模块</strong> <strong>?</strong></h3><p><em>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为 模块化</em></p><p><em>其中拆分出的 每个文件就是一个模块 ，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用</em></p><h3 id="什么是模块化项目"><a href="#什么是模块化项目" class="headerlink" title="什么是模块化项目 ?"></a><strong>什么是模块化项目</strong> <strong>?</strong></h3><p>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目</p><h3 id="模块化好处"><a href="#模块化好处" class="headerlink" title="模块化好处"></a><strong>模块化好处</strong></h3><p>下面是模块化的一些好处：</p><ol><li><p><strong><em>防止命名冲突</em></strong></p></li><li><p><strong><em>高复用性</em></strong></p></li><li><p><strong><em>高维护性</em></strong></p></li></ol><h2 id="模块暴露数据"><a href="#模块暴露数据" class="headerlink" title="模块暴露数据"></a><strong>模块暴露数据</strong></h2><h3 id="模块初体验"><a href="#模块初体验" class="headerlink" title="模块初体验"></a><strong>模块初体验</strong></h3><p>可以通过下面的操作步骤，快速体验模块化</p><p>创建 me.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tiemo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;贴膜....&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//暴露数据</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = tiemo;</span><br></pre></td></tr></table></figure><p>创建 index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">const</span> tiemo = <span class="built_in">require</span>(<span class="string">&#x27;./me.js&#x27;</span>);</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">tiemo</span>();</span><br></pre></td></tr></table></figure><p><strong>暴露数据</strong></p><p>模块暴露数据的方式有两种：</p><ol><li><p><strong><em>module.exports = value</em></strong></p></li><li><p><strong><em>exports.name = value</em></strong></p></li></ol><blockquote><p>使用时有几点注意：</p><p><em>　module.exports 可以暴露 任意 数据</em>　不能使用 exports = value 的形式暴露数据，模块内部 module 与 exports 的隐式关系<br>*　exports = module.exports = {} ，require 返回的是目标模块中 module.exports 的值</p></blockquote><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230407203646007.png" alt="image-20230407203646007"></p><h2 id="导入（引入）模块"><a href="#导入（引入）模块" class="headerlink" title="导入（引入）模块"></a><strong>导入（引入）模块</strong></h2><p>在模块中使用 require 传入文件路径即可引入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="built_in">require</span>(<span class="string">&#x27;./me.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p><em>require 使用的一些注意事项：</em></p><blockquote><ol><li><p><strong><em>对于自己创建的模块，导入时路径建议写 相对路径 ，且不能省略 ./ 和 ../</em></strong></p></li><li><p><strong><em>js 和 json 文件导入时可以不用写后缀，c/c++编写的 node 扩展文件也可以不写后缀，但是一般用不到</em></strong></p></li><li><p><strong><em>如果导入其他类型的文件，会以 js 文件进行处理</em></strong></p></li><li><p><strong><em>如果导入的路径是个文件夹，则会 首先 检测该文件夹下 package.json 文件中 main 属性对应的文件，如果存在则导入，反之如果文件不存在会报错。如果 main 属性不存在，或者 package.json 不存在，则会尝试导入文件夹下的 index.js 和index.json ，如果还是没找到，就会报错</em></strong></p></li><li><p><strong><em>导入 node.js 内置模块时，直接 require 模块的名字即可，无需加 ./ 和 ../</em></strong></p></li></ol></blockquote><h2 id="导入模块的基本流程"><a href="#导入模块的基本流程" class="headerlink" title="导入模块的基本流程"></a><strong>导入模块的基本流程</strong></h2><p>这里我们介绍一下 require 导入 自定义模块 的基本流程</p><ol><li><p><em>将相对路径转为绝对路径，定位目标文件</em></p></li><li><p><em>缓存检测</em></p></li><li><p><em>读取目标文件代码</em></p></li><li><p><em>包裹为一个函数并执行（自执行函数）。通过 arguments.callee.toString() 查看自执行函数</em></p></li><li><p><em>缓存模块的值</em></p></li><li><p><em>返回 module.exports 的值</em></p></li></ol><h2 id="CommonJS-规范"><a href="#CommonJS-规范" class="headerlink" title="CommonJS 规范"></a><strong>CommonJS</strong> <strong>规范</strong></h2><blockquote><p><em>module.exports 、 exports 以及 require 这些都是 CommonJS 模块化规范中的内容。</em></p><p><em>而 Node.js 是实现了 CommonJS 模块化规范，二者关系有点像 JavaScript 与 ECMAScrip</em>t</p></blockquote><h1 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a><strong>包管理工具</strong></h1><h3 id="包是什么"><a href="#包是什么" class="headerlink" title="包是什么"></a><strong>包是什么</strong></h3><p>『包』英文单词是 package ，代表了一组特定功能的源码集合</p><h3 id="包管理工具-1"><a href="#包管理工具-1" class="headerlink" title="包管理工具"></a><strong>包管理工具</strong></h3><p><em>管理『包』的应用软件，可以对「包」进行 下载安装 ， 更新 ， 删除 ， 上传 等操作</em></p><p><em>借助包管理工具，可以快速开发项目，提升开发效率</em></p><p><em>包管理工具是一个通用的概念，很多编程语言都有包管理工具，所以 掌握好包管理工具非常重要</em></p><h3 id="常用的包管理工具"><a href="#常用的包管理工具" class="headerlink" title="常用的包管理工具"></a><strong>常用的包管理工具</strong></h3><p>下面列举了前端常用的包管理工具</p><p><strong><em>npm</em></strong></p><p><strong><em>yarn</em></strong></p><p><strong><em>cnpm</em></strong></p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a><strong>npm</strong></h2><p><em>npm 全称 Node Package Manager ，翻译为中文意思是『Node 的包管理工具』</em></p><p><em>npm 是 node.js 官方内置的包管理工具，是 必须要掌握住的工具</em></p><h3 id="npm-的安装"><a href="#npm-的安装" class="headerlink" title="npm 的安装"></a><strong>npm</strong> <strong>的安装</strong></h3><p>node.js 在安装时会 自动安装 npm ，所以如果你已经安装了 node.js，可以直接使用 npm</p><p>可以通过 npm -v 查看版本号测试，如果显示版本号说明安装成功，反之安装失败</p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230408144928777.png" alt="image-20230408144928777"></p><h3 id="npm-基本使用"><a href="#npm-基本使用" class="headerlink" title="npm 基本使用"></a><strong>npm</strong> <strong>基本使用</strong></h3><p><strong>初始化</strong></p><p>创建一个空目录，然后以此目录作为工作目录 启动命令行工具 ，执行 <strong>npm init</strong></p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230408145032414.png" alt="image-20230408145032414"></p><p><strong>npm init</strong> 命令的作用是将文件夹初始化为一个『包』， 交互式创建 <strong>package.json</strong> 文件</p><p><strong>package.json</strong> 是包的配置文件，每个包都必须要有 <strong>package.json</strong></p><p><strong>package.json</strong> 内容示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01_npm&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>属性翻译</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1-npm&quot;</span><span class="punctuation">,</span> #包的名字</span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span> #包的版本</span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> #包的描述</span><br><span class="line"><span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span> #包的入口文件</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> #脚本配置</span><br><span class="line"><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> #作者</span><br><span class="line"><span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span> #开源证书</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>初始化的过程中还有一些注意事项：</strong></p><p><em>1. package name ( 包名 ) 不能使用中文、大写，默认值是 文件夹的名称 ，所以文件夹名称也不</em></p><p><em>能使用中文和大写</em></p><p><em>2. version ( 版本号 )要求 x.x.x 的形式定义， x 必须是数字，默认值是 1.0.0</em></p><p><em>3. ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读<strong><a href="http://www.ruanyifeng.com/bl">http://www.ruanyifeng.com/bl</a></strong></em></p><p><strong><em>og/2011/05/how_to_choose_free_software_licenses.html</em></strong></p><p><em>4. package.json 可以手动创建与修改</em></p><p><em>5. 使用 npm init -y 或者 npm init —yes 极速创建 package.json</em></p></blockquote><h4 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a><strong>搜索包</strong></h4><p>搜索包的方式有两种</p><ol><li><p>命令行 『npm s/search 关键字』</p></li><li><p>网站搜索 网址是 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p></li></ol><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a><strong>下载安装包</strong></h4><p>我们可以通过 <strong>npm install</strong> 和 <strong>npm i</strong> 命令安装包</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">npm install &lt;包名&gt;</span><br><span class="line">npm i &lt;包名&gt;</span><br><span class="line"># 示例</span><br><span class="line">npm install uniq</span><br><span class="line">npm i uniq</span><br></pre></td></tr></table></figure><p>运行之后文件夹下会增加两个资源</p><ul><li><strong><em>node_modules</em></strong> 文件夹 存放下载的包</li><li><strong><em>package-lock.json</em></strong> 包的锁文件 ，用来锁定包的版本</li></ul><blockquote><p><em>安装 uniq 之后， uniq 就是当前这个包的一个 依赖包 ，有时会简称为 依赖</em></p><p><em>比如我们创建一个包名字为 A，A 中安装了包名字是 B，我们就说 B 是 A 的一个依赖包 ，也会说A 依赖 B</em></p></blockquote><h4 id="require-导入-npm-包基本流程"><a href="#require-导入-npm-包基本流程" class="headerlink" title="require 导入 npm 包基本流程"></a><strong>require</strong> <strong>导入</strong> <strong>npm</strong> <strong>包基本流程</strong></h4><ol><li><p>在当前文件夹下 node_modules 中寻找同名的文件夹</p></li><li><p>在上级目录中下的 node_modules 中寻找同名的文件夹，直至找到磁盘根目录</p></li></ol><h3 id="生产环境与开发环境"><a href="#生产环境与开发环境" class="headerlink" title="生产环境与开发环境"></a><strong>生产环境与开发环境</strong></h3><blockquote><p><em>开发环境是程序员 专门用来写代码 的环境，一般是指程序员的电脑，开发环境的项目一般 只能程序员自己访问</em></p><p><em>生产环境是项目 代码正式运行 的环境，一般是指正式的服务器电脑，生产环境的项目一般 每个客户都可以访问</em></p></blockquote><h3 id="生产依赖与开发依赖"><a href="#生产依赖与开发依赖" class="headerlink" title="生产依赖与开发依赖"></a><strong>生产依赖与开发依赖</strong></h3><p>我们可以在安装时设置选项来区分 依赖的类型 ，目前分为两类：</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th>命令</th><th>补充</th></tr></thead><tbody><tr><td style="text-align:center">生产依赖</td><td>npm i -S uniq/npm i —save uniq</td><td>-S  -S 是默认选项 \</td><td>包信息保存在 package.json 中 dependencies 属性</td></tr><tr><td style="text-align:center">开发依赖</td><td>npm i -D less/npm i —save-dev less</td><td>-D 等效于 —save-dev \</td><td>包信息保存在 package.json 中 devDependencies 属性</td></tr></tbody></table></div><blockquote><p><em>举个例子方便大家理解，比如说做蛋炒饭需要 大米 ， 油 ， 葱 ， 鸡蛋 ， 锅 ， 煤气 ， 铲子 等</em></p><p><em>其中 锅 ， 煤气 ， 铲子 属于开发依赖，只在制作阶段使用</em></p><p><em>而 大米 ， 油 ， 葱 ， 鸡蛋 属于生产依赖，在制作与最终食用都会用到</em></p><p><em>所以 开发依赖 是只在开发阶段使用的依赖包，而 生产依赖 是开发阶段和最终上线运行阶段都用到的依赖包</em></p></blockquote><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a><strong>全局安装</strong></h3><p>我们可以执行安装选项 -g 进行全局安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g nodemon</span><br></pre></td></tr></table></figure><p>全局安装完成之后就可以在命令行的任何位置运行 nodemon 命令   该命令的作用是 <strong>自动重启 node</strong> 应用程序</p><blockquote><p><strong>说明：</strong></p><p><em>全局安装的命令不受工作目录位置影响</em></p><p><em>可以通过 <strong>npm root -g</strong> 可以查看全局安装包的位置</em></p><p><em>不是所有的包都适合全局安装 ， 只有全局类的工具才适合，可以通过 查看包的官方文档来确定安装方式 ，这里先不必太纠结</em></p></blockquote><h4 id="修改-windows-执行策略"><a href="#修改-windows-执行策略" class="headerlink" title="修改 windows 执行策略"></a><strong>修改</strong> <strong>windows</strong> <strong>执行策略</strong></h4><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230408150302704.png" alt="image-20230408150302704"></p><p>windows 默认不允许 npm 全局命令执行脚本文件，所以需要修改执行策略</p><ol><li>以 <strong>管理员身份</strong> 打开 powershell 命令行</li></ol><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230408150340249.png" alt="image-20230408150340249"></p><ol><li>键入命令 <strong>set-ExecutionPolicy remoteSigned</strong></li></ol><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230408150406323.png" alt="image-20230408150406323"></p><ol><li><p>键入 A 然后敲回车 </p></li><li><p>如果不生效，可以尝试重启 vscode</p></li></ol><h4 id="环境变量-Path"><a href="#环境变量-Path" class="headerlink" title="环境变量 Path"></a><strong>环境变量</strong> <strong>Path</strong></h4><p><em>Path 是操作系统的一个环境变量，可以设置一些文件夹的路径，在当前工作目录下找不到可执行文件</em></p><p><em>时，就会在环境变量 Path 的目录中挨个的查找，如果找到则执行，如果没有找到就会报错</em></p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230408150448915.png" alt="image-20230408150448915"></p><blockquote><p><strong>补充说明：</strong></p><p><em>如果希望某个程序在任何工作目录下都能正常运行，就应该将该程序的所在目录配置到环境变量 Path 中</em></p><p><em>windows 下查找命令的所在位置</em></p><blockquote><p><em>cmd 命令行 中执行 where nodemon</em></p><p><em>powershell命令行 执行 get-command nodemon</em></p></blockquote></blockquote><h3 id="安装包依赖"><a href="#安装包依赖" class="headerlink" title="安装包依赖"></a><strong>安装包依赖</strong></h3><p>在项目协作中有一个常用的命令就是 npm i ，通过该命令可以依据 package.json 和 package-lock.json 的依赖声明安装项目依赖</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p><em>node_modules 文件夹大多数情况都不会存入版本库</em></p></blockquote><h3 id="安装指定版本的包"><a href="#安装指定版本的包" class="headerlink" title="安装指定版本的包"></a><strong>安装指定版本的包</strong></h3><p>项目中可能会遇到版本不匹配的情况，有时就需要安装指定版本的包，可以使用下面的命令的</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 格式</span><br><span class="line">npm i &lt;包名@版本号&gt;</span><br><span class="line">## 示例</span><br><span class="line">npm i jquery@<span class="number">1</span>.<span class="number">11</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="删除依赖"><a href="#删除依赖" class="headerlink" title="删除依赖"></a><strong>删除依赖</strong></h3><p>项目中可能需要删除某些不需要的包，可以使用下面的命令    </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 局部删除</span><br><span class="line">npm remove uniq</span><br><span class="line">npm r uniq</span><br><span class="line">## 全局删除</span><br><span class="line">npm remove -g nodemon</span><br></pre></td></tr></table></figure><h3 id="配置命令别名"><a href="#配置命令别名" class="headerlink" title="配置命令别名"></a><strong>配置命令别名</strong></h3><p>通过配置命令别名可以更简单的执行命令</p><p>配置 <strong>package.json</strong> 中的 <strong>scripts</strong> 属性</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>配置完成之后，可以使用别名执行命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br><span class="line">npm run <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p>不过 start 别名比较特别，使用时可以省略 run</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>补充说明：</strong></p><p><em>npm start 是项目中常用的一个命令，一般用来启动项目</em></p><p><em>npm run 有自动向上级目录查找的特性，跟 require 函数也一样</em></p><p><em>对于陌生的项目，我们可以通过查看 scripts 属性来参考项目的一些操作</em></p></blockquote><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a><strong>cnpm</strong></h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p><em>cnpm 是一个淘宝构建的 npmjs.com 的完整镜像，也称为『淘宝镜像』，网址<strong><a href="https://npmmirror.com/">https://npmmirror.com/</a></strong></em></p><p><em>cnpm 服务部署在国内 阿里云服务器上 ， 可以提高包的下载速度</em></p><p><em>官方也提供了一个全局工具包 cnpm ，操作命令与 npm 大体相同</em></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p>我们可以通过 npm 来安装 cnpm 工具</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a><strong>操作命令</strong></h3><div class="table-container"><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td>cnpm init / cnpm init</td></tr><tr><td>安装包</td><td>cnpm i uniq / cnpm i -S uniq / cnpm i -D uniq / cnpm i -g nodemon</td></tr><tr><td>安装项目依赖</td><td>cnpm i</td></tr><tr><td>删除</td><td>cnpm r uniq</td></tr></tbody></table></div><h3 id="npm-配置淘宝镜像"><a href="#npm-配置淘宝镜像" class="headerlink" title="npm 配置淘宝镜像"></a><strong>npm</strong> <strong>配置淘宝镜像</strong></h3><p>用 npm 也可以使用淘宝镜像，配置的方式有两种</p><ul><li><p><em>直接配置</em></p></li><li><p><em>工具配置</em></p></li></ul><h4 id="直接配置"><a href="#直接配置" class="headerlink" title="直接配置"></a><strong>直接配置</strong></h4><p>执行如下命令即可完成配置</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><h4 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a><strong>工具配置</strong></h4><p>使用 nrm 配置 npm 的镜像地址 npm registry manager</p><p>安装 nrm</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g nrm</span><br></pre></td></tr></table></figure><p>修改镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure><p>检查是否配置成功（选做）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure><p>检查 registry 地址是否为 <strong><a href="https://registry.npmmirror.com/">https://registry.npmmirror.com/</a></strong> , 如果 是 则表明成功</p><blockquote><p><strong>补充说明：</strong></p><ol><li><em>建议使用第二种方式 进行镜像配置，因为后续修改起来会比较方便</em></li><li><em>虽然 cnpm 可以提高速度，但是 npm 也可以通过淘宝镜像进行加速，所以 npm 的使用率还是高于 cnpm</em></li></ol></blockquote><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a><strong>yarn</strong></h2><h3 id="yarn-介绍"><a href="#yarn-介绍" class="headerlink" title="yarn 介绍"></a><strong>yarn</strong> <strong>介绍</strong></h3><p>yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具，官方网址：<strong><a href="https://yarnpkg.com/">https://yarnpkg.com/</a></strong></p><h3 id="yarn-特点"><a href="#yarn-特点" class="headerlink" title="yarn 特点"></a><strong>yarn</strong> <strong>特点</strong></h3><p>yarn 官方宣称的一些特点</p><blockquote><p><strong>*速度超快</strong>：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快*</p><p><strong>*超级安全</strong>：在执行代码之前，yarn 会通过算法校验每个安装包的完整性*</p><p><strong>*超级可靠</strong>：使用详细、简洁的锁文件格式和明确的安装算法，yarn 能够保证在不同系统上无差异的工作*</p></blockquote><h3 id="yarn-安装"><a href="#yarn-安装" class="headerlink" title="yarn 安装"></a><strong>yarn</strong> <strong>安装</strong></h3><p>我们可以使用 npm 安装 yarn</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yarn</span><br></pre></td></tr></table></figure><h3 id="yarn-常用命令"><a href="#yarn-常用命令" class="headerlink" title="yarn 常用命令"></a><strong>yarn</strong> <strong>常用命令</strong></h3><div class="table-container"><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td>yarn init / yarn init -y</td></tr><tr><td>安装包</td><td>yarn add uniq 生产依赖 / yarn add less —dev 开发依赖 / yarn global add nodemon 全局安装</td></tr><tr><td>删除包</td><td>yarn remove uniq 删除项目依赖包 / yarn global remove nodemon 全局删除包</td></tr><tr><td>安装项目依赖</td><td>yarn</td></tr><tr><td>运行命令别名</td><td>yarn &lt;别名&gt; # 不需要添加 run</td></tr></tbody></table></div><h3 id="yarn-配置淘宝镜像"><a href="#yarn-配置淘宝镜像" class="headerlink" title="yarn 配置淘宝镜像"></a><strong>yarn</strong> <strong>配置淘宝镜像</strong></h3><p>可以通过如下命令配置淘宝镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><p>可以通过 yarn config list 查看 yarn 的配置项</p><h3 id="npm-和-yarn-选择"><a href="#npm-和-yarn-选择" class="headerlink" title="npm 和 yarn 选择"></a><strong>npm</strong> <strong>和</strong> <strong>yarn</strong> <strong>选择</strong></h3><p>大家可以根据不同的场景进行选择</p><ol><li><strong><em>个人项目</em></strong></li></ol><p><em>如果是个人项目， 哪个工具都可以 ，可以根据自己的喜好来选择</em></p><ol><li><strong><em>公司项目</em></strong></li></ol><p><em>如果是公司要根据项目代码来选择，可以 通过锁文件判断 项目的包管理工具</em></p><p>​        <em>npm 的锁文件为 package-lock.json</em></p><p>​        <em>yarn 的锁文件为 yarn.lock</em></p><blockquote><p><strong><em>包管理工具 不要混着用，切记，切记，切记</em></strong></p></blockquote><h2 id="管理发布包"><a href="#管理发布包" class="headerlink" title="管理发布包"></a><strong>管理发布包</strong></h2><h3 id="创建与发布"><a href="#创建与发布" class="headerlink" title="创建与发布"></a><strong>创建与发布</strong></h3><p>我们可以将自己开发的工具包发布到 npm 服务上，方便自己和其他开发者使用，操作步骤如下：</p><ol><li><p><em>创建文件夹，并创建文件 index.js， 在文件中声明函数，使用 module.exports 暴露</em></p></li><li><p><em>npm 初始化工具包，package.json 填写包的信息 (包的名字是唯一的)</em></p></li><li><p><em>注册账号 <strong><a href="https://www.npmjs.com/signup">https://www.npmjs.com/signup</a></strong></em></p></li><li><p><em>激活账号 （ 一定要激活账号 ）</em></p></li><li><p><em>修改为官方的官方镜像 (命令行中运行 nrm use npm )</em></p></li><li><p><em>命令行下 npm login 填写相关用户信息</em></p></li><li><p><em>命令行下 npm publish 提交包 👌</em></p></li></ol><h3 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a><strong>更新包</strong></h3><p>后续可以对自己发布的包进行更新，操作步骤如下</p><ol><li><p><em>更新包中的代码</em></p></li><li><p><em>测试代码是否可用</em></p></li><li><p><em>修改 package.json 中的版本号</em></p></li><li><p><em>发布更新</em></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><h3 id="删除包"><a href="#删除包" class="headerlink" title="删除包"></a><strong>删除包</strong></h3><p>执行如下命令删除包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish --force</span><br></pre></td></tr></table></figure><blockquote><p>删除包需要满足一定的条件，<strong><a href="https://docs.npmjs.com/policies/unpublish">https://docs.npmjs.com/policies/unpublish</a></strong></p><p><strong><em>1.你是包的作者</em></strong></p><p><strong><em>2.发布小于 24 小时</em></strong></p><p><strong><em>3.大于 24 小时后，没有其他包依赖，并且每周小于 300 下载量，并且只有一个维护者</em></strong></p></blockquote><h2 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a><strong>扩展内容</strong></h2><p>在很多语言中都有包管理工具，比如：</p><div class="table-container"><table><thead><tr><th>语言</th><th>包管理工具</th></tr></thead><tbody><tr><td>PHP</td><td>composer</td></tr><tr><td>Python</td><td>pip</td></tr><tr><td>Java</td><td>maven</td></tr><tr><td>Go</td><td>go mod</td></tr><tr><td>JavaScript</td><td>npm/yarn/cnpm/othe</td></tr></tbody></table></div><p>除了编程语言领域有包管理工具之外，操作系统层面也存在包管理工具，不过这个包指的是『 软件包 』</p><div class="table-container"><table><thead><tr><th>操作系统</th><th>包管理工具</th><th>网址</th></tr></thead><tbody><tr><td>Centos</td><td>yum</td><td><strong><a href="https://packages.debian.org/stable/">https://packages.debian.org/stable/</a></strong></td></tr><tr><td>Ubuntu</td><td>apt</td><td><strong><a href="https://packages.ubuntu.com/">https://packages.ubuntu.com/</a></strong></td></tr><tr><td>MacOS</td><td>homebrew</td><td><strong><a href="https://brew.sh/">https://brew.sh/</a></strong></td></tr><tr><td>Windows</td><td>chocolatey</td><td><strong><a href="https://chocolatey.org/">https://chocolatey.org/</a></strong></td></tr></tbody></table></div><h1 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h1><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>nvm 全称 Node Version Manager 顾名思义它是用来管理 node 版本的工具，方便切换不同版本的Node.js</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h3><p>nvm 的使用非常的简单，跟 npm 的使用方法类似</p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a><strong>下载安装</strong></h4><p>首先先下载 nvm，下载地址 <strong><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></strong>，选择 nvm-setup.exe 下载即可</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h4><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>nvm list available</td><td>显示所有可以下载的 Node.js 版本</td></tr><tr><td>nvm list</td><td>显示已安装的版本</td></tr><tr><td>nvm install 18.12.1</td><td>安装 18.12.1 版本的 Node.js</td></tr><tr><td>nvm install latest</td><td>安装最新版的 Node.js</td></tr><tr><td>nvm uninstall 18.12.1</td><td>删除某个版本的 Node.js</td></tr><tr><td>nvm use 18.12.1</td><td>切换 18.12.1 的 Node.js</td></tr></tbody></table></div><h1 id="Express-介绍"><a href="#Express-介绍" class="headerlink" title="Express 介绍"></a><strong>Express</strong> <strong>介绍</strong></h1><p>express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址：<strong><a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></strong></p><p>简单来说，express 是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用（HTTP 服务）</p><h2 id="express-使用"><a href="#express-使用" class="headerlink" title="express 使用"></a><strong>express</strong> <strong>使用</strong></h2><h3 id="express-下载"><a href="#express-下载" class="headerlink" title="express 下载"></a><strong>express</strong> <strong>下载</strong></h3><p>express 本身是一个 npm 包，所以可以通过 npm 安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">    npm i express</span><br></pre></td></tr></table></figure><h3 id="express-初体验"><a href="#express-初体验" class="headerlink" title="express 初体验"></a><strong>express</strong> <strong>初体验</strong></h3><p>可以按照这个步骤进行操作：</p><p>1.创建 JS 文件，键入如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//3. 创建路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">&#x27;hello express server&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//4. 监听端口 启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动, 端口监听为 3000...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.命令行下执行该脚本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node &lt;文件名&gt;</span><br><span class="line"># 或者</span><br><span class="line">nodemon &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p>3.然后在浏览器就可以访问 <a href="http://127.0.0.1:3000/home">http://127.0.0.1:3000/home</a> </p><h2 id="express-路由"><a href="#express-路由" class="headerlink" title="express 路由"></a><strong>express</strong> <strong>路由</strong></h2><h4 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a><strong>什么是路由</strong></h4><p>官方定义： <strong>路由确定了应用程序如何响应客户端对特定端点的请求</strong></p><h4 id="路由的使用"><a href="#路由的使用" class="headerlink" title="路由的使用"></a><strong>路由的使用</strong></h4><p><em>一个路由的组成有 请求方法 ， 路径 和 回调函数 组成</em></p><p>express 中提供了一系列方法，可以很方便的使用路由，使用格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.&lt;method&gt;(path，callback)</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//创建 get 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;网站首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//首页路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;我才是真正的首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//创建 post 路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//匹配所有的请求方法</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/search&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;1 秒钟为您找到相关结果约 100,000,000 个&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;*&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监听端口 启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动, 端口监听为 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a><strong>获取请求参数</strong></h4><p>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//获取请求的路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//1. 获取报文的方式与原生 HTTP 获取方式是兼容的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">method</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">httpVersion</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>);</span><br><span class="line"><span class="comment">//2. express 独有的获取报文的方式</span></span><br><span class="line"><span class="comment">//获取查询字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>); <span class="comment">// 『相对重要』</span></span><br><span class="line"><span class="comment">// 获取指定的请求头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="title function_">get</span>(<span class="string">&#x27;host&#x27;</span>));</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;请求报文的获取&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;启动成功....&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="获取路由参数"><a href="#获取路由参数" class="headerlink" title="获取路由参数"></a><strong>获取路由参数</strong></h4><p>路由参数指的是 URL 路径中的参数（数据）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:id.html&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;商品详情, 商品 id 为&#x27;</span> + req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="express-响应设置"><a href="#express-响应设置" class="headerlink" title="express 响应设置"></a><strong>express</strong> <strong>响应设置</strong></h2><p>express 框架封装了一些 API 来方便给客户端响应数据，并且兼容原生 HTTP 模块的获取方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求的路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/response&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//1. express 中设置响应的方式兼容 HTTP 模块的方式</span></span><br><span class="line">res.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">res.<span class="property">statusMessage</span> = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;xyz&#x27;</span>);</span><br><span class="line">res.<span class="title function_">write</span>(<span class="string">&#x27;响应体&#x27;</span>);</span><br><span class="line">res.<span class="title function_">end</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"><span class="comment">//2. express 的响应方法</span></span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">500</span>); <span class="comment">//设置响应状态码</span></span><br><span class="line">res.<span class="title function_">set</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;yyy&#x27;</span>);<span class="comment">//设置响应头</span></span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;中文响应不乱码&#x27;</span>);<span class="comment">//设置响应体</span></span><br><span class="line"><span class="comment">//连贯操作</span></span><br><span class="line">res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">set</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="string">&#x27;yyy&#x27;</span>).<span class="title function_">send</span>(<span class="string">&#x27;你好朋友&#x27;</span>)</span><br><span class="line"><span class="comment">//3. 其他响应</span></span><br><span class="line">res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://atguigu.com&#x27;</span>)<span class="comment">//重定向</span></span><br><span class="line">res.<span class="title function_">download</span>(<span class="string">&#x27;./package.json&#x27;</span>);<span class="comment">//下载响应</span></span><br><span class="line">res.<span class="title function_">json</span>();<span class="comment">//响应 JSON</span></span><br><span class="line">res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/home.html&#x27;</span>) <span class="comment">//响应文件内容</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="express-中间件"><a href="#express-中间件" class="headerlink" title="express 中间件"></a><strong>express</strong> <strong>中间件</strong></h2><h3 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a><strong>什么是中间件</strong></h3><p><strong>中间件（Middleware）本质是一个回调函数</strong></p><p><strong>中间件函数</strong> 可以像路由回调一样访问 <strong>请求对象（request） ， 响应对象（response）</strong></p><h3 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用"></a><strong>中间件的作用</strong></h3><p><em>中间件的作用 就是 使用函数封装公共操作，简化代码</em></p><h3 id="中间件的类型"><a href="#中间件的类型" class="headerlink" title="中间件的类型"></a><strong>中间件的类型</strong></h3><ul><li>全局中间件</li><li>路由中间件</li></ul><h4 id="定义全局中间件"><a href="#定义全局中间件" class="headerlink" title="定义全局中间件"></a><strong>定义全局中间件</strong></h4><p><em>每一个请求 到达服务端之后 都会执行全局中间件函数</em></p><p>声明中间件函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> recordMiddleware = <span class="keyword">function</span>(<span class="params">request,response,next</span>)&#123;</span><br><span class="line"><span class="comment">//实现功能代码</span></span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line"><span class="comment">//执行next函数(当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用next)</span></span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230409171730756.png" alt="image-20230409171730756"></p><p>应用中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(recordMiddleware);</span><br></pre></td></tr></table></figure><p>声明时可以直接将匿名函数传递给 use</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">request, response, next</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定义第一个中间件&#x27;</span>);</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="多个全局中间件"><a href="#多个全局中间件" class="headerlink" title="多个全局中间件"></a><strong>多个全局中间件</strong></h4><p>express 允许使用 app.use() 定义多个全局中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">request, response, next</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定义第一个中间件&#x27;</span>);</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">request, response, next</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定义第二个中间件&#x27;</span>);</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="定义路由中间件"><a href="#定义路由中间件" class="headerlink" title="定义路由中间件"></a><strong>定义路由中间件</strong></h4><p>如果 <strong>只需要对某一些路由进行功能封装</strong> ，则就需要路由中间件</p><p>调用格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/路径&#x27;</span>,<span class="string">`中间件函数`</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/路径&#x27;</span>,<span class="string">`中间件函数1`</span>,<span class="string">`中间件函数2`</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="静态资源中间件"><a href="#静态资源中间件" class="headerlink" title="静态资源中间件"></a><strong>静态资源中间件</strong></h3><p>express 内置处理静态资源的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//静态资源中间件的设置，将当前文件夹下的public目录作为网站的根目录</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./public&#x27;</span>)); <span class="comment">//当然这个目录中都是一些静态资源</span></span><br><span class="line"><span class="comment">//如果访问的内容经常变化，还是需要设置路由</span></span><br><span class="line"><span class="comment">//但是，在这里有一个问题，如果public目录下有index.html文件，单独也有index.html的路由，</span></span><br><span class="line"><span class="comment">//则谁书写在前，优先执行谁</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index.html&#x27;</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">respsonse.<span class="title function_">send</span>(<span class="string">&#x27;首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000 端口启动....&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项:</strong></p><ol><li><p><strong><em>index.html 文件为默认打开的资源</em></strong></p></li><li><p><strong><em>如果静态资源与路由规则同时匹配，谁先匹配谁就响应</em></strong></p></li><li><p><strong><em>路由响应动态资源，静态资源中间件响应静态资源</em></strong></p></li></ol></blockquote><h3 id="获取请求体数据-body-parser"><a href="#获取请求体数据-body-parser" class="headerlink" title="获取请求体数据 body-parser"></a><strong>获取请求体数据</strong> <strong>body-parser</strong></h3><p>express 可以使用 body-parser 包处理请求体</p><p>第一步：安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i body-parser</span><br></pre></td></tr></table></figure><p>第二步：导入 body-parser 包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br></pre></td></tr></table></figure><p>第三步：获取中间件函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理 querystring 格式的请求体</span></span><br><span class="line"><span class="keyword">let</span> urlParser = bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));</span><br><span class="line"><span class="comment">//处理 JSON 格式的请求体</span></span><br><span class="line"><span class="keyword">let</span> jsonParser = bodyParser.<span class="title function_">json</span>()</span><br></pre></td></tr></table></figure><p>第四步：设置路由中间件，然后使用 request.body 来获取请求体数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, urlParser, <span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//获取请求体数据</span></span><br><span class="line"><span class="comment">//console.log(request.body);</span></span><br><span class="line"><span class="comment">//用户名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>.<span class="property">username</span>);</span><br><span class="line"><span class="comment">//密码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>.<span class="property">userpass</span>);</span><br><span class="line">response.<span class="title function_">send</span>(<span class="string">&#x27;获取请求体数据&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取到的请求体数据：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Object</span>: <span class="type">null</span> <span class="type">prototype</span>] &#123; username: <span class="string">&#x27;admin&#x27;</span>, userpass: <span class="string">&#x27;123456&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a><strong>Router</strong></h2><h3 id="什么是-Router"><a href="#什么是-Router" class="headerlink" title="什么是 Router"></a><strong>什么是</strong> <strong>Router</strong></h3><p>express 中的 Router 是一个完整的中间件和路由系统，可以看做是一个小型的 app 对象。</p><h3 id="Router-作用"><a href="#Router-作用" class="headerlink" title="Router 作用"></a><strong>Router</strong> <strong>作用</strong></h3><p>对路由进行模块化，更好的管理路由</p><h3 id="Router-使用"><a href="#Router-使用" class="headerlink" title="Router 使用"></a><strong>Router</strong> <strong>使用</strong></h3><p>创建独立的 JS 文件（homeRouter.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">//3.创建路由规则</span></span><br><span class="line"><span class="comment">//创建路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;前台首页&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/search&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Search首页&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.暴露router</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>= router;</span><br></pre></td></tr></table></figure><p>主文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//5.引入子路由文件</span></span><br><span class="line"><span class="keyword">const</span> homeRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/homeRouter&#x27;</span>);</span><br><span class="line"><span class="comment">//6.设置和使用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(homeRouter);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000 端口启动....&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="EJS-模板引擎"><a href="#EJS-模板引擎" class="headerlink" title="EJS 模板引擎"></a><strong>EJS</strong> <strong>模板引擎</strong></h1><h3 id="什么是模板引擎"><a href="#什么是模板引擎" class="headerlink" title="什么是模板引擎"></a><strong>什么是模板引擎</strong></h3><p>模板引擎是分离 用户界面和业务数据 的一种技术</p><h3 id="什么是-EJS"><a href="#什么是-EJS" class="headerlink" title="什么是 EJS"></a><strong>什么是</strong> <strong>EJS</strong></h3><p>EJS 是一个高效的 Javascript 的模板引擎</p><p>官网: <strong><a href="https://ejs.co/">https://ejs.co/</a></strong></p><p>中文站：<strong><a href="https://ejs.bootcss.com/">https://ejs.bootcss.com/</a></strong></p><h3 id="EJS-初体验"><a href="#EJS-初体验" class="headerlink" title="EJS 初体验"></a><strong>EJS</strong> <strong>初体验</strong></h3><p>下载安装EJS</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i ejs --save</span><br></pre></td></tr></table></figure><p>代码示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入ejs</span></span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">//2.定义数据</span></span><br><span class="line"><span class="keyword">let</span> person = [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王二麻子&#x27;</span>];</span><br><span class="line"><span class="comment">//3.ejs解析模板返回结构</span></span><br><span class="line"><span class="comment">//&lt;%= %&gt; 是ejs解析内容的标记，作用是输出当前表达式的执行结构</span></span><br><span class="line"><span class="keyword">let</span> html = ejs.<span class="title function_">render</span>(‘&lt;%= person.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>) %&gt;’, &#123;<span class="attr">person</span>:person&#125;);</span><br><span class="line"><span class="comment">//4.输出结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个</span></span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;luomu&#x27;</span>, <span class="string">&#x27;luomu777&#x27;</span>, <span class="string">&#x27;relife&#x27;</span>, <span class="string">&#x27;relife777&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//原生js实现</span></span><br><span class="line"><span class="comment">// let str = &#x27;&lt;ul&gt;&#x27;</span></span><br><span class="line"><span class="comment">// xiyou.forEach(item =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     str += `&lt;li&gt;$&#123;item&#125;&lt;/li&gt;`</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">//闭合ul</span></span><br><span class="line"><span class="comment">// str += &#x27;&lt;/ul&gt;&#x27;</span></span><br><span class="line"><span class="comment">// console.log(str);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//EJS实现</span></span><br><span class="line"><span class="keyword">let</span> html = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./2.html&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line"><span class="keyword">let</span> result = ejs.<span class="title function_">render</span>(html, &#123; <span class="attr">xiyou</span>: xiyou &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命令行下运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="literal">--</span> 第二个 <span class="literal">--</span>&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http<span class="literal">-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line"></span><br><span class="line">            &lt;li&gt;luomu&lt;/li&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">            &lt;li&gt;luomu777&lt;/li&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">            &lt;li&gt;relife&lt;/li&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">            &lt;li&gt;relife777&lt;/li&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="EJS-常用语法"><a href="#EJS-常用语法" class="headerlink" title="EJS 常用语法"></a><strong>EJS</strong> <strong>常用语法</strong></h3><p>执行JS代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% code %&gt;</span><br></pre></td></tr></table></figure><p>输出转义的数据到模板上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= code %&gt;</span><br></pre></td></tr></table></figure><p>输出非转义的数据到模板上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- code %&gt;</span><br></pre></td></tr></table></figure><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a><strong>MongoDB</strong></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><h3 id="Mongodb-是什么"><a href="#Mongodb-是什么" class="headerlink" title="Mongodb 是什么"></a><strong>Mongodb</strong> <strong>是什么</strong></h3><p>MongoDB 是一个基于分布式文件存储的数据库，官方地址 <strong><a href="https://www.mongodb.com/">https://www.mongodb.com/</a></strong></p><h3 id="数据库是什么"><a href="#数据库是什么" class="headerlink" title="数据库是什么"></a><strong>数据库是什么</strong></h3><p>数据库（DataBase）是按照数据结构来组织、存储和管理数据的 应用程序</p><h3 id="数据库的作用"><a href="#数据库的作用" class="headerlink" title="数据库的作用"></a><strong>数据库的作用</strong></h3><p>数据库的主要作用就是 管理数据 ，对数据进行 增（c）、删（d）、改（u）、查（r）</p><h3 id="数据库管理数据的特点"><a href="#数据库管理数据的特点" class="headerlink" title="数据库管理数据的特点"></a><strong>数据库管理数据的特点</strong></h3><p>相比于纯文件管理数据，数据库管理数据有如下特点：</p><ol><li><p>速度更快</p></li><li><p>扩展性更强</p></li><li><p>安全性更强</p></li></ol><h3 id="为什么选择-Mongodb"><a href="#为什么选择-Mongodb" class="headerlink" title="为什么选择 Mongodb"></a><strong>为什么选择</strong> <strong>Mongodb</strong></h3><p>操作语法与 JavaScript 类似，容易上手，学习成本低</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a><strong>核心概念</strong></h2><p>Mongodb 中有三个重要概念需要掌握</p><ul><li>数据库（database） 数据库是一个数据仓库，数据库服务下可以创建很多数据库，数据库中可以存放很多集合</li><li>集合（collection） 集合类似于 JS 中的数组，在集合中可以存放很多文档</li><li>文档（document） 文档是数据库中的最小单位，类似于 JS 中的对象</li></ul><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230410215016617.png" alt="image-20230410215016617"></p><p>JSON 文件示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;accounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3-YLju5f3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;买电脑&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-02-08&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5500&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;remarks&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为了上网课&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3-YLju5f4&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请女朋友吃饭&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-02-08&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;214&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;remarks&quot;</span><span class="punctuation">:</span> <span class="string">&quot;情人节聚餐&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mRQiD4s3K&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发工资&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-02-19&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4396&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;remarks&quot;</span><span class="punctuation">:</span> <span class="string">&quot;终于发工资啦!~~&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;users&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lisi&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wangwu&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">22</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>大家可以通过 JSON 文件来理解 Mongodb 中的概念</p><blockquote><p><strong><em>一个 JSON 文件 好比是一个 数据库 ，一个 Mongodb 服务下可以有 N 个数据库</em></strong></p><p><strong><em>JSON 文件中的 一级属性的数组值 好比是 集合</em></strong></p><p><strong><em>数组中的对象好比是 文档</em></strong></p><p><strong><em>对象中的属性有时也称之为 字段</em></strong></p><blockquote><p>一般情况下</p><p><strong><em>一个项目使用一个数据库</em></strong></p><p><strong><em>一个集合会存储同一种类型的数据</em></strong></p></blockquote></blockquote><h2 id="下载安装与启动"><a href="#下载安装与启动" class="headerlink" title="下载安装与启动"></a><strong>下载安装与启动</strong></h2><p><a href="https://blog.csdn.net/qq_45790877/article/details/129286309">(10条消息) MongoDB安装配置教程（详细版）<em>mongodb怎么安装</em>橘子奶盖”的博客-CSDN博客</a></p><blockquote><p><strong>注意：</strong></p><p><strong>为了方便后续方便使用 mongod 命令，可以将 bin 目录配置到环境变量 Path 中</strong></p><p><strong>千万不要选中服务端窗口的内容 ，选中会停止服务，可以 敲回车 取消选中</strong></p></blockquote><h2 id="命令行交互"><a href="#命令行交互" class="headerlink" title="命令行交互"></a><strong>命令行交互</strong></h2><p>命令行交互一般是学习数据库的第一步，不过这些命令在后续用的比较少，所以大家了解即可</p><h3 id="数据库命令"><a href="#数据库命令" class="headerlink" title="数据库命令"></a><strong>数据库命令</strong></h3><p>显示所有的数据库</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure><p>切换到指定的数据库，如果数据库不存在会自动创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名</span><br></pre></td></tr></table></figure><p>显示当前所在的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure><p>删除当前数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 库名</span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h3 id="集合命令"><a href="#集合命令" class="headerlink" title="集合命令"></a><strong>集合命令</strong></h3><p>创建集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&#x27;集合名称&#x27;)</span><br></pre></td></tr></table></figure><p>显示当前数据库中的所有集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><p>删除某个集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.drop()</span><br></pre></td></tr></table></figure><p>重命名集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.renameCollection(&#x27;newName&#x27;)</span><br></pre></td></tr></table></figure><h3 id="文档命令"><a href="#文档命令" class="headerlink" title="文档命令"></a><strong>文档命令</strong></h3><p>插入文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.insert(文档对象);</span><br></pre></td></tr></table></figure><p>查询文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find(查询条件)</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>_id 是 mongodb 自动生成的唯一编号，用来唯一标识文档</em></strong></p></blockquote><p>更新文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.update(查询条件,新的文档)</span><br><span class="line">db.集合名.update(&#123;name:&#x27;张三&#x27;&#125;,&#123;$set:&#123;age:19&#125;&#125;)</span><br></pre></td></tr></table></figure><p>删除文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.remove(查询条件)</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h3><h5 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h5><blockquote><p><strong>用户注册</strong></p><p><strong>发布视频</strong></p><p><strong>发布商品</strong></p><p><strong>发朋友圈</strong></p><p><strong>发评论</strong></p><p><strong>发微博</strong></p><p><strong>发弹幕</strong></p><p><strong>…….</strong></p></blockquote><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a><strong>删除</strong></h5><blockquote><p><strong>删除评论</strong></p><p><strong>删除商品</strong></p><p><strong>删除文章</strong></p><p><strong>删除视频</strong></p><p><strong>删除微博</strong></p><p><strong>……</strong></p></blockquote><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a><strong>更新</strong></h5><blockquote><p><strong>更新个人信息</strong></p><p><strong>修改商品价格</strong></p><p><strong>修改文章内容</strong></p><p><strong>……</strong></p></blockquote><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a><strong>查询</strong></h5><blockquote><p><strong>商品列表</strong></p><p><strong>视频列表</strong></p><p><strong>朋友圈列表</strong></p><p><strong>微博列表</strong></p><p><strong>搜索功能</strong></p><p><strong>……</strong></p></blockquote><h3 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a><strong>Mongoose</strong></h3><h5 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a><strong>介绍</strong></h5><p>Mongoose 是一个对象文档模型库，官网 <strong><a href="http://www.mongoosejs.net/">http://www.mongoosejs.net/</a></strong></p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h5><p>方便使用代码操作 mongodb 数据库</p><h5 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a><strong>使用流程</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.安装mongoose</span></span><br><span class="line"><span class="comment">//2.导入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>)</span><br><span class="line"><span class="comment">//3.连接mongodb服务</span></span><br><span class="line"><span class="comment">//connect连接的意思  relife为数据库的名称</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/relife&#x27;</span>);</span><br><span class="line"><span class="comment">//4.设置回调 once绑定事件 事件回调函数只执行一次</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">once</span>(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="comment">//设置连接成功的回调</span></span><br><span class="line">    <span class="comment">// console.log(&quot;连接成功&quot;)</span></span><br><span class="line">    <span class="comment">//4.创建文档的结构对象</span></span><br><span class="line">    <span class="comment">//设置集合中文档的属性以及属性值的类型</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">BookSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">is_hot</span>: <span class="title class_">Boolean</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//5.创建模型对象 对文档操作的封装对象 第一个参数是集合名称 第二个参数是结构对象</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">BookModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;books&#x27;</span>, <span class="title class_">BookSchema</span>)</span><br><span class="line">    <span class="comment">//6.新增</span></span><br><span class="line">    <span class="title class_">BookModel</span>.<span class="title function_">create</span>([</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;西游记&#x27;</span>,</span><br><span class="line">            <span class="attr">author</span>: <span class="string">&#x27;吴承恩&#x27;</span>,</span><br><span class="line">            <span class="attr">price</span>: <span class="number">19.9</span>,</span><br><span class="line">            <span class="attr">is_hot</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ], <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否有问题</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有出错，则输出插入后的文档对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.关闭数据库连接</span></span><br><span class="line">        mongoose.<span class="title function_">disconnect</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="comment">//设置连接错误的回调</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接失败&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="comment">//设置连接关闭的回调</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已经关闭数据库&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a><strong>字段类型</strong></h5><p>文档结构可选的常用字段类型列表</p><div class="table-container"><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>字符串</td></tr><tr><td>Number</td><td>数字</td></tr><tr><td>Boolean</td><td>布尔值</td></tr><tr><td>Array</td><td>数组，也可以使用 [] 来标识</td></tr><tr><td>Date</td><td>日期</td></tr><tr><td>Buffer</td><td>Buffer 对象</td></tr><tr><td>Mixed</td><td>任意类型，需要使用 <strong>mongoose.Schema.Types.Mixed</strong> 指定</td></tr><tr><td>ObjectId</td><td>对象 ID，需要使用 <strong>mongoose.Schema.Types.ObjectId</strong> 指定</td></tr><tr><td>Decimal128</td><td>高精度数字，需要使用 <strong>mongoose.Schema.Types.Decimal128</strong> 指定</td></tr></tbody></table></div><h3 id="字段值验证"><a href="#字段值验证" class="headerlink" title="字段值验证"></a><strong>字段值验证</strong></h3><p>Mongoose 有一些内建验证器，可以对字段值进行验证</p><h5 id="必填项"><a href="#必填项" class="headerlink" title="必填项"></a><strong>必填项</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">required</span>: <span class="literal">true</span> <span class="comment">// 设置必填项</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a><strong>默认值</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">author</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">default</span>: <span class="string">&#x27;匿名&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a><strong>枚举值</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gender</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">enum</span>: [<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>] <span class="comment">//设置的值必须是数组中的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="唯一值"><a href="#唯一值" class="headerlink" title="唯一值"></a><strong>唯一值</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>: &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line"><span class="attr">unique</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>unique 需要 重建集合 才能有效果</em></strong></p><p><strong><em>永远不要相信用户的输入</em></strong></p></blockquote><h3 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a><strong>CURD</strong></h3><p>数据库的基本操作包括四个，增加（create），删除（delete），修改（update），查（read）</p><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a><strong>增加</strong></h5><p>插入一条</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line"><span class="attr">title</span>:<span class="string">&#x27;给我一首歌的时间&#x27;</span>,</span><br><span class="line"><span class="attr">author</span>: <span class="string">&#x27;Jay&#x27;</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, data</span>)&#123;</span><br><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line"><span class="comment">//插入后的数据对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>批量插入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="comment">//2.链接mongodb数据库 connect 连接</span></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://127.0.0.1:27017/project&#x27;</span>);</span><br><span class="line"><span class="comment">//3.设置连接的回调</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;open&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//4.声明文档结构</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PhoneSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">        <span class="attr">brand</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">color</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">price</span>:<span class="title class_">Number</span>,</span><br><span class="line"><span class="attr">tags</span>:<span class="title class_">Array</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//6.创建模型对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PhoneModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="title class_">PhoneSchema</span>);</span><br><span class="line"><span class="title class_">PhoneModel</span>.<span class="title function_">insertMany</span>([</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">brand</span>:<span class="string">&#x27;华为&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>:<span class="string">&#x27;灰色&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>:<span class="number">2399</span>,</span><br><span class="line">    <span class="attr">tags</span>:[<span class="string">&#x27;电量大&#x27;</span>,<span class="string">&#x27;屏幕大&#x27;</span>,<span class="string">&#x27;信号好&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">brand</span>:<span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>:<span class="string">&#x27;白色&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>:<span class="number">2099</span>,</span><br><span class="line">    <span class="attr">tags</span>:[<span class="string">&#x27;电量大&#x27;</span>,<span class="string">&#x27;屏幕大&#x27;</span>,<span class="string">&#x27;信号好&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">],<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>);</span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a><strong>删除</strong></h5><p>删除一条数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">deleteOne</span>(&#123;<span class="attr">_id</span>:<span class="string">&#x27;5dd65f32be6401035cb5b1ed&#x27;</span>&#125;, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>批量删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">deleteMany</span>(&#123;<span class="attr">author</span>:<span class="string">&#x27;Jay&#x27;</span>&#125;, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a><strong>更新</strong></h5><p>更新一条数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">updateOne</span>(&#123;<span class="attr">author</span>: <span class="string">&#x27;JJ Lin&#x27;</span>&#125;, &#123;<span class="attr">author</span>: <span class="string">&#x27;林俊杰&#x27;</span>&#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>批量更新数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">updateMany</span>(&#123;<span class="attr">author</span>: <span class="string">&#x27;Leehom Wang&#x27;</span>&#125;, &#123;<span class="attr">author</span>: <span class="string">&#x27;王力宏&#x27;</span>&#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a><strong>查询</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">author</span>: <span class="string">&#x27;王力宏&#x27;</span>&#125;, <span class="keyword">function</span>(<span class="params">err, data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//根据 id 查询数据</span></span><br><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">findById</span>(<span class="string">&#x27;5dd662b5381fc316b44ce167&#x27;</span>,<span class="keyword">function</span>(<span class="params">err, data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>批量查询数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不加条件查询</span></span><br><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">err, data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//加条件查询</span></span><br><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">find</span>(&#123;<span class="attr">author</span>: <span class="string">&#x27;王力宏&#x27;</span>&#125;, <span class="keyword">function</span>(<span class="params">err, data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a><strong>条件控制</strong></h3><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><strong>运算符</strong></h5><p>在 mongodb 不能 &gt; &lt; &gt;= &lt;= !== 等运算符，需要使用替代符号</p><blockquote><p><strong>> 使用 $gt</strong></p><p><strong>&lt; 使用 $lt</strong></p><p><strong>>= 使用 $gte</strong></p><p><strong>&lt;= 使用 $lte</strong></p><p><strong>!== 使用 $ne</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">students</span>.<span class="title function_">find</span>(&#123;<span class="attr">id</span>:&#123;<span class="attr">$gt</span>:<span class="number">3</span>&#125;&#125;); id号比<span class="number">3</span>大的所有的记录</span><br></pre></td></tr></table></figure><h5 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a><strong>逻辑运算</strong></h5><p><strong>$or</strong> 逻辑或的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">students</span>.<span class="title function_">find</span>(&#123;<span class="attr">$or</span>:[&#123;<span class="attr">age</span>:<span class="number">18</span>&#125;,&#123;<span class="attr">age</span>:<span class="number">24</span>&#125;]&#125;);</span><br></pre></td></tr></table></figure><p><strong>$and</strong> 逻辑与的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;$and: [&#123;age: &#123;$lt:20&#125;&#125;, &#123;age: &#123;$gt: 15&#125;&#125;]&#125;);</span><br></pre></td></tr></table></figure><h5 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a><strong>正则匹配</strong></h5><p>条件中可以直接使用 JS 的正则语法，通过正则可以进行模糊查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;name:/imissyou/&#125;);</span><br></pre></td></tr></table></figure><h3 id="个性化读取"><a href="#个性化读取" class="headerlink" title="个性化读取"></a><strong>个性化读取</strong></h3><h5 id="字段筛选"><a href="#字段筛选" class="headerlink" title="字段筛选"></a><strong>字段筛选</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0:不要的字段</span></span><br><span class="line"><span class="comment">//1:要的字段</span></span><br><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">find</span>().<span class="title function_">select</span>(&#123;<span class="attr">_id</span>:<span class="number">0</span>,<span class="attr">title</span>:<span class="number">1</span>&#125;).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a><strong>数据排序</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort 排序</span></span><br><span class="line"><span class="comment">//1:升序</span></span><br><span class="line"><span class="comment">//-1:倒序</span></span><br><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">find</span>().<span class="title function_">sort</span>(&#123;<span class="attr">hot</span>:<span class="number">1</span>&#125;).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="数据截取"><a href="#数据截取" class="headerlink" title="数据截取"></a><strong>数据截取</strong></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//skip 跳过 limit 限定</span></span><br><span class="line"><span class="title class_">SongModel</span>.<span class="title function_">find</span>().<span class="title function_">skip</span>(<span class="number">10</span>).<span class="title function_">limit</span>(<span class="number">10</span>).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    mongoose.<span class="property">connection</span>.<span class="title function_">close</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="图形化管理工具"><a href="#图形化管理工具" class="headerlink" title="图形化管理工具"></a><strong>图形化管理工具</strong></h3><p>我们可以使用图形化的管理工具来对 Mongodb 进行交互，这里演示两个图形化工具</p><blockquote><p>Robo 3T 免费 <strong><a href="https://github.com/Studio3T/robomongo/releases">https://github.com/Studio3T/robomongo/releases</a></strong></p><p>Navicat 收费 <strong><a href="https://www.navicat.com.cn/">https://www.navicat.com.cn/</a></strong></p></blockquote><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a><strong>接口</strong></h1><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a><strong>简介</strong></h3><h4 id="接口是什么"><a href="#接口是什么" class="headerlink" title="接口是什么"></a><strong>接口是什么</strong></h4><p>接口是 <strong>前后端通信的桥梁</strong></p><p>简单理解：一个接口就是 <strong>服务中的一个路由规则</strong> ，根据请求响应结果</p><p>接口的英文单词是 API (Application Program Interface)，所以有时也称之为 <strong>API 接口</strong></p><p>这里的接口指的是『数据接口』， <strong>与编程语言（Java，Go 等）中的接口语法不同</strong></p><h4 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a><strong>接口的作用</strong></h4><p><strong><em>实现 前后端通信</em></strong></p><h4 id="接口的开发与调用"><a href="#接口的开发与调用" class="headerlink" title="接口的开发与调用"></a><strong>接口的开发与调用</strong></h4><p>大多数接口都是由 <strong>后端工程师</strong> 开发的， <strong>开发语言不限</strong></p><p>一般情况下接口都是由 <strong>前端工程师</strong> 调用的，但有时 <strong>后端工程师也会调用接口</strong> ，比如短信接口，支付接口等</p><h4 id="接口的组成"><a href="#接口的组成" class="headerlink" title="接口的组成"></a><strong>接口的组成</strong></h4><p>一个接口一般由如下几个部分组成</p><blockquote><p><strong>请求方法</strong></p><p><strong>接口地址（URL）</strong></p><p><strong>请求参数</strong></p><p><strong>响应结果</strong></p><blockquote><p>一个接口示例 <strong><a href="https://www.free-api.com/doc/325">https://www.free-api.com/doc/325</a></strong></p></blockquote></blockquote><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230413130438765.png" alt="image-20230413130438765"></p><blockquote><p>　　体验一下：<strong><a href="https://api.asilu.com/idcard/?id=371522199111299668">https://api.asilu.com/idcard/?id=371522199111299668</a></strong></p></blockquote><h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a><strong>RESTful API</strong></h3><p>RESTful API 是一种特殊风格的接口，主要特点有如下几个：</p><ul><li><p>URL 中的路径表示 <strong>资源</strong> ，路径中不能有 <strong>动词</strong> ，例如 <strong>create , delete , update</strong> 等这些都不能有</p></li><li><p>操作资源要与 <strong>HTTP 请求方法</strong> 对应</p></li><li><p>操作结果要与 <strong>HTTP 响应状态码</strong> 对应</p></li></ul><p>规则示例：</p><div class="table-container"><table><thead><tr><th>操作</th><th>请求类型</th><th>URL</th><th>返回</th></tr></thead><tbody><tr><td>新增歌曲</td><td>POST</td><td>/song</td><td>返回新生成的歌曲信息</td></tr><tr><td>删除歌曲</td><td>DELETE</td><td>/song/10</td><td>返回一个空文档</td></tr><tr><td>修改歌曲</td><td>PUT</td><td>/song/10</td><td>返回更新后的歌曲信息</td></tr><tr><td>修改歌曲</td><td>PATCH</td><td>/song/10</td><td>返回更新后的歌曲信息</td></tr><tr><td>获取所有歌曲</td><td>GET</td><td>/song</td><td>返回歌曲列表数组</td></tr><tr><td>获取单个歌曲</td><td>GET</td><td>/song/10</td><td>返回单个歌曲信息</td></tr></tbody></table></div><blockquote><p>扩展阅读：<strong><a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html">https://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></strong></p></blockquote><h3 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a><strong>json-server</strong></h3><p>json-server 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务</p><p>官方地址: <strong><a href="https://github.com/typicode/json-server">https://github.com/typicode/json-server</a></strong></p><p>操作步骤：</p><p>1.全局安装 json-server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g json-server</span><br></pre></td></tr></table></figure><p>2.创建 JSON 文件（db.json），编写基本结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;song&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;干杯&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;singer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;五月天&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;当&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;singer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;动力火车&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;不能说的秘密&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;singer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;周杰伦&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>3.以 JSON 文件所在文件夹作为工作目录 ，执行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server --watch db.json</span><br></pre></td></tr></table></figure><p>默认监听端口为 <strong>3000</strong></p><h3 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a><strong>接口测试工具</strong></h3><p>介绍几个接口测试工具:</p><p>apipost <strong><a href="https://www.apipost.cn/">https://www.apipost.cn/</a></strong> (中文)</p><p>apifox <strong><a href="https://www.apifox.cn/">https://www.apifox.cn/</a></strong> (中文)</p><p>postman <strong><a href="https://www.postman.com/">https://www.postman.com/</a></strong> (英文)</p><h1 id="会话控制"><a href="#会话控制" class="headerlink" title="会话控制"></a><strong>会话控制</strong></h1><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p>所谓会话控制就是 <strong>对会话进行控制</strong></p><p>HTTP 是一种无状态的协议，它没有办法区分多次的请求是否来自于同一个客户端， 无法区分用户</p><p>而产品中又大量存在的这样的需求，所以我们需要通过 会话控制 来解决该问题</p><p>常见的会话控制技术有三种：</p><blockquote><p><strong>cookie</strong></p><p><strong>session</strong></p><p><strong>token</strong></p></blockquote><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a><strong>cookie</strong></h2><h3 id="cookie-是什么"><a href="#cookie-是什么" class="headerlink" title="cookie 是什么"></a><strong>cookie</strong> <strong>是什么</strong></h3><p>cookie 是 HTTP 服务器发送到用户浏览器并保存在本地的一小块数据</p><p><strong>cookie 是保存在浏览器端的一小块数据</strong></p><p><strong>cookie 是按照域名划分保存的</strong></p><p>简单示例：</p><div class="table-container"><table><thead><tr><th>域名</th><th>cookie</th></tr></thead><tbody><tr><td><strong>www.baidu.com</strong></td><td>a=100; b=200</td></tr><tr><td><strong>www.bilibili.com</strong></td><td>xid=1020abce121; hm=112411213</td></tr><tr><td>jd.com</td><td>x=100; ocw=12414cce</td></tr></tbody></table></div><h3 id="cookie-的特点"><a href="#cookie-的特点" class="headerlink" title="cookie 的特点"></a><strong>cookie</strong> <strong>的特点</strong></h3><p>浏览器向服务器发送请求时，会自动将 <strong>当前域名下</strong> 可用的 cookie 设置在请求头中，然后传递给服务器</p><p>这个请求头的名字也叫 <strong>cookie</strong> ，所以将 <strong>cookie 理解为一个 HTTP 的请求头也是可以的</strong></p><h3 id="cookie-的运行流程"><a href="#cookie-的运行流程" class="headerlink" title="cookie 的运行流程"></a><strong>cookie</strong> <strong>的运行流程</strong></h3><p>填写账号和密码校验身份，校验通过后下发 cookie</p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230414190037036.png" alt="image-20230414190037036"></p><p>有了cookie之后，后续向服务器发送请求时，就会自动携带cookie</p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230414190117602.png" alt="image-20230414190117602"></p><h3 id="浏览器操作-cookie"><a href="#浏览器操作-cookie" class="headerlink" title="浏览器操作 cookie"></a><strong>浏览器操作</strong> <strong>cookie</strong></h3><p>浏览器操作 cookie 的操作，使用相对较少，大家了解即可</p><ol><li><p>禁用所有 cookie</p></li><li><p>删除 cookie</p></li><li><p>查看 cookie</p></li></ol><h3 id="cookie-的代码操作"><a href="#cookie-的代码操作" class="headerlink" title="cookie 的代码操作"></a><strong>cookie</strong> <strong>的代码操作</strong></h3><p>express 中可以使用 <strong>cookie-parser</strong> 进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express =<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//1. 安装 cookie-parser npm i cookie-parser</span></span><br><span class="line"><span class="comment">//2. 引入 cookieParser 包</span></span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//3. 设置 cookieParser 中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line"><span class="comment">//4-1 设置 cookie</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/set-cookie&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 不带时效性</span></span><br><span class="line">    response.<span class="title function_">cookie</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>);</span><br><span class="line">    <span class="comment">// 带时效性</span></span><br><span class="line">    response.<span class="title function_">cookie</span>(<span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;23123456@qq.com&#x27;</span>, &#123;<span class="attr">maxAge</span>: <span class="number">5</span>*<span class="number">60</span>*<span class="number">1000</span> &#125;);</span><br><span class="line">    <span class="comment">//响应</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;Cookie的设置&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//4-2 读取 cookie</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/get-cookie&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//读取 cookie</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">cookies</span>);</span><br><span class="line">    <span class="comment">//响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;Cookie的读取&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4-3 删除cookie</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/delete-cookie&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    response.<span class="title function_">clearCookie</span>(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">    <span class="comment">//响应</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;cookie 的清除&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//4. 启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>不同浏览器中的 cookie 是相互独立的，不共享</strong></p></blockquote><h2 id="session"><a href="#session" class="headerlink" title="session"></a><strong>session</strong></h2><h3 id="session-是什么"><a href="#session-是什么" class="headerlink" title="session 是什么"></a><strong>session</strong> <strong>是什么</strong></h3><p>session 是保存在 <strong>服务器端的一块儿数据</strong> ，保存当前访问用户的相关信息</p><h3 id="session-的作用"><a href="#session-的作用" class="headerlink" title="session 的作用"></a><strong>session</strong> <strong>的作用</strong></h3><p>实现会话控制，可以识别用户的身份，快速获取当前用户的相关信息</p><h3 id="session-运行流程"><a href="#session-运行流程" class="headerlink" title="session 运行流程"></a><strong>session</strong> <strong>运行流程</strong></h3><p>填写账号和密码校验身份，校验通过后创建 <strong>session 信息</strong> ，然后将 <strong>session_id</strong> 的值通过响应头返回给浏览器</p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230414190439206.png" alt="image-20230414190439206"></p><p>有了 cookie，下次发送请求时会自动携带 cookie，服务器通过 <strong>cookie</strong> 中的 <strong>session_id</strong> 的值确定用户的身份</p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230414190505929.png" alt="image-20230414190505929"></p><h3 id="session-的代码操作"><a href="#session-的代码操作" class="headerlink" title="session 的代码操作"></a><strong>session</strong> <strong>的代码操作</strong></h3><p>express 中可以使用 <strong>express-session</strong> 对 session 进行操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//1. 安装包 npm i express-session connect-mongo</span></span><br><span class="line"><span class="comment">//2. 引入 express-session connect-mongo</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MongoStore</span> = <span class="built_in">require</span>(<span class="string">&#x27;connect-mongo&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//3. 设置 session 的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;sid&#x27;</span>, <span class="comment">//设置cookie的name，默认值是：connect.sid</span></span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;atguigu&#x27;</span>, <span class="comment">//参与加密的字符串（又称签名）</span></span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">false</span>, <span class="comment">//是否为每次请求都设置一个cookie用来存储session的id</span></span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">true</span>, <span class="comment">//是否在每次请求时重新保存session</span></span><br><span class="line">    <span class="attr">store</span>: <span class="title class_">MongoStore</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">mongoUrl</span>: <span class="string">&#x27;mongodb://127.0.0.1:27017/project&#x27;</span> <span class="comment">//数据库的连接配置</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="attr">cookie</span>: &#123;</span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span>, <span class="comment">// 开启后前端无法通过 JS 操作</span></span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">300</span> <span class="comment">// 这一条 是控制 sessionID 的过期时间的！！！</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 session</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置session</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="property">username</span> = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">email</span> = <span class="string">&#x27;zhangsan@qq.com&#x27;</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取 session</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;session的信息&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">session</span>.<span class="property">username</span>);</span><br><span class="line"><span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`你好 <span class="subst">$&#123;req.session.username&#125;</span>`</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;登录 注册&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//销毁 session</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//销毁session</span></span><br><span class="line">    <span class="comment">// res.send(&#x27;设置session&#x27;);</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">destroy</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;成功退出&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动, 端口 &#x27;</span> + <span class="number">3000</span> + <span class="string">&#x27; 监听中...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="session-和-cookie-的区别"><a href="#session-和-cookie-的区别" class="headerlink" title="session 和 cookie 的区别"></a><strong>session</strong> <strong>和</strong> <strong>cookie</strong> <strong>的区别</strong></h3><blockquote><p>cookie 和 session 的区别主要有如下几点：</p><ol><li><p><em>存在的位置</em></p><p><strong>cookie：浏览器端</strong></p><p><strong>session：服务端</strong></p></li><li><p><em>安全性</em></p><p><strong>cookie 是以明文的方式存放在客户端的，安全性相对较低</strong></p><p><strong>session 存放于服务器中，所以安全性 相对 较好</strong></p></li><li><p><em>网络传输量</em></p><p><strong>cookie 设置内容过多会增大报文体积， 会影响传输效率</strong></p><p><strong>session 数据存储在服务器，只是通过 cookie 传递 id，所以不影响传输效率</strong></p></li><li><p><em>存储限制</em></p><p><strong>浏览器限制单个 cookie 保存的数据不能超过 4K ，且单个域名下的存储数量也有限制</strong></p><p><strong>session 数据存储在服务器中，所以没有这些限制</strong></p></li></ol></blockquote><h2 id="token"><a href="#token" class="headerlink" title="token"></a><strong>token</strong></h2><h3 id="token-是什么"><a href="#token-是什么" class="headerlink" title="token 是什么"></a><strong>token</strong> <strong>是什么</strong></h3><p>token 是服务端生成并返回给 HTTP 客户端的一串加密字符串， <strong>token</strong> 中保存着 <strong>用户信息</strong></p><h3 id="token-的作用"><a href="#token-的作用" class="headerlink" title="token 的作用"></a><strong>token</strong> <strong>的作用</strong></h3><p>实现会话控制，可以识别用户的身份，主要用于移动端 APP</p><h3 id="token-的工作流程"><a href="#token-的工作流程" class="headerlink" title="token 的工作流程"></a><strong>token</strong> <strong>的工作流程</strong></h3><p>填写账号和密码校验身份，校验通过后响应 token，token 一般是在响应体中返回给客户端的</p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230414190841259.png" alt="image-20230414190841259"></p><p>后续发送请求时，需要手动将 token 添加在请求报文中，一般是放在请求头中</p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230414190855012.png" alt="image-20230414190855012"></p><h3 id="token-的特点"><a href="#token-的特点" class="headerlink" title="token 的特点"></a><strong>token</strong> <strong>的特点</strong></h3><blockquote><p>服务端压力更小</p><p>​    <strong>数据存储在客户端</strong></p><p>相对更安全</p><p>​    <strong>数据加密</strong></p><p>​    <strong>可以避免 CSRF（跨站请求伪造）</strong></p><p>扩展性更强</p><p>​    <strong>服务间可以共享</strong></p><p>​    <strong>增加服务节点更简单</strong></p></blockquote><h2 id="JWT-jsonwebToken"><a href="#JWT-jsonwebToken" class="headerlink" title="JWT(jsonwebToken)"></a><strong>JWT(jsonwebToken)</strong></h2><p>JWT（JSON Web Token ）是目前最流行的跨域认证解决方案，可用于基于 <strong>token</strong> 的身份验证JWT 使 token 的生成与校验更规范</p><p>我们可以使用 jsonwebtoken 包 来操作 token</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 jsonwebtokan</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="comment">//创建 token</span></span><br><span class="line"><span class="comment">// jwt.sign(数据, 加密字符串, 配置对象)</span></span><br><span class="line"><span class="keyword">let</span> token = jwt.<span class="title function_">sign</span>(&#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;, <span class="string">&#x27;atguigu&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">expiresIn</span>: <span class="number">60</span> <span class="comment">//单位是 秒</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//解析 token</span></span><br><span class="line">jwt.<span class="title function_">verify</span>(token, <span class="string">&#x27;atguigu&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;校验失败~~&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>扩展阅读：<strong><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></strong></p></blockquote><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a><strong>附录</strong></h1><h3 id="本地域名"><a href="#本地域名" class="headerlink" title="本地域名"></a><strong>本地域名</strong></h3><p>所谓本地域名就是 <strong>只能在本机使用的域名</strong> ，一般在开发阶段使用</p><h4 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a><strong>操作流程</strong></h4><p>编辑文件 <strong>C:\Windows\System32\drivers\etc\hosts</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.baidu.com</span><br></pre></td></tr></table></figure><p>如果修改失败， 可以修改该文件的权限</p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230414191213112.png" alt="image-20230414191213112"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h4><p>在地址栏输入 <strong>域名</strong> 之后，浏览器会先进行 DNS（Domain Name System） 查询，获取该域名对应的 IP 地址</p><p>请求会发送到 DNS 服务器，可以 <strong>根据域名返回 IP 地址</strong></p><p>可以通过 <strong>ipconfig /all</strong> 查看本机的 DNS 服务器</p><p><strong>hosts</strong> 文件也可以设置域名与 IP 的映射关系，在发送请求前，可以通过该文件获取域名的 IP 地址</p><hr><h2 id="理解-Node-js-中的回调-Callback-函数"><a href="#理解-Node-js-中的回调-Callback-函数" class="headerlink" title="理解 Node.js 中的回调(Callback)函数"></a>理解 Node.js 中的回调(Callback)函数</h2><h3 id="分类-编程技术"><a href="#分类-编程技术" class="headerlink" title="分类 编程技术"></a><em>分类</em> <a href="https://www.runoob.com/w3cnote_genre/code">编程技术</a></h3><p>究竟什么是回调函数(Callback)，网上有许许多多的文章，大部分看得人云里雾外，这些文章大概分成两类，第一类堆砌了太多的术语，基本上不明白术语就没法看，另一类反过来，不讲术语，完全是举一些脱离编程的生活化例子来类比，看的人更加晕头转向。</p><p>作为JS的核心，回调函数和异步执行是紧密相关的，不跨过这个门槛，很多回调代码能把人看晕！</p><blockquote><p>引用stack overflow 上大神的描述 其实callback 很简单也很纯粹:</p><p><strong>A “callback” is any function that is called by another function which takes the first function as a parameter. （在一个函数中调用另外一个函数就是callback）</strong></p></blockquote><p>以下是一个最简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">aa</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> + aa</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line"><span class="keyword">var</span> c=<span class="number">0</span></span><br><span class="line">c = <span class="title function_">b</span>(<span class="title function_">a</span>()) <span class="comment">//A是个函数，但它又作为一个参数在B函数中被调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">//结果显示3</span></span><br></pre></td></tr></table></figure><p>以上例子极易理解，下面再引入另一个概念：<strong>异步</strong></p><p>看以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bb</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        a=<span class="number">6</span></span><br><span class="line">    &#125;, time);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//调用:</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="title function_">timer</span>(<span class="number">3000</span>)</span><br><span class="line"><span class="title function_">bb</span>(a)</span><br></pre></td></tr></table></figure><p>以上代码很简单，我们需要的逻辑是，全局变量a初值为0，然后过3秒后，让它为6，然后再打印出来，看上去，上面的代码没有问题，理论上符合我们的逻辑需求，但却发现结果是这样：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>咋回事？</p><p>因为JS是一种异步执行语言，尽管timer函数内让a=6了，但是JS不会死等时间结束再跳出函数，而是马上就会执行下一步语句(即调用bb函数)，但这时候3秒钟根本就没结束，a还没有被重新赋值，所以打印出来还是为0。</p><p>用回调函数可以解决这个问题:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bb</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params">time, callback</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        a = <span class="number">6</span></span><br><span class="line">        <span class="title function_">callback</span>(a);</span><br><span class="line">    &#125;, time);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//调用:</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="title function_">timer</span>(<span class="number">3000</span>,bb)</span><br></pre></td></tr></table></figure><p>这次，在timer函数中添加了一个关键字callback，意思就是说此处不是一个普通的参数，而是一个函数名，打起精神，关键的地方来了：</p><blockquote><p><strong><em>一般而言，函数的形参是指由外往内向函数体传递变量的入口，但此处加了callback后则完全相反，它是指函数体在完成某种使命后调用外部函数的出口！这时候应该明白什么叫”回调”了吧，也就是回头调用外部函数的意思。</em></strong></p></blockquote><p>在本例中，当3秒钟到了后，首先a=6，然后通过关键字callback(a)调用了函数bb(x)，结果显示：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>这个逻辑，符合我们的需求。</p><p>在写法上，也可以不需要定义函数bb, 直接在调用timer的时候写成function形式,把调用部分改成这样也可以，效果完全一样:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="title function_">timer</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这种写法函数名都不需要了（术语称为”匿名函数”），在nodejs代码中更为常见也更好理解，翻译成自然语言就是：定时3秒，完成后再回头调用function(x)里面的内容。</p><p>nodejs编程中大量使用了异步编程技术，这是为了高效使用硬件，同时也可以不造成同步阻塞。其实nodejs在底层还是通过多线程技术实现的异步操作，但普通用户并不需要深究它的实现方法，我们只要做好我们的异步处理即可。</p>]]></content>
      
      
      <categories>
          
          <category> -拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios基础</title>
      <link href="/2023/05/13/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/13/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a><em>Axios</em></h1><h1 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h1><h1 id="json-server-的简单使用"><a href="#json-server-的简单使用" class="headerlink" title="json-server 的简单使用"></a>json-server 的简单使用</h1><p>json-server用于模拟服务端接口数据，可以根据json数据建立一个完整的web服务。</p><h3 id="安装json-server"><a href="#安装json-server" class="headerlink" title="安装json-server"></a>安装json-server</h3><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ftypicode%2Fjson-server">github上的json-server地址</a></p><p>安装json-server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g json-server</span><br></pre></td></tr></table></figure><p>查看版本号，安装成功</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">json-server -v</span><br><span class="line"><span class="number">0.17</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="创建db-json"><a href="#创建db-json" class="headerlink" title="创建db.json"></a>创建db.json</h3><p>在文件夹下创建一个db.json文件，存放一些数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;posts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typicode&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;some comment&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;profile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typicode&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="启动json-server"><a href="#启动json-server" class="headerlink" title="启动json-server"></a>启动json-server</h3><p>在文件夹下，直接在地址栏cmd，进入终端。执行启动json-server命令。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server <span class="attr">--watch</span> .\db<span class="selector-class">.json</span> <span class="attr">--port</span> <span class="number">5222</span></span><br></pre></td></tr></table></figure><p>json-server 已经启动成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/27344388-26caced4da4b0d6b.png?imageMogr2/auto-orient/strip|imageView2/2/w/675/format/webp" alt="img"></p><h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><p>在浏览器中输入地址：<a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A%2B">http://localhost:+</a>端口号/接口名称，即可查看数据。<br>例如：输入<a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A5000%2Fcomments">http://localhost:5000/comments</a></p><p><img src="https://upload-images.jianshu.io/upload_images/27344388-4b559d6a3bbaebff.png?imageMogr2/auto-orient/strip|imageView2/2/w/355/format/webp" alt="img"></p><h3 id="public目录"><a href="#public目录" class="headerlink" title="public目录"></a>public目录</h3><p>在和db.json同级的目录下，创建public目录，里面可以存放一些静态资源。</p><p><img src="https://upload-images.jianshu.io/upload_images/27344388-4788f349ed752fa9.png?imageMogr2/auto-orient/strip|imageView2/2/w/335/format/webp" alt="img"></p><h1 id="使用axios-访问测试"><a href="#使用axios-访问测试" class="headerlink" title="使用axios 访问测试"></a>使用<a href="https://so.csdn.net/so/search?q=axios&amp;spm=1001.2101.3001.7020">axios</a> 访问测试</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testGet()&quot;</span>&gt;</span>GET请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testPost()&quot;</span>&gt;</span>POST请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testPut()&quot;</span>&gt;</span>PUT请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;testDelete()&quot;</span>&gt;</span>DELETE请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">testGet</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/posts&#x27;</span>) <span class="comment">// 返回一个数组，数组里有两个对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// axios.get(&#x27;http://localhost:3000/posts/1&#x27;) // 返回一个对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// axios.get(&#x27;http://localhost:3000/posts?id=1&#x27;) // 返回一个数组，数组里有一个对象</span></span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/posts get&#x27;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">testPost</span>(<span class="params"></span>) &#123; <span class="comment">// 添加数据</span></span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/posts&#x27;</span>, &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;json-server3&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;typicode&quot;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/posts put&#x27;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">testPut</span>(<span class="params"></span>) &#123; <span class="comment">// 更新数据</span></span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">put</span>(<span class="string">&#x27;http://localhost:3000/posts/3&#x27;</span>, &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;json-server_put&quot;</span>, <span class="string">&quot;author&quot;</span>: <span class="string">&quot;typicode&quot;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/posts post&#x27;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">testDelete</span>(<span class="params"></span>) &#123; <span class="comment">// 删除数据</span></span></span><br><span class="line"><span class="language-javascript">      axios.<span class="title function_">delete</span>(<span class="string">&#x27;http://localhost:3000/posts/3&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;/posts delete&#x27;</span>, response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="XHR-的-ajax-封装-简单版axios"><a href="#XHR-的-ajax-封装-简单版axios" class="headerlink" title="XHR 的 ajax 封装 (简单版axios)"></a>XHR 的 <a href="https://so.csdn.net/so/search?q=ajax&amp;spm=1001.2101.3001.7020">ajax</a> 封装 (简单版axios)</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>函数的返回值为<code>promise</code>, 成功的结果为<code>response</code>, 失败的结果为<code>error</code></li><li>能处理多种类型的请求: GET/POST/PUT/DELETE</li><li>函数的参数为一个配置对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求地址</span></span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求方式GET/POST/PUT/DELETE</span></span><br><span class="line"><span class="attr">params</span>: &#123;&#125;, <span class="comment">// GET/DELETE 请求的 query 参数</span></span><br><span class="line"><span class="attr">data</span>: &#123;&#125;, <span class="comment">// POST/PUT 请求的请求体参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    4.响应 json数据 自动解析为 js的对象/数组</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">axios</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  url,</span></span><br><span class="line"><span class="params">  method=<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="params">  params=&#123;&#125;,</span></span><br><span class="line"><span class="params">  data=&#123;&#125;</span></span><br><span class="line"><span class="params">&#125;</span>)&#123;</span><br><span class="line">  <span class="comment">// 返回一个promise对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理method 转大写</span></span><br><span class="line">    method = method.<span class="title function_">toUpperCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 query参数（拼接到url上）id=1&amp;xxx=abc</span></span><br><span class="line">    <span class="keyword">let</span> queryString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      queryString += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>&amp;`</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span>(queryString)&#123;</span><br><span class="line">      <span class="comment">// 去除最后的&#x27;&amp;&#x27;</span></span><br><span class="line">      queryString = queryString.<span class="title function_">substring</span>(<span class="number">0</span>, queryString.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line">      <span class="comment">// 接到url</span></span><br><span class="line">      url += <span class="string">&#x27;?&#x27;</span> + queryString</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 执行异步Ajax请求</span></span><br><span class="line">    <span class="comment">// 创建xhr对象</span></span><br><span class="line">    <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 打开连接（初始化请求，没有请求）</span></span><br><span class="line">    request.<span class="title function_">open</span>(method, url, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="keyword">if</span>(method === <span class="string">&#x27;GET&#x27;</span> || method === <span class="string">&#x27;DELETE&#x27;</span>)&#123;</span><br><span class="line">      request.<span class="title function_">send</span>()<span class="comment">// undefined</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">&#x27;POST&#x27;</span> || method === <span class="string">&#x27;PUT&#x27;</span>)&#123;</span><br><span class="line">      <span class="comment">// 设置请求头，告诉服务器请求体的格式是json</span></span><br><span class="line">      request.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;appliaction/json;charset=utf-8&#x27;</span>); </span><br><span class="line">      <span class="comment">// 发送json格式请求参数</span></span><br><span class="line">      request.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)); <span class="comment">// 异步执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定状态改变的监听</span></span><br><span class="line">    request.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 同步执行</span></span><br><span class="line">      <span class="comment">// 如果请求没有完成，直接结束</span></span><br><span class="line">      <span class="keyword">if</span> (request.<span class="property">readyState</span> !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果响应状态码在[200, 300)之间代表成功，否则失败</span></span><br><span class="line">      <span class="keyword">const</span> &#123;status, statusText&#125; = request</span><br><span class="line">      <span class="keyword">if</span>( status&gt;= <span class="number">200</span> &amp;&amp; status&lt;=<span class="number">299</span>) &#123;<span class="comment">// 2.1 如果请求成功，调用resolve()</span></span><br><span class="line">        <span class="comment">// 准备结果数据对象response</span></span><br><span class="line">        <span class="keyword">const</span> response = &#123;</span><br><span class="line">          <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(request.<span class="property">response</span>),</span><br><span class="line">          status,</span><br><span class="line">          statusText</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title function_">resolve</span>(response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;<span class="comment">// 2.2 如果请求失败，调用reject()</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;request error status is &#x27;</span> + status));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. GET请求：从服务器端获取数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testGet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">xxx</span>: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. POST请求：向服务器端添加数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testPost</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: <span class="string">&quot;json-server_post&quot;</span>,</span><br><span class="line">      <span class="string">&quot;author&quot;</span>: <span class="string">&quot;typicode_post&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. PUT请求：服务器更新数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testPut</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/1&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: <span class="string">&quot;json-server_put&quot;</span>,</span><br><span class="line">      <span class="string">&quot;author&quot;</span>: <span class="string">&quot;typicode_put&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. DELETE请求：服务器删除数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testDelete</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="axios-的理解和使用"><a href="#axios-的理解和使用" class="headerlink" title="axios 的理解和使用"></a>axios 的理解和使用</h1><h2 id="axios-是什么"><a href="#axios-是什么" class="headerlink" title="axios 是什么?"></a>axios 是什么?</h2><ul><li><strong><em>前端最流行的 ajax请求库</em></strong></li><li><strong><em>文档: <a href="https://github.com/axios/axios">https://github.com/axios/axios</a></em></strong></li><li><strong><em>react/vue 官方都推荐使用 axios 发ajax 请求</em></strong></li></ul><h2 id="axios-特点"><a href="#axios-特点" class="headerlink" title="axios 特点"></a>axios 特点</h2><ul><li><em>基于 xhr + promise 的异步 ajax请求库</em></li><li><em>浏览器端/node 端都可以使用</em></li><li><em>支持请求／响应拦截器</em></li><li><em>支持请求取消</em></li><li><em>请求/响应数据转换</em></li><li><em>批量发送多个请求</em></li></ul><h2 id="axios-常用语法"><a href="#axios-常用语法" class="headerlink" title="axios 常用语法"></a>axios 常用语法</h2><blockquote><p><em>axios(config):</em>  <strong>通用/最本质的发任意类型请求的方式</strong><br><em>axios(url[, config]):</em> <strong>可以只指定url 发get 请求</strong><br><em>axios.request(config):</em> <strong>等同于axios(config)</strong><br><em>axios.get(url[, config]):</em> <strong>发get 请求</strong><br><em>axios.delete(url[, config]):</em> <strong>发delete 请求</strong><br><em>axios.post(url[, data, config]):</em> <strong>发post 请求</strong><br><em>axios.put(url[, data, config]):</em> <strong>发put 请求</strong></p><p><em>axios.defaults.xxx:</em> <strong>请求的默认全局配置（method\baseURL\params\timeout…）</strong><br><em>axios.interceptors.request.use():</em> <strong>添加请求拦截器</strong><br><em>axios.interceptors.response.use():</em> <strong>添加响应拦截器</strong></p><p><em>axios.create([config])</em>: <strong>创建一个新的axios(它没有下面的功能)</strong></p><p>axios.Cancel(): <strong>用于创建取消请求的错误对象</strong><br>axios.CancelToken(): <strong>用于创建取消请求的 token 对象</strong><br>axios.isCancel(): <strong>是否是一个取消请求的错误</strong><br>axios.all(promises): <strong>用于批量执行多个异步请求</strong><br>axios.spread(): <strong>用来指定接收所有成功数据的回调函数的方法</strong></p></blockquote><h1 id="难点语法的理解和使用"><a href="#难点语法的理解和使用" class="headerlink" title="难点语法的理解和使用"></a>难点语法的理解和使用</h1><h3 id="axios-create-config"><a href="#axios-create-config" class="headerlink" title="axios.create(config)"></a>axios.create(config)</h3><p><em>根据指定配置创建一个新的 axios, 也就是每个新 axios 都有自己的配置</em><br><em>新 axios 只是没有取消请求和批量发请求的方法, 其它所有语法都是一致的</em><br><em>为什么要设计这个语法?</em><br><strong>(1) 需求: 项目中有部分接口需要的配置与另一部分接口需要的配置不太一样, 如何处理（比如有多个baseURL需要指定）</strong><br><strong>(2) 解决: 创建2 个新axios, 每个都有自己特有的配置, 分别应用到不同要求的接口请求中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123; <span class="comment">// instance是函数类型</span></span><br><span class="line"><span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用instance发Ajax请求</span></span><br><span class="line"><span class="title function_">instance</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;/posts&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/posts&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拦截器函数-ajax-请求-请求的回调函数的调用顺序"><a href="#拦截器函数-ajax-请求-请求的回调函数的调用顺序" class="headerlink" title="拦截器函数/ajax 请求/请求的回调函数的调用顺序"></a>拦截器函数/ajax 请求/请求的回调函数的调用顺序</h3><p><strong>说明: 调用axios()并不是立即发送ajax 请求, 而是需要经历一个较长的流程</strong><br><strong><em>流程: 请求拦截器2 =&gt; 请求拦截器1 =&gt; 发ajax 请求 =&gt; 响应拦截器1 =&gt; 响应拦截器2 =&gt; 请求的回调</em></strong><br><strong>注意: 此流程是通过 promise 串连起来的, 请求拦截器传递的是config, 响应拦截器传递的是response</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//promise</span></span><br><span class="line">    <span class="comment">// 设置请求拦截器 config 配置对象</span></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功-1&#x27;</span>);</span><br><span class="line">        <span class="comment">//修改config中参数</span></span><br><span class="line">        config.<span class="property">params</span> = &#123; <span class="attr">a</span>: <span class="number">100</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">        <span class="comment">// thorw: &#x27;自定义请求失败&#x27;</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败-1&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功-2&#x27;</span>);</span><br><span class="line">        <span class="comment">//修改config中参数</span></span><br><span class="line">        config.<span class="property">timeout</span> = <span class="number">2000</span></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">        <span class="comment">// thorw: &#x27;自定义请求失败&#x27;</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败-2&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应拦截器</span></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功-1&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败-1&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功-2&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败-2&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自定义回调处理成功的结果&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reson</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自定义请求失败&#x27;</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><p>流程</p><ol><li><em>配置 <code>cancelToken</code> 对象</em></li><li><em>缓存用于取消请求的 <code>cancel</code> 函数</em></li><li><em>在后面特定时机调用 <code>cancel</code> 函数取消请求</em></li><li><em>在错误回调中判断如果 <code>error</code> 是 <code>cancel</code>, 做相应处理</em></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>axios基本使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>取消请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.声明全局变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> cancel = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送请求</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//检测上一次请求是否完成</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(cancel !== <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//取消上一次请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">cancel</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1.添加配置对象的属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.<span class="title class_">CancelToken</span>(<span class="keyword">function</span>(<span class="params">c</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//3.将c的值赋值给cancel</span></span></span><br><span class="line"><span class="language-javascript">                cancel = c</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//将cancel的值初始化设置</span></span></span><br><span class="line"><span class="language-javascript">            cancel = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//绑定第二个事件取消请求</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">cancel</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 <code>GET</code> 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的请求也可以这样做</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行 <code>POST</code> 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行多个并发请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAccount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserPermissions</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/12345/permissions&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">getUserAccount</span>(), <span class="title function_">getUserPermissions</span>()])</span><br><span class="line">  .<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="keyword">function</span> (<span class="params">acct, perms</span>) &#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><h2 id="axios的全局配置"><a href="#axios的全局配置" class="headerlink" title="axios的全局配置"></a>axios的全局配置</h2><p><img src="imgs\1570541353621.png" alt="1570541353621"></p><p>常见配置选项，具体可看官网</p><p><img src="imgs\1570541513944.png" alt="1570541513944"></p><p>封装axios</p><p><img src="imgs\1570542920896.png" alt="1570542920896"></p><p><img src="imgs\1570542391146.png" alt="1570542391146"></p><p><img src="imgs\1570542483129.png" alt="1570542483129"></p><h2 id="axios使用封装接口"><a href="#axios使用封装接口" class="headerlink" title="axios使用封装接口"></a>axios使用封装接口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/p/getProblemSet/&#x27;</span>+index</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">).<span class="title function_">catch</span>(</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Parameters与Data的区别"><a href="#Parameters与Data的区别" class="headerlink" title="Parameters与Data的区别:"></a>Parameters与Data的区别:</h2><p>实际上就是GET和POST区别;</p><p>我们知道GET请求的参数都是在URL上的，服务器并不会读取http body里面的数据,这样我们传递的就是Params里的请求的参数了；如果想让服务器读取http body里面的数据那就需要用POST请求了，POST请求的参数就存放在body；</p><p>以后<strong>如果是GET请求最好是在parameters里面设置，而POST请求就在Body Data里面设置</strong>.</p><h2 id="axios接收图片"><a href="#axios接收图片" class="headerlink" title="axios接收图片"></a>axios接收图片</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getVerifyImage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/verify/image&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//将从后台获取的图片流进行转换</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="string">&quot;data:image/png;base64,&quot;</span> +</span><br><span class="line">            <span class="title function_">btoa</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(response.<span class="property">data</span>).<span class="title function_">reduce</span>(</span><br><span class="line">                    <span class="function">(<span class="params">data, byte</span>) =&gt;</span> data + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(byte),</span><br><span class="line">                    <span class="string">&quot;&quot;</span></span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">verifiedImg</span> = res;</span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="axios跨域"><a href="#axios跨域" class="headerlink" title="axios跨域"></a>axios跨域</h2><p>需要在默认实例添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">withCredentials</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>,  </span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">// 请求的超时时间</span></span><br><span class="line">    <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证，允许携带cookie</span></span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span>, <span class="comment">// default false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000011811117">https://segmentfault.com/a/1190000011811117</a></p><h2 id="axios上传文件"><a href="#axios上传文件" class="headerlink" title="axios上传文件"></a>axios上传文件</h2><p><a href="http://www.axios-js.com/">axios官网</a></p>]]></content>
      
      
      <categories>
          
          <category> -拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2023/05/13/%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/13/%E7%AC%AC%E5%9B%9B%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="01TypeScript：初体验"><a href="#01TypeScript：初体验" class="headerlink" title="01TypeScript：初体验"></a>01TypeScript：初体验</h1><h2 id="1-TypeScript概述"><a href="#1-TypeScript概述" class="headerlink" title="1.TypeScript概述"></a>1.TypeScript概述</h2><p>TS增加了什么？</p><ol><li>类型</li><li>支持ES的新特性</li><li>添加ES不具备的新特性，比如接口、枚举…</li><li>丰富的配置选项，比如可以设置编译成任意版本的ES</li></ol><h2 id="2-TypeScript开发环境搭建"><a href="#2-TypeScript开发环境搭建" class="headerlink" title="2.TypeScript开发环境搭建"></a>2.TypeScript开发环境搭建</h2><ol><li>使用npm全局安装typescript<ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li>创建一个ts文件</li><li>使用tsc对ts文件进行编译<ul><li>进入命令行</li><li>进入ts文件所在目录</li><li>执行命令：tsc xxx.ts</li></ul></li></ol><h2 id="3-第一个案例"><a href="#3-第一个案例" class="headerlink" title="3.第一个案例"></a>3.第一个案例</h2><ul><li>新建空文件夹，创建一个hello.ts文件</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello TS&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>使用npm全局安装typescript</li><li>在命令行输入tsc hello.ts进行编译即可</li></ul><h1 id="02TypeScript：类型声明和变量类型"><a href="#02TypeScript：类型声明和变量类型" class="headerlink" title="02TypeScript：类型声明和变量类型"></a>02TypeScript：类型声明和变量类型</h1><h2 id="1-类型声明"><a href="#1-类型声明" class="headerlink" title="1.类型声明"></a>1.类型声明</h2><ul><li>直接在变量声明后面加</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 此行代码会报错，但是可以编译成js（也可以设置为报错不能编译成功）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果变量的声明和赋值是同时进行的，TS可以自动对变量进行类型检测</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">c = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><ul><li>还可以对函数参数和返回值的类型进行声明</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-变量类型"><a href="#2-变量类型" class="headerlink" title="2.变量类型"></a>2.变量类型</h2><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230501140324480.png" alt="image-20230501140324480"></p><h4 id="number"><a href="#number" class="headerlink" title="number"></a>number</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">b = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c= <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">c = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a1</span>: <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">a1 = <span class="number">10</span>;<span class="comment">//后面使用时不可修改，类似常量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用 | 来连接多个类型（联合类型）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b1</span>: <span class="string">&quot;male&quot;</span> | <span class="string">&quot;female&quot;</span>;</span><br><span class="line">b1= <span class="string">&quot;male&quot;</span>;</span><br><span class="line">b1= <span class="string">&quot;female&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c1 : <span class="built_in">boolean</span> | <span class="built_in">string</span>;</span><br><span class="line">c1 = <span class="literal">true</span>;</span><br><span class="line">c1 = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="any"><a href="#any" class="headerlink" title="any"></a>any</h4><ul><li>any 表示的是任意类型，一个变量设置类型为any后相当于对该变量关闭了TS的类型检测</li><li>使用TS时，不建议使用any类型（尽量避免）</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let d:any;（显示的any）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明变量如果不指定类型，则TS解析器会自动判断变量的类型为any（隐式的any）</span></span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line">d = <span class="number">10</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="string">&#x27;true&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h4><ul><li>unknown 实际上就是一个类型安全的any</li><li>unknown 类型的变量，不能直接赋值给其他变量</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unknown表示未知类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="built_in">unknown</span>;</span><br><span class="line">e = <span class="number">10</span>;</span><br><span class="line">e = <span class="literal">true</span>;</span><br><span class="line">e = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><p><em>any类型的变量可以赋值给任意变量；但unknown 类型的变量不能直接赋值给其他变量</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//d的类型是any，它可以赋值给任意变量</span></span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line">s = d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="built_in">unknown</span>;</span><br><span class="line">e = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">s = e;<span class="comment">//会报错，e的类型是unknown，不能直接赋值给其他变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> e === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    s = e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类型断言</strong>—可以用来告诉解析器变量的实际类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">    变量 as 类型</span></span><br><span class="line"><span class="comment">    &lt;类型&gt;变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s = e <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">s = &lt;<span class="built_in">string</span>&gt;e;</span><br></pre></td></tr></table></figure><h4 id="void"><a href="#void" class="headerlink" title="void"></a>void</h4><p>void 用来表示空值，以函数为例，就表示没有返回值（或返回undefined）的函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>): <span class="built_in">void</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="never"><a href="#never" class="headerlink" title="never"></a>never</h4><p>never 表示永远不会返回结果；没有值（比较少用，一般是用来抛出错误）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>): <span class="built_in">never</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;报错了！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="object"><a href="#object" class="headerlink" title="object"></a>object</h4><p>1.{ } 用来指定对象中可以包含哪些属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    语法：&#123;属性名：属性值，属性名：属性值&#125;</span></span><br><span class="line"><span class="comment">    在属性名后面加上？，表示属性是可选的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, age?:<span class="built_in">number</span>&#125;;</span><br><span class="line"></span><br><span class="line">b = &#123;&#125;; <span class="comment">//没有的话就会报错</span></span><br><span class="line">b = &#123;<span class="attr">name</span>: <span class="string">&quot;孙悟空&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c1</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, a?:<span class="built_in">number</span>, b?:<span class="built_in">number</span>&#125;;</span><br><span class="line">c1 = &#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>, <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125; <span class="comment">//会报错，多余了c</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>[<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> 表示可以多余任意类型的属性</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</span><br><span class="line">c = &#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>设置函数结构的类型声明</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    语法: </span></span><br><span class="line"><span class="comment">    (形参：类型，形参：类型...)=&gt; 返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d1</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span> ,b: <span class="built_in">number</span></span>)=&gt;</span><span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">d1 = <span class="keyword">function</span> (<span class="params">n1: <span class="built_in">number</span>, n2: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="array"><a href="#array" class="headerlink" title="array"></a>array</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    数组的类型声明：</span></span><br><span class="line"><span class="comment">        类型[]</span></span><br><span class="line"><span class="comment">        Array&lt;类型&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//string[] 表示字符串数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">e1</span>:<span class="built_in">string</span>[];</span><br><span class="line">e1 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//number[] 表示数值数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f</span>: <span class="built_in">number</span>[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">g = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h4 id="tuple（ts新增类型）"><a href="#tuple（ts新增类型）" class="headerlink" title="tuple（ts新增类型）"></a>tuple（ts新增类型）</h4><p>tuple(元组)：就是固定长度的数组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    语法：[类型， 类型， 类型]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">h</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">h = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">123</span>];</span><br></pre></td></tr></table></figure><h4 id="enum（ts新增类型）"><a href="#enum（ts新增类型）" class="headerlink" title="enum（ts新增类型）"></a>enum（ts新增类型）</h4><p>枚举可以把所有可能的值都列举出来</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span>&#123; <span class="comment">//定义枚举类型可以把所有可能的值都列举出来</span></span><br><span class="line">    <span class="title class_">Male</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="title class_">Female</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">i</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">gender</span>: <span class="title class_">Gender</span>&#125;;</span><br><span class="line">i = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="title class_">Gender</span>.<span class="property">Male</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i.<span class="property">gender</span> === <span class="title class_">Gender</span>.<span class="property">Male</span>)</span><br></pre></td></tr></table></figure><p><strong>&amp; 表示同时满足</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">j</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125; &amp; &#123;<span class="attr">age</span>: <span class="built_in">number</span>&#125;;</span><br><span class="line">j = &#123;<span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>类型的别名</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">k</span>: myType;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">l</span>: myType;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">m</span>: myType;</span><br><span class="line"></span><br><span class="line">k = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h1 id="03TypeScript：编译选项"><a href="#03TypeScript：编译选项" class="headerlink" title="03TypeScript：编译选项"></a>03TypeScript：编译选项</h1><h2 id="1-自动编译的两种方法"><a href="#1-自动编译的两种方法" class="headerlink" title="1.自动编译的两种方法"></a>1.自动编译的两种方法</h2><ul><li><code>tsc ts文件 -w</code> 能够对<strong>单个ts文件</strong>进行监视，若有修改则会自动重新编译。</li><li>新建一个tsconfig.json文件，然后在命令行执行<code>tsc -w</code> 可以对<strong>所有ts文件</strong>进行监视，若有修改则会自动重新编译。</li></ul><h2 id="2-tsconfig-json文件"><a href="#2-tsconfig-json文件" class="headerlink" title="2.tsconfig.json文件"></a>2.tsconfig.json文件</h2><p><strong>tsconfig.json 是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译</strong></p><h4 id="include"><a href="#include" class="headerlink" title="include"></a>include</h4><ul><li>用来表示需要被编译的ts文件目录</li><li>路径: <em>*表示任意目录, </em>表示任意文件</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;include&quot;</span>: [</span><br><span class="line"><span class="string">&quot;./src/**/*&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h4><ul><li>用来表示不需要被编译的文件目录</li><li>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;./src/hello/**/*&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><ul><li>定义被继承的配置文件</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示当前配置文件中会自动包含config目录下base.json中的所有配置信息</span></span><br><span class="line"><span class="string">&quot;extends&quot;</span>: <span class="string">&quot;./configs/base&quot;</span></span><br></pre></td></tr></table></figure><h4 id="files"><a href="#files" class="headerlink" title="files"></a>files</h4><ul><li>指定被编译文件的列表，只有需要编译的文件少时才会用到</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;files&quot;</span>: [</span><br><span class="line"><span class="string">&quot;core.ts&quot;</span>,</span><br><span class="line"><span class="string">&quot;sys.ts&quot;</span>,</span><br><span class="line"><span class="string">&quot;types.ts&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="compilerOptions（重要，编译器的选项）"><a href="#compilerOptions（重要，编译器的选项）" class="headerlink" title="compilerOptions（重要，编译器的选项）"></a><strong>compilerOptions</strong>（重要，编译器的选项）</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">//target 用来指定ts被编译为ES的版本</span></span><br><span class="line">    <span class="comment">//&#x27;es3&#x27;, &#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, &#x27;es2019&#x27;, &#x27;es2020&#x27;, &#x27;esnext&#x27;.</span></span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//module 指定要使用的模块化的规范</span></span><br><span class="line">    <span class="comment">//&#x27;none&#x27;, &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es2020&#x27;, &#x27;esnext&#x27;</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//lib 用来指定项目所用的库</span></span><br><span class="line">    <span class="comment">// &quot;lib&quot;: [],//一般情况下不需要设置（浏览器运行的就不用管，nodejs运行的再根据实际使用去指定）</span></span><br><span class="line">    <span class="comment">// 可选值：&#x27;es5&#x27;, &#x27;es6&#x27;, &#x27;es2015&#x27;, &#x27;es7&#x27;, &#x27;es2016&#x27;, &#x27;es2017&#x27;, &#x27;es2018&#x27;, &#x27;es2019&#x27;, &#x27;es2020&#x27;, &#x27;esnext&#x27;, &#x27;dom&#x27;, </span></span><br><span class="line">    <span class="comment">// &#x27;dom.iterable&#x27;, &#x27;webworker&#x27;, &#x27;webworker.importscripts&#x27;, &#x27;webworker.iterable&#x27;, &#x27;scripthost&#x27;, &#x27;es2015.core&#x27;, &#x27;es2015.collection&#x27;, </span></span><br><span class="line">    <span class="comment">// &#x27;es2015.generator&#x27;, &#x27;es2015.iterable&#x27;, &#x27;es2015.promise&#x27;, &#x27;es2015.proxy&#x27;, &#x27;es2015.reflect&#x27;, &#x27;es2015.symbol&#x27;, &#x27;es2015.symbol.wellknown&#x27;, &#x27;es2016.array.include&#x27;,</span></span><br><span class="line">    <span class="comment">//  &#x27;es2017.object&#x27;, &#x27;es2017.sharedmemory&#x27;, &#x27;es2017.string&#x27;, &#x27;es2017.intl&#x27;, &#x27;es2017.typedarrays&#x27;, &#x27;es2018.asyncgenerator&#x27;, &#x27;es2018.asynciterable&#x27;, &#x27;es2018.intl&#x27;, </span></span><br><span class="line">    <span class="comment">// &#x27;es2018.promise&#x27;, &#x27;es2018.regexp&#x27;, &#x27;es2019.array&#x27;, &#x27;es2019.object&#x27;, &#x27;es2019.string&#x27;, &#x27;es2019.symbol&#x27;, &#x27;es2020.bigint&#x27;, &#x27;es2020.promise&#x27;, </span></span><br><span class="line">    <span class="comment">// &#x27;es2020.sharedmemory&#x27;, &#x27;es2020.string&#x27;, &#x27;es2020.symbol.wellknown&#x27;, &#x27;es2020.intl&#x27;, &#x27;esnext.array&#x27;, &#x27;esnext.symbol&#x27;, &#x27;esnext.asynciterable&#x27;, &#x27;esnext.intl&#x27;,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//outDir 用来指定编译后文件所在的目录</span></span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//outFile 将代码合并为一个文件</span></span><br><span class="line">    <span class="comment">// 设置outFile后，所有的全局作用域中的代码会合并到同一个文件中</span></span><br><span class="line">    <span class="comment">// &quot;outFile&quot;: &quot;./dist/app.js&quot;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否对js文件进行编译，默认是false</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否检查js代码是否符合语法规范，默认值是false</span></span><br><span class="line">    <span class="string">&quot;checkJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否移除注释</span></span><br><span class="line">    <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不生成编译后的文件</span></span><br><span class="line">    <span class="string">&quot;noEmit&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当有错误时不生成编译文件</span></span><br><span class="line">    <span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有严格检查的总开关，包括下面四个（如果相同的话可以直接用这个，下面四个省略）</span></span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来设置编译后的文件是否使用严格模式，默认是false</span></span><br><span class="line">    <span class="string">&quot;alwaysStrict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">    <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不允许不明确类型的this</span></span><br><span class="line">    <span class="string">&quot;noImplicitThis&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 严格检查空值</span></span><br><span class="line">    <span class="string">&quot;strictNullChecks&quot;</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="04TypeScript：使用webpack打包ts代码"><a href="#04TypeScript：使用webpack打包ts代码" class="headerlink" title="04TypeScript：使用webpack打包ts代码"></a>04TypeScript：使用webpack打包ts代码</h1><h2 id="1-webpack的简单使用"><a href="#1-webpack的简单使用" class="headerlink" title="1.webpack的简单使用"></a>1.webpack的简单使用</h2><p><em>一般项目中我们不会直接编译ts代码，而是使用打包工具来进行。</em></p><ul><li><p>初始化项目：<code>npm init -y</code></p></li><li><p>安装依赖：<code>cnpm i -D webpack webpack-cli typescript ts-loader</code>（四个包）</p><ul><li><p>webpack-cli—命令行工具</p></li><li><p>ts-loader—将ts代码和webpack能整合在一起</p></li></ul></li><li><p>新建webpack.config.js文件</p></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入一个包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack 中所有的配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//指定打包文件的目录</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">//打包后文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="comment">//告诉webpack不使用箭头函数</span></span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指定webpack打包时要使用的模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要loader加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,<span class="comment">//以ts结尾的文件</span></span><br><span class="line">                <span class="comment">// 要使用的loader</span></span><br><span class="line">                <span class="attr">use</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">                <span class="comment">// 要排除的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用来设置引用模块，可以将这些文件识别为模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在package.json中加上build命令<code>&quot;build&quot;: &quot;webpack&quot;,</code></li><li>执行<code>npm run build</code>即可进行编译打包</li></ul><h2 id="2-webpack中常用的插件"><a href="#2-webpack中常用的插件" class="headerlink" title="2.webpack中常用的插件"></a>2.webpack中常用的插件</h2><p>1.<strong>html-webpack-plugin</strong>—html插件能帮助我们在打包时自动地生成html文件</p><p>此外，还得安装一个webpack插件<code>cnpm i -D html-webpack-plugin</code>，才能生成html文件</p><p>在上面的基础上进行配置该插件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入一个包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入html插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack 中所有的配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//指定打包文件的目录</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">//打包后文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="comment">//告诉webpack不使用箭头函数</span></span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指定webpack打包时要使用的模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要loader加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,<span class="comment">//以ts结尾的文件</span></span><br><span class="line">                <span class="comment">// 要使用的loader</span></span><br><span class="line">                <span class="attr">use</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">                <span class="comment">// 要排除的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置Webpack 插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// title: &quot;这是一个自定义的title&quot;、</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span> </span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用来设置引用模块，可以将这些文件识别为模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.<strong>webpack-dev-server</strong>—该插件能自动响应浏览器更新</p><ul><li>安装：<code>npm i -D webpack-dev-server</code></li><li>在package.json中加上start命令：<code>&quot;start&quot;: &quot;webpack serve --open&quot;</code></li></ul><p>这样，就能在开发时实现热部署了。</p><p>3.<strong>clean-webpack-plugin</strong>—clean插件能在build前清空dist目录所有文件，避免旧文件的遗留</p><ul><li>安装：<code>npm i -D clean-webpack-plugin</code></li><li>使用</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入一个包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入html插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">//引入clean插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack 中所有的配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//指定打包文件的目录</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">//打包后文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="comment">//告诉webpack不使用箭头函数</span></span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指定webpack打包时要使用的模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要loader加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,<span class="comment">//以ts结尾的文件</span></span><br><span class="line">                <span class="comment">// 要使用的loader</span></span><br><span class="line">                <span class="attr">use</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">                <span class="comment">// 要排除的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置Webpack 插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// title: &quot;这是一个自定义的title&quot;、</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span> </span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用来设置引用模块，可以将这些文件识别为模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-Babel的使用"><a href="#3-Babel的使用" class="headerlink" title="3.Babel的使用"></a>3.Babel的使用</h2><p>为了使得代码能兼容不同浏览器，我们需要使用babel工具（与webpack结合一起使用）。</p><ul><li><p>安装依赖：<code>cnpm i -D @babel/core @babel/preset-env babel-loader core-js</code>（四个）</p><ul><li><p>@babel/core—babel核心的工具</p></li><li><p>@babel/preset-env—babel的预设环境</p></li><li><p>babel-loader—babel与webpack结合的工具</p></li><li><p>core-js—模拟js运行环境（使用时可以按需引入）</p></li></ul></li><li><p>修改webpack配置文件</p></li></ul><p>在loader加载器中加入babel（loader中的执行顺序是从下往上，所以需要将’ts-loader’放在最后）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定webpack打包时要使用的模块</span></span><br><span class="line">   <span class="attr">module</span>: &#123;</span><br><span class="line">       <span class="comment">// 指定要loader加载的规则</span></span><br><span class="line">       <span class="attr">rules</span>: [</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">               <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,<span class="comment">//以ts结尾的文件</span></span><br><span class="line">               <span class="comment">// 要使用的loader</span></span><br><span class="line">               <span class="attr">use</span>: [</span><br><span class="line">                   <span class="comment">// 配置babel</span></span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="comment">//指定加载器</span></span><br><span class="line">                       <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                       <span class="comment">// 设置babel</span></span><br><span class="line">                       <span class="attr">options</span>: &#123;</span><br><span class="line">                           <span class="comment">//设置预定义的环境</span></span><br><span class="line">                           <span class="attr">presets</span>: [</span><br><span class="line">                               [</span><br><span class="line">                                   <span class="comment">//指定环境的插件</span></span><br><span class="line">                                   <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                   <span class="comment">// 配置信息</span></span><br><span class="line">                                   &#123;</span><br><span class="line">                                       <span class="comment">// 要兼容的目标浏览器及版本</span></span><br><span class="line">                                       <span class="attr">targets</span>: &#123;</span><br><span class="line">                                           <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                           <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                                       &#125;,</span><br><span class="line">                                       <span class="comment">//指定corejs的版本（根据package.json中的版本，只写整数）</span></span><br><span class="line">                                       <span class="string">&quot;corejs&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                       <span class="comment">//使用corejs的方式 &quot;usage&quot;  表示按需加载</span></span><br><span class="line">                                       <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span> </span><br><span class="line">                                   &#125;</span><br><span class="line"></span><br><span class="line">                               ]</span><br><span class="line">                           ]</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;,</span><br><span class="line">                   <span class="comment">// &#x27;babel-loader&#x27;, //简化版的配置</span></span><br><span class="line">                   <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">               ],</span><br><span class="line">               <span class="comment">// 要排除的文件</span></span><br><span class="line">               <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样，webpack的基本配置就完成了，也是项目开发中常用的配置。下面是整合后的<strong>最终配置文件</strong>，开发时可以根据这个来做修改。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入一个包</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入html插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HTMLWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">//引入clean插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack 中所有的配置信息都应该写在module.exports中</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//指定打包文件的目录</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">//打包后文件的名字</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="comment">//告诉webpack不使用箭头函数</span></span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指定webpack打包时要使用的模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定要loader加载的规则</span></span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// test指定的是规则生效的文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,<span class="comment">//以ts结尾的文件</span></span><br><span class="line">                <span class="comment">// 要使用的loader</span></span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="comment">// 配置babel</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//指定加载器</span></span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                        <span class="comment">// 设置babel</span></span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="comment">//设置预定义的环境</span></span><br><span class="line">                            <span class="attr">presets</span>: [</span><br><span class="line">                                [</span><br><span class="line">                                    <span class="comment">//指定环境的插件</span></span><br><span class="line">                                    <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                    <span class="comment">// 配置信息</span></span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="comment">// 要兼容的目标浏览器及版本</span></span><br><span class="line">                                        <span class="attr">targets</span>: &#123;</span><br><span class="line">                                            <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                            <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        <span class="comment">//指定corejs的版本（根据package.json中的版本，只写整数）</span></span><br><span class="line">                                        <span class="string">&quot;corejs&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                        <span class="comment">//使用corejs的方式 &quot;usage&quot;  表示按需加载</span></span><br><span class="line">                                        <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span> </span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                ]</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// &#x27;babel-loader&#x27;,</span></span><br><span class="line">                    <span class="string">&#x27;ts-loader&#x27;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="comment">// 要排除的文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node-modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Webpack 插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HTMLWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// title: &quot;这是一个自定义的title&quot;、</span></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span> </span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来设置引用模块，可以将这些文件识别为模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="05TypeScript：面向对象"><a href="#05TypeScript：面向对象" class="headerlink" title="05TypeScript：面向对象"></a>05TypeScript：面向对象</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>面向对象是程序中一个非常重要的思想，简而言之就是程序之中所有的操作都需要通过对象来完成。对象中有属性和方法。</p><ul><li>举例<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><h2 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h2><p>使用class关键字来定义一个类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        直接定义的属性是实例属性，需要通过对象的实例去访问；</span></span><br><span class="line"><span class="comment">            const per = new Person();</span></span><br><span class="line"><span class="comment">            per.name</span></span><br><span class="line"><span class="comment">        使用static的开头的属性是静态属性（类型），可以直接通过类去访问</span></span><br><span class="line"><span class="comment">            Person.age</span></span><br><span class="line"><span class="comment">        readonly 开头的属性表示一个只读的属性无法修改</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义实例属性</span></span><br><span class="line">    <span class="comment">// name: string = &#x27;孙悟空&#x27;;</span></span><br><span class="line">    <span class="comment">// readonly name: string = &#x27;孙悟空&#x27;;</span></span><br><span class="line">    name = <span class="string">&#x27;孙悟空&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在属性前使用static关键字可以定义类属性（静态属性）</span></span><br><span class="line">    <span class="comment">// static readonly age: number = 18;</span></span><br><span class="line">    age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        如果方法以static开头则方法就是类方法，可以直接通过类去调用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello 大家好！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//new 一个实例</span></span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name</span>);</span><br><span class="line">per.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(Person.age); //static时可以使用</span></span><br><span class="line"><span class="comment">// Person.sayHello();//static时可以使用</span></span><br><span class="line"></span><br><span class="line">per.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure><h2 id="构造函数和this"><a href="#构造函数和this" class="headerlink" title="构造函数和this"></a>构造函数和this</h2><p>constructor 被称为构造函数，会在对象创建时调用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 在实例方法中，this就表示当前的实例</span></span><br><span class="line">        <span class="comment">// 在构造函数中当前对象就是当前新建的那个对象</span></span><br><span class="line">        <span class="comment">// 可以通过this向新建的对象中添加属性</span></span><br><span class="line">        <span class="comment">// console.log(this);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;汪汪汪！！&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;小黑&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> dog2 = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;小白&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog2);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>使用<strong>extends</strong>继承后，子类将会拥有父类所有的方法和属性</li><li>通过继承可以将多个类中共有的代码写在一个父类，这样只需要写一次即可让所有的子类都同时拥有父类中的属性和方法</li><li>如果子类中添加了和父类相同的方法，则子类方法会覆盖掉父类的方法。这种子类覆盖掉父类方法的形式，我们称为重写</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义一个Animal类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫!!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个表示狗的类</span></span><br><span class="line">    <span class="comment">//使Dog类继承Animal类（此时，Animal被称为父类，Dog被称为子类）</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">        <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在跑啊~~`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪汪!!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个猫的类</span></span><br><span class="line">    <span class="comment">//使Cat类继承Animal类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;喵喵喵!!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;咪咪&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dog);</span><br><span class="line">    dog.<span class="title function_">sayHello</span>();</span><br><span class="line">    dog.<span class="title function_">run</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cat);</span><br><span class="line">    cat.<span class="title function_">sayHello</span>();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><ul><li>在类的方法中，super表示当前类的父类（也称为超类）</li></ul><p><strong>如果在子类中写了构造函数，则在子类构造函数中必须对父类的构造函数进行调用</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫~~&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">            <span class="comment">//如果在子类中写了构造函数，在子类构造函数中必须对父类的构造函数进行调用</span></span><br><span class="line">            <span class="variable language_">super</span>(name);<span class="comment">//调用父类的构造函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 在类的方法中 super就表示当前类的父类</span></span><br><span class="line">            <span class="comment">// super.sayHello();</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪汪~~&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    dog.<span class="title function_">sayHello</span>();</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="抽象类（ts新增的"><a href="#抽象类（ts新增的" class="headerlink" title="抽象类（ts新增的"></a>抽象类（ts新增的</h2><p><strong>特点</strong></p><ul><li>以abstract 开头的类是抽象类</li><li>抽象类和其他类区别不大，只是不能用来创建对象</li><li>抽象类就是专门用来被继承的类</li><li>抽象类中可以添加抽象方法</li></ul><p><strong>抽象方法</strong>：抽象方法使用abstract开头，没有方法体；抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义一个抽象方法</span></span><br><span class="line">        <span class="comment">// 抽象方法使用abstract开头，没有方法体</span></span><br><span class="line">        <span class="comment">// 抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写</span></span><br><span class="line">        <span class="keyword">abstract</span> <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪汪~~&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;喵喵喵~~&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>);</span><br><span class="line">    dog.<span class="title function_">sayHello</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// const an = new Animal();//无法创建抽象类的实例</span></span><br><span class="line">    dog.<span class="title function_">sayHello</span>(); </span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接口（ts新增的）"><a href="#接口（ts新增的）" class="headerlink" title="接口（ts新增的）"></a>接口（ts新增的）</h2><p>接口用来定义一个类结构, 用来定义一个类中应该包含哪些属性和方法；同时接口也可以当成类型声明去使用。</p><p><strong>特点</strong></p><ul><li>接口可以在定义类的时候去限制类的结构</li><li>接口中所有的属性都不能有实际的值</li><li>接口只定义对象的结构，而不考虑实际值</li><li>在接口中所有的方法都是抽象类</li></ul><p><strong>基本使用</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">interface</span> myInter&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="title function_">sayHello</span>(): <span class="built_in">void</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        定义类时，可以使类去实现一个接口</span></span><br><span class="line"><span class="comment">            实现接口就是使类满足接口的要求</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> myInter&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;大家好~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>同时接口也可以当成类型声明去使用</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">interface</span> myInterface&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> myInterface&#123;</span><br><span class="line">        <span class="attr">gender</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">obj</span>: myInterface = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;sss&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">111</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//此外，对象的类型声明还有一种方法——用别名</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 描述一个对象的类型</span></span><br><span class="line">    <span class="keyword">type</span> myType = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: myType = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;sss&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">111</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接口与抽象类类似，区别在于</p><ul><li>抽象类可以有抽象方法也可以有普通方法；但接口只能有抽象方法</li><li>抽象类使用extends继承；接口使用implements实现</li></ul><h2 id="属性的封装"><a href="#属性的封装" class="headerlink" title="属性的封装"></a>属性的封装</h2><p>1.TS可以在类中的属性前添加属性的修饰符</p><ul><li>public 修饰的属性可以在任意位置访问（修改）<strong>默认值</strong></li><li>private 私有属性, 私有属性只能在类内部进行访问（修改）；但可以通过在类中添加方法使得私有属性可以被外部访问</li><li>protected 受保护的属性,只能在当前类和当前类的子类中访问(修改)</li></ul><p>2.js和ts封装属性的区别</p><p>由于属性是在对象中设置的，属性可以任意的被修改，将会导致对象中的数据变得非常不安全。因此需要对属性进行封装。</p><p><strong>js封装的属性存取器使用时需要调用相应的getter和setter方法；而ts封装的属性存取器使用时可直接当作变量来用就行。</strong></p><p><em>加getter和setter方法只是为了对属性的值做判断，如果不需做判断则没必要使用。</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 定义一个表示人的类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="attr">_age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">            getter 方法来读取属性</span></span><br><span class="line"><span class="comment">            setter 方法来设置属性</span></span><br><span class="line"><span class="comment">                - 他们被称为属性的存取器</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/*  js中封装的属性存取器</span></span><br><span class="line"><span class="comment">       // 定义方法 用来获取name属性</span></span><br><span class="line"><span class="comment">        getName()&#123;</span></span><br><span class="line"><span class="comment">            return this._name;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //  定义方法，用来设置name属性</span></span><br><span class="line"><span class="comment">        setName(value: string)&#123;</span></span><br><span class="line"><span class="comment">            this._name = value;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        getAge()&#123;</span></span><br><span class="line"><span class="comment">            return this._age;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        setAge(value: number)&#123;</span></span><br><span class="line"><span class="comment">            // 判断年龄是否合法</span></span><br><span class="line"><span class="comment">            if(value &gt;= 0)&#123;</span></span><br><span class="line"><span class="comment">                this._age = value;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125; </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// TS中设置getter方法的方式</span></span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get name()执行了!!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_name</span> = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> <span class="title function_">age</span>()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_age</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">value:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(value &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_age</span> = value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        js封装的属性存取器使用时需要调用相应的getter和setter方法；</span></span><br><span class="line"><span class="comment">        而ts封装的属性存取器使用时可直接当作变量来用就行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// per._name = &#x27;猪八戒&#x27;;</span></span><br><span class="line">    <span class="comment">// per._age = -38;</span></span><br><span class="line">    <span class="comment">// per.setName(&#x27;猪八戒&#x27;);</span></span><br><span class="line">    <span class="comment">// per.setAge(-33);</span></span><br><span class="line">    <span class="comment">// console.log(per);</span></span><br><span class="line">    per.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;</span><br><span class="line">    per.<span class="property">age</span> = -<span class="number">13</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(per);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.在定义类时可以直接将属性定义在构造函数中（简化代码），实际上是语法糖</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class C&#123;</span></span><br><span class="line"><span class="comment">//     name: string;</span></span><br><span class="line"><span class="comment">//     age: number;</span></span><br><span class="line"><span class="comment">//     // 可以直接将属性定义在构造函数中</span></span><br><span class="line"><span class="comment">//     constructor(name: string, age:number)&#123;</span></span><br><span class="line"><span class="comment">//         this.name = name;</span></span><br><span class="line"><span class="comment">//         this,age = age;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="comment">// 语法糖</span></span><br><span class="line">    <span class="comment">// 可以直接将属性定义在构造函数中</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age:<span class="built_in">number</span></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="泛型（ts新增的）"><a href="#泛型（ts新增的）" class="headerlink" title="泛型（ts新增的）"></a>泛型（ts新增的）</h2><p>泛型就是不确定的类型<strong>（定义时不确定，执行了才确定）</strong>。在定义函数或是类时,如果遇到类型不明确就可以使用泛型</p><p><strong>在函数定义中使用</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">a</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以直接调用具有泛型的函数</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">fn</span>(<span class="number">10</span>);<span class="comment">// 不指定泛型,TS可以自动对类型进行推断</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result2 = fn&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>);<span class="comment">//手动指定泛型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型可以同时指定多个</span></span><br><span class="line"><span class="keyword">function</span> fn2&lt;T, K&gt;(<span class="attr">a</span>:T, <span class="attr">b</span>:K):T &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn2&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">123</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此外，还能对泛型的类型进行限制</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span>&#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T extends Inter 表示泛型T必须是Inter实现类(子类)</span></span><br><span class="line"><span class="comment">// 这里用的话即调用该函数的参数必须具有length属性，可以是数组，字符串...</span></span><br><span class="line"><span class="keyword">function</span> fn3&lt;T <span class="keyword">extends</span> <span class="title class_">Inter</span>&gt;(<span class="attr">a</span>:T): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn3</span>(<span class="string">&#x27;124&#x27;</span>);</span><br><span class="line"><span class="comment">// fn3(1243);</span></span><br><span class="line"><span class="title function_">fn3</span>(&#123;<span class="attr">length</span>: <span class="number">10</span>&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在类定义中使用</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">name</span>: T;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name:T</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mc = <span class="keyword">new</span> <span class="title class_">MyClass</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;孙悟空&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="06TypeScript：项目实战—贪吃蛇"><a href="#06TypeScript：项目实战—贪吃蛇" class="headerlink" title="06TypeScript：项目实战—贪吃蛇"></a>06TypeScript：项目实战—贪吃蛇</h1><h2 id="1-项目搭建"><a href="#1-项目搭建" class="headerlink" title="1.项目搭建"></a>1.项目搭建</h2><ul><li><p>准备好之前的webpack.config.js、tsconfig.json、package.json、package-lock.json四个文件，然后执行<code>npm i</code>安装依赖</p></li><li><p>安装其他依赖：<code>npm i -D less less-loader css-loader style-loader</code>（四个包，因为要使用到less）<strong>如果有其他web资源的话则还需引入web资源的加载器，引入方法类似</strong></p></li><li><p>修改webpack配置文件—在rules中添加</p></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置less文件的处理</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line"><span class="attr">use</span>:[</span><br><span class="line"><span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line"><span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line"><span class="string">&quot;less-loader&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就能在项目中使用less了。执行<code>npm run build</code>并打开dist中的index.html即可看到效果</p><ul><li>安装postcss来处理css的浏览器兼容性问题：<code>npm i -D postcss postcss-loader postcss-preset-env</code>，并在webpack中引入</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置less文件的处理</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line"><span class="attr">use</span>:[</span><br><span class="line"><span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line"><span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line"><span class="comment">//引入postcss</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line"><span class="attr">options</span>: &#123;</span><br><span class="line"><span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                        [</span><br><span class="line">                            <span class="string">&quot;postcss-preset-env&quot;</span>,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">browsers</span>: <span class="string">&#x27;last 2 versions&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    ]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;less-loader&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就可以看到在打包后的js文件中，有些css属性会加上浏览器前缀。</p><h2 id="2-项目界面"><a href="#2-项目界面" class="headerlink" title="2.项目界面"></a>2.项目界面</h2><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>贪吃蛇<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建游戏的主容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置游戏的舞台 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;stage&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置蛇 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;snake&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- snake内部的div 表示蛇的各部分 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 设置食物 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;food&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 添加4个小div 来设置食物的样式 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置游戏的积分牌 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;score-panel&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                SCORE: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                Level: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;level&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>index.less</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置变量</span></span><br><span class="line"><span class="variable">@bg-color:</span> <span class="number">#b7d4a8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除默认样式</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 改变盒子模型的计算方式</span></span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: bold <span class="number">20px</span> <span class="string">&quot;Courier&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置主窗口的样式</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">    <span class="comment">// 设置背景颜色</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@bg-color</span>;</span><br><span class="line">    <span class="comment">// 设置居中</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span><br><span class="line">    <span class="comment">// 设置圆角</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">40px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启弹性盒模型</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">// 设置主轴的方向</span></span><br><span class="line">    <span class="attribute">flex-flow</span>: column;</span><br><span class="line">    <span class="comment">// 设置辅轴（侧轴）对其方式</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="comment">// 设置主轴的对齐方式</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 游戏舞台</span></span><br><span class="line">    <span class="selector-id">#stage</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">304px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">304px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">        <span class="comment">// 开启相对定位</span></span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置蛇的样式</span></span><br><span class="line">        <span class="selector-id">#snake</span> &#123;</span><br><span class="line">            <span class="selector-tag">&amp;</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">                <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">                <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">@bg-color</span>;</span><br><span class="line">                <span class="comment">// 开启绝对定位</span></span><br><span class="line">                <span class="attribute">position</span>: absolute;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#food</span> &#123;</span><br><span class="line">            <span class="comment">// 开启绝对定位</span></span><br><span class="line">            <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="comment">// background-color: red;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启弹性盒子</span></span><br><span class="line">            <span class="attribute">display</span>: flex;</span><br><span class="line">            <span class="comment">// 设置横轴为主轴, wrap表示会自动换行</span></span><br><span class="line">            <span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置主轴和侧轴的空白空间分配到元素之间</span></span><br><span class="line">            <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">            <span class="attribute">align-content</span>: space-between;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">left</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">            <span class="selector-tag">&amp;</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">4px</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">                <span class="attribute">background-color</span>: black;</span><br><span class="line">                <span class="comment">// 使四个div旋转45度</span></span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记分牌</span></span><br><span class="line"><span class="selector-id">#score-panel</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">// 设置主轴对齐方式</span></span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-定义Food类"><a href="#3-定义Food类" class="headerlink" title="3.定义Food类"></a>3.定义Food类</h2><p>Food类为定义食物的类</p><p><strong>主要实现</strong></p><ul><li>获取食物的坐标</li><li>修改食物的位置（随机生成</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义食物类Food</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Food</span>&#123;</span><br><span class="line">    <span class="comment">// 定义的一个属性表示食物所对应的元素</span></span><br><span class="line">    <span class="attr">element</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 获取页面中的food元素并将其赋值给element</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;food&#x27;</span>)!;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个获取食物X轴坐标的方法</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">X</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">offsetLeft</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个获取食物Y轴坐标的方法</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">Y</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">offsetTop</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改食物位置</span></span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 生成一个随机的位置</span></span><br><span class="line">        <span class="comment">// 食物的位置最小是0， 最大是290</span></span><br><span class="line">        <span class="comment">// 蛇移动一次就是一格，一格大小就是10，所以要求食物的坐标必须是整10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Math.round(Math.random() * 290);//生成一个[0,290]的整数</span></span><br><span class="line">       <span class="keyword">let</span> top = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">29</span>) * <span class="number">10</span>;</span><br><span class="line">       <span class="keyword">let</span> left = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">29</span>) * <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// Math.floor(Math.random() * 30) * 10;//向下取整</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">style</span>.<span class="property">left</span> = top + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">style</span>.<span class="property">top</span> = left + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="comment">// const food = new Food();</span></span><br><span class="line"><span class="comment">// console.log(food.X, food.Y);</span></span><br><span class="line"><span class="comment">// food.change();</span></span><br><span class="line"><span class="comment">// console.log(food.X, food.Y);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Food</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-定义ScorePanel类"><a href="#4-定义ScorePanel类" class="headerlink" title="4.定义ScorePanel类"></a>4.定义Score<a href="https://so.csdn.net/so/search?q=Panel类&amp;spm=1001.2101.3001.7020">Panel类</a></h2><p>ScorePanel类为定义记分牌的类</p><p><strong>主要实现</strong></p><ul><li>记录分数和等级</li><li>实现加分功能</li><li>实现升级功能</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义表示记分牌的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScorePanel</span>&#123;</span><br><span class="line">    <span class="comment">// score和level用来记录分数和等级</span></span><br><span class="line">    score = <span class="number">0</span>;</span><br><span class="line">    level = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分数和等级所在的元素，在构造函数中进行初始化</span></span><br><span class="line">    <span class="attr">scoreEle</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="attr">levelEle</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置一个变量限制等级</span></span><br><span class="line">    <span class="attr">maxLevel</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">// 设置一个变量表示多少分时升级</span></span><br><span class="line">    <span class="attr">upScore</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">maxLevel: <span class="built_in">number</span> = <span class="number">10</span>, upScore: <span class="built_in">number</span> = <span class="number">10</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scoreEle</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;score&#x27;</span>)!;<span class="comment">//后面加 ! 表示该值一定不为空</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">levelEle</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;level&#x27;</span>)!;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxLevel</span> = maxLevel;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">upScore</span> = upScore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置加分的方法</span></span><br><span class="line">    <span class="title function_">addScore</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 使分数自增</span></span><br><span class="line">        <span class="comment">// this.score++;</span></span><br><span class="line">        <span class="comment">// this.scoreEle.innerHTML = this.score + &#x27;&#x27;;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scoreEle</span>.<span class="property">innerHTML</span> = ++<span class="variable language_">this</span>.<span class="property">score</span> + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 判断分数是多少</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">score</span> % <span class="variable language_">this</span>.<span class="property">upScore</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">levelUp</span>();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提升等级的方法</span></span><br><span class="line">    <span class="title function_">levelUp</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">level</span> &lt; <span class="variable language_">this</span>.<span class="property">maxLevel</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">levelEle</span>.<span class="property">innerHTML</span> = ++<span class="variable language_">this</span>.<span class="property">level</span> + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="comment">// const scorePanel = new ScorePanel(100, 2);</span></span><br><span class="line"><span class="comment">// scorePanel.addScore();</span></span><br><span class="line"><span class="comment">// scorePanel.addScore();</span></span><br><span class="line"><span class="comment">// scorePanel.addScore();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for (let i = 0; i &lt; 200; i++) &#123;</span></span><br><span class="line"><span class="comment">//     scorePanel.addScore();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ScorePanel</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-定义Snake类"><a href="#5-定义Snake类" class="headerlink" title="5.定义Snake类"></a>5.定义Snake类</h2><p>Snake类为定义蛇的类</p><p><strong>主要实现</strong></p><ul><li>获取和设置蛇头的坐标</li><li>蛇身体变长</li><li>蛇不能掉头</li><li>蛇身体移动</li><li>检查蛇头是否撞到身体</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Snake</span>&#123;</span><br><span class="line">    <span class="comment">// 表示蛇头的元素</span></span><br><span class="line">    <span class="attr">head</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 蛇的身体（包括蛇头）</span></span><br><span class="line">    <span class="attr">bodies</span>: <span class="title class_">HTMLCollection</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取蛇的容器</span></span><br><span class="line">    <span class="attr">element</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;snake&#x27;</span>)!;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#snake &gt; div&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span>;</span><br><span class="line">        <span class="comment">// document.querySelectorAll(&#x27;#snake &gt; div&#x27;);// nodeList</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">bodies</span> = <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取蛇的坐标（蛇头坐标）</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">X</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">offsetLeft</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取蛇的Y轴坐标</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">Y</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">offsetTop</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置蛇头的坐标</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">X</span>(<span class="params">value:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="comment">// 如果新值和旧值相同，则直接返回不再修改 （加判断只是为了可以减少修改属性的次数，提升性能）</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">X</span> === value) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// X值的合法范围0-290之间</span></span><br><span class="line">        <span class="keyword">if</span> (value &lt;<span class="number">0</span> || value &gt; <span class="number">290</span> ) &#123;</span><br><span class="line">            <span class="comment">// 进入判断说明蛇撞墙了</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;蛇撞墙了~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改x时，是在修改水平坐标，蛇在左右移动，蛇在向左移动时，不能向右掉头，反之亦然</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">bodies</span>[<span class="number">1</span>] &amp;&amp; (<span class="variable language_">this</span>.<span class="property">bodies</span>[<span class="number">1</span>] <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="property">offsetLeft</span> === value) &#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;水平方向发生了掉头&#x27;);</span></span><br><span class="line">            <span class="comment">// 如果发生了掉头，让蛇向方向继续移动</span></span><br><span class="line">            <span class="keyword">if</span> (value &gt; <span class="variable language_">this</span>.<span class="property">X</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果新值value大于旧值X， 则说明蛇在向右走，此时发生掉头，应该使蛇继续向左走</span></span><br><span class="line">                value = <span class="variable language_">this</span>.<span class="property">X</span> - <span class="number">10</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 向左走</span></span><br><span class="line">                value = <span class="variable language_">this</span>.<span class="property">X</span> + <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移动身体</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">moveBody</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">style</span>.<span class="property">left</span> = value + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">         <span class="comment">// 检查有没有撞自己</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">checkHeadBody</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">Y</span>(<span class="params">value: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="comment">// 如果新值和旧值相同，则直接返回不再修改</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">Y</span> === value) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Y值的合法范围0-290之间</span></span><br><span class="line">        <span class="keyword">if</span> (value &lt;<span class="number">0</span> || value &gt; <span class="number">290</span> ) &#123;</span><br><span class="line">            <span class="comment">// 进入判断说明蛇撞墙了</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;蛇撞墙了~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改Y时，是在修改水平坐标，蛇在上下移动，蛇在向上移动时，不能向下掉头，反之亦然</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">bodies</span>[<span class="number">1</span>] &amp;&amp; (<span class="variable language_">this</span>.<span class="property">bodies</span>[<span class="number">1</span>] <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="property">offsetTop</span> === value) &#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;垂直方向发生了掉头&#x27;);</span></span><br><span class="line">            <span class="comment">// 如果发生了掉头，让蛇向方向继续移动</span></span><br><span class="line">            <span class="keyword">if</span> (value &gt; <span class="variable language_">this</span>.<span class="property">Y</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果新值value大于旧值Y， 则说明蛇在向下走，此时发生掉头，应该使蛇继续向上走</span></span><br><span class="line">                value = <span class="variable language_">this</span>.<span class="property">Y</span> - <span class="number">10</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 向上走</span></span><br><span class="line">                value = <span class="variable language_">this</span>.<span class="property">Y</span> + <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移动身体</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">moveBody</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">style</span>.<span class="property">top</span> = value + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="comment">// 检查有没有撞自己</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">checkHeadBody</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 蛇增加身体的方法</span></span><br><span class="line">    <span class="title function_">addBody</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 向element中添加一个div</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;beforeend&quot;</span>, <span class="string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>)<span class="comment">//添加到结束标签前</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个蛇身体移动的方法</span></span><br><span class="line">    <span class="title function_">moveBody</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">            从后往前改</span></span><br><span class="line"><span class="comment">            将后面的身体设置为前面身体的位置</span></span><br><span class="line"><span class="comment">                举例子：</span></span><br><span class="line"><span class="comment">                    第4节 = 第3节的位置</span></span><br><span class="line"><span class="comment">                    第3节 = 第2节的位置</span></span><br><span class="line"><span class="comment">                    第2节 = 蛇头的位置</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//遍历获取所有的身体</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">bodies</span>.<span class="property">length</span>-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="comment">// 获取前面身体的位置</span></span><br><span class="line">            <span class="keyword">let</span> X = (<span class="variable language_">this</span>.<span class="property">bodies</span>[i-<span class="number">1</span>] <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="property">offsetLeft</span>;</span><br><span class="line">            <span class="keyword">let</span> Y = (<span class="variable language_">this</span>.<span class="property">bodies</span>[i-<span class="number">1</span>] <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="property">offsetTop</span>;</span><br><span class="line">            <span class="comment">// 将这个值设置到当前身体上</span></span><br><span class="line">            (<span class="variable language_">this</span>.<span class="property">bodies</span>[i] <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="property">style</span>.<span class="property">left</span> = X + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            (<span class="variable language_">this</span>.<span class="property">bodies</span>[i] <span class="keyword">as</span> <span class="title class_">HTMLElement</span>).<span class="property">style</span>.<span class="property">top</span> = Y + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查蛇头是否撞到身体的方法</span></span><br><span class="line">    <span class="title function_">checkHeadBody</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 获取所有的身体，检查是否和蛇头的坐标发生重叠</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">bodies</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> bd = <span class="variable language_">this</span>.<span class="property">bodies</span>[i] <span class="keyword">as</span> <span class="title class_">HTMLElement</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">X</span> === bd.<span class="property">offsetLeft</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">Y</span> === bd.<span class="property">offsetTop</span>) &#123;</span><br><span class="line">                <span class="comment">// 进入判断说明蛇头撞到了身体，游戏结束</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;撞到自己了~~&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Snake</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-定义GameControl类"><a href="#6-定义GameControl类" class="headerlink" title="6.定义GameControl类"></a>6.定义GameControl类</h2><p>GameControl类为游戏控制器，来控制其他的所有类。</p><p><strong>主要实现</strong></p><ul><li>键盘事件</li><li>使蛇移动</li><li>蛇撞墙</li><li>吃食检测</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入其他的类</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Snake</span> <span class="keyword">from</span> <span class="string">&quot;./Snake&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Food</span> <span class="keyword">from</span> <span class="string">&quot;./Food&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ScorePanel</span> <span class="keyword">from</span> <span class="string">&quot;./ScorePanel&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏控制器，控制其他的所有类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameControl</span> &#123;</span><br><span class="line">    <span class="comment">// 定义三个属性</span></span><br><span class="line">    <span class="comment">// 蛇</span></span><br><span class="line">    <span class="attr">snake</span>: <span class="title class_">Snake</span>;</span><br><span class="line">    <span class="comment">// 食物</span></span><br><span class="line">    <span class="attr">food</span>: <span class="title class_">Food</span>;</span><br><span class="line">    <span class="comment">// 记分牌</span></span><br><span class="line">    <span class="attr">scorePanel</span>: <span class="title class_">ScorePanel</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个属性来存储蛇的移动方向(也就是按键的方向)</span></span><br><span class="line">    <span class="attr">direction</span>: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// 创建一个属性用来记录游戏是否结束</span></span><br><span class="line">    isLive = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">snake</span> = <span class="keyword">new</span> <span class="title class_">Snake</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">food</span> = <span class="keyword">new</span> <span class="title class_">Food</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scorePanel</span> = <span class="keyword">new</span> <span class="title class_">ScorePanel</span>(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 游戏的初始化方法，调用后游戏即开始</span></span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 绑定键盘按下的事件</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="variable language_">this</span>.<span class="property">keydownHandler</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        <span class="comment">// 涉及到this和bind知识</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用run()方法，使蛇移动</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  谷歌    ie</span></span><br><span class="line"><span class="comment">        ArrowUp Up</span></span><br><span class="line"><span class="comment">        ArrowDown Down</span></span><br><span class="line"><span class="comment">        ArrowRight Right</span></span><br><span class="line"><span class="comment">        ArrowLeft Left</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 创建一个键盘按下的响应函数</span></span><br><span class="line">    <span class="title function_">keydownHandler</span>(<span class="params">event: KeyboardEvent</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(this);</span></span><br><span class="line">        <span class="comment">// 需要检查event.key的值是否合法(用户是否按了正确的按键)</span></span><br><span class="line">        <span class="comment">// 修改direction属性</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">direction</span> = event.<span class="property">key</span></span><br><span class="line">        <span class="comment">// console.log(event.key);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个控制蛇移动的方法</span></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">            根据方向(this.direction)来使蛇的位置改变</span></span><br><span class="line"><span class="comment">            向上 top 减少</span></span><br><span class="line"><span class="comment">            向下 top 增加</span></span><br><span class="line"><span class="comment">            向左 left 减少</span></span><br><span class="line"><span class="comment">            向右 left 增加 </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 获取蛇现在的坐标</span></span><br><span class="line">        <span class="keyword">let</span> X = <span class="variable language_">this</span>.<span class="property">snake</span>.<span class="property">X</span>;</span><br><span class="line">        <span class="keyword">let</span> Y = <span class="variable language_">this</span>.<span class="property">snake</span>.<span class="property">Y</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据按键方向修改X值和Y值</span></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">direction</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ArrowUp&quot;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Up&quot;</span>:</span><br><span class="line">                <span class="comment">// 向上移动 top 减少</span></span><br><span class="line">                Y -= <span class="number">10</span>; </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ArrowDown&quot;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Down&quot;</span>:</span><br><span class="line">                <span class="comment">// 向下移动 top 增加</span></span><br><span class="line">                Y += <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ArrowLeft&quot;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Left&quot;</span>:</span><br><span class="line">                <span class="comment">// 向左移动 left 减少</span></span><br><span class="line">                X -= <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ArrowRight&quot;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Right&quot;</span>:</span><br><span class="line">                <span class="comment">// 向右移动 left 增加</span></span><br><span class="line">                X += <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查蛇是否吃到了食物</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">checkEat</span>(X, Y);</span><br><span class="line">        <span class="comment">// if (this.checkEat(X, Y)) &#123;</span></span><br><span class="line">        <span class="comment">//     console.log(&#x27;吃到食物了~~&#x27;);</span></span><br><span class="line">        <span class="comment">//     // 食物的位置进行重置</span></span><br><span class="line">        <span class="comment">//     this.food.change();</span></span><br><span class="line">        <span class="comment">//     // 分数增加</span></span><br><span class="line">        <span class="comment">//     this.scorePanel.addScore();</span></span><br><span class="line">        <span class="comment">//     // 蛇要增加一节</span></span><br><span class="line">        <span class="comment">//     this.snake.addBody();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改蛇的X和Y值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">snake</span>.<span class="property">X</span> = X;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">snake</span>.<span class="property">Y</span> = Y;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">// 进入到catch, 说明出现了异常，游戏结束，弹出一个提示信息</span></span><br><span class="line">            <span class="title function_">alert</span>(e.<span class="property">message</span>+ <span class="string">&#x27;GAME OVER!&#x27;</span>);</span><br><span class="line">            <span class="comment">// 将isLive设置为false</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isLive</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启一个定时调用</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isLive</span> &amp;&amp; <span class="built_in">setTimeout</span>(<span class="variable language_">this</span>.<span class="property">run</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">300</span> - (<span class="variable language_">this</span>.<span class="property">scorePanel</span>.<span class="property">level</span> - <span class="number">1</span>) * <span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法，用来检查蛇是否吃到食物</span></span><br><span class="line">    <span class="title function_">checkEat</span>(<span class="params">X: <span class="built_in">number</span>, Y: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (X === <span class="variable language_">this</span>.<span class="property">food</span>.<span class="property">X</span> &amp;&amp; Y === <span class="variable language_">this</span>.<span class="property">food</span>.<span class="property">Y</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃到食物了~~&#x27;</span>);</span><br><span class="line">            <span class="comment">// 食物的位置进行重置</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">food</span>.<span class="title function_">change</span>();</span><br><span class="line">            <span class="comment">// 分数增加</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">scorePanel</span>.<span class="title function_">addScore</span>();</span><br><span class="line">            <span class="comment">// 蛇要增加一节</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">snake</span>.<span class="title function_">addBody</span>();</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GameControl</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-项目入口文件index-ts"><a href="#7-项目入口文件index-ts" class="headerlink" title="7.项目入口文件index.ts"></a>7.项目入口文件index.ts</h2><p>将上述定义的四个类放在文件夹modules中，并将GameControl引入到index.ts中。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/index.less&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">GameControl</span> <span class="keyword">from</span> <span class="string">&quot;./modules/GameControl&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gameControl = <span class="keyword">new</span> <span class="title class_">GameControl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(gameControl.direction);</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -拓展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax基础</title>
      <link href="/2023/05/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax概述"><a href="#Ajax概述" class="headerlink" title="Ajax概述"></a><a href="https://so.csdn.net/so/search?q=Ajax&amp;spm=1001.2101.3001.7020">Ajax</a>概述</h1><h2 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h2><p>AJAX 全称为Asynchronous JavaScript And XML，就是异步的JS 和XML<br>通过AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong><br>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p><h2 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a>XML 简介</h2><p>XML 可扩展标记语言。<br>XML 被设计用来传输和存储数据。<br>XML 和HTML 类似，不同的是HTML 中都是预定义标签，而XML 中没有预定义标签，<br>全都是自定义标签，用来表示一些数据。</p><p>比如说我有一个学生数据：<br>name = “孙悟空” ; age = 18 ; gender = “男” ;<br>用XML 表示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在已经被JSON 取代了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;孙悟空&quot;</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;男&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h2><h3 id="AJAX-的优点"><a href="#AJAX-的优点" class="headerlink" title="AJAX 的优点"></a>AJAX 的优点</h3><ol><li>可以无需刷新页面而与服务器端进行通信</li><li>允许你根据用户事件来更新部分页面内容</li></ol><h3 id="AJAX-的缺点"><a href="#AJAX-的缺点" class="headerlink" title="AJAX 的缺点"></a>AJAX 的缺点</h3><ol><li>没有浏览历史，不能回退</li><li>存在跨域问题(同源)</li><li>SEO 不友好(SEO 搜索引擎优化)</li></ol><h1 id="HTTP相关问题"><a href="#HTTP相关问题" class="headerlink" title="HTTP相关问题"></a>HTTP相关问题</h1><h4 id="MDN-文档"><a href="#MDN-文档" class="headerlink" title="MDN 文档"></a>MDN 文档</h4><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview</a></p></blockquote><h4 id="HTTP-请求交互的基本过程"><a href="#HTTP-请求交互的基本过程" class="headerlink" title="HTTP 请求交互的基本过程"></a>HTTP 请求交互的基本过程</h4><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230415160908476.png" alt="image-20230415160908476"></p><ol><li>前后应用从浏览器端向服务器发送HTTP 请求(请求报文)</li><li>后台服务器接收到请求后, 调度服务器应用处理请求, 向浏览器端返回HTTP响应(响应报文)</li><li>浏览器端接收到响应, 解析显示响应体/调用监视回调</li></ol><h3 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h3><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method url`</span><br><span class="line">`GET /product_detail?id=2`</span><br><span class="line">`POST /login</span><br></pre></td></tr></table></figure><h4 id="多个请求头"><a href="#多个请求头" class="headerlink" title="多个请求头"></a>多个请求头</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.baidu.com`</span><br><span class="line">`Cookie: BAIDUID=AD3B0FA706E; BIDUPSID=AD3B0FA706;`</span><br><span class="line">`Content-Type: application/x-www-form-urlencoded 或者application/json</span><br></pre></td></tr></table></figure><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=tom&amp;pwd=123`</span><br><span class="line">`&#123;&quot;username&quot;: &quot;tom&quot;, &quot;pwd&quot;: 123&#125;</span><br></pre></td></tr></table></figure><h3 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h3><ol><li>响应状态行: <code>status statusText</code></li><li>多个响应头<br><code>Content-Type: text/html;charset=utf-8</code><br><code>Set-Cookie: BD_CK_SAM=1;path=/</code></li><li>响应体<br><code>html 文本/json 文本/js/css/图片...</code></li></ol><h3 id="POST-请求体参数格式"><a href="#POST-请求体参数格式" class="headerlink" title="POST 请求体参数格式"></a>POST 请求体参数格式</h3><p>1.<strong>Content-Type: application/x-www-form-urlencoded;charset=utf-8</strong><br>    用于键值对参数，参数的键值用=连接, 参数之间用&amp;连接<br>    例如: name=%E5%B0%8F%E6%98%8E&amp;age=12<br>2.<strong>Content-Type: application/json;charset=utf-8</strong><br>    用于 json 字符串参数<br>    例如: {“name”: “%E5%B0%8F%E6%98%8E”, “age”: 12}<br>3.<strong>Content-Type: multipart/form-data</strong><br>    用于文件上传请求</p><h3 id="常见的响应状态码"><a href="#常见的响应状态码" class="headerlink" title="常见的响应状态码"></a>常见的响应状态码</h3><blockquote><p>200 OK 请求成功。一般用于GET 与POST 请求<br>201 Created 已创建。成功请求并创建了新的资源<br>401 Unauthorized 未授权/请求要求用户的身份认证<br>404 Not Found 服务器无法根据客户端的请求找到资源<br>500 Internal Server Error 服务器内部错误，无法完成请求</p></blockquote><h3 id="不同类型的请求及其作用"><a href="#不同类型的请求及其作用" class="headerlink" title="不同类型的请求及其作用"></a>不同类型的请求及其作用</h3><ol><li><code>GET</code>: 从服务器端<strong>读取</strong>数据（查）</li><li><code>POST</code>: 向服务器端<strong>添加</strong>新数据 （增）</li><li><code>PUT</code>: <strong>更新</strong>服务器端已经数据 （改）</li><li><code>DELETE</code>: <strong>删除</strong>服务器端数据 （删）</li></ol><h3 id="API-的分类"><a href="#API-的分类" class="headerlink" title="API 的分类"></a>API 的分类</h3><p>1.<strong>REST API: restful （Representational State Transfer (资源)表现层状态转化）</strong><br>    (1) 发送请求进行CRUD 哪个操作由请求方式来决定<br>    (2) 同一个请求路径可以进行多个操作<br>    (3) 请求方式会用到GET/POST/PUT/DELETE<br>2.<strong>非REST API: restless</strong><br>    (1) 请求方式不决定请求的CRUD 操作<br>    (2) 一个请求路径只对应一个操作<br>    (3) 一般只有GET/POST</p><h3 id="区别-一般HTTP请求-与-Ajax请求"><a href="#区别-一般HTTP请求-与-Ajax请求" class="headerlink" title="区别 一般HTTP请求 与 Ajax请求"></a>区别 一般HTTP请求 与 Ajax请求</h3><p>1.ajax请求 是一种特别的 http请求<br>2.对服务器端来说, 没有任何区别, 区别在浏览器端<br>3.浏览器端发请求: 只有XHR 或fetch 发出的才是ajax 请求, 其它所有的都是非ajax 请求<br>4.浏览器端接收到响应</p><blockquote><pre><code>(1) 一般请求: 浏览器一般会直接显示响应体数据, 也就是我们常说的刷新/跳转页面(2) ajax请求: 浏览器不会对界面进行任何更新操作, 只是调用监视的回调函数并传入响应相关数据</code></pre></blockquote><h1 id="原生AJAX-的基本使用-XHR"><a href="#原生AJAX-的基本使用-XHR" class="headerlink" title="原生AJAX 的基本使用 XHR"></a>原生AJAX 的基本使用 XHR</h1><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p><a href="http://nodejs.cn/">http://nodejs.cn/</a></p><h4 id="安装express（服务端框架）"><a href="#安装express（服务端框架）" class="headerlink" title="安装express（服务端框架）"></a>安装express（服务端框架）</h4><p><a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230415161626530.png" alt="image-20230415161626530"></p><ol><li>初始化环境</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure><p>​    2.下载express包</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>​    3.编写js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//  设置响应</span></span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&quot;Hello Express&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动, 8000 端口监听中...&quot;</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    4.运行js程序</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node .\<span class="number">01</span>express使用.js</span><br></pre></td></tr></table></figure><h4 id="安装nodemon自动重启工具"><a href="#安装nodemon自动重启工具" class="headerlink" title="安装nodemon自动重启工具"></a>安装nodemon自动重启工具</h4><p>文件内容有修改自动重新启动服务<br><a href="https://www.npmjs.com/package/nodemon">https://www.npmjs.com/package/nodemon</a></p><p><img src="C:\Users\Luomu777\AppData\Roaming\Typora\typora-user-images\image-20230415161920743.png" alt="image-20230415161920743"></p><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndoemon server.js</span><br></pre></td></tr></table></figure><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><ol><li>使用<code>XMLHttpRequest</code> (XHR)对象可以与服务器交互, 也就是发送ajax 请求</li><li>前端可以获取到数据，而无需让整个的页面刷新。</li><li>这使得Web 页面可以只更新页面的局部，而不影响用户的操作。</li></ol><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a><br><code>XMLHttpRequest</code>，AJAX 的所有操作都是通过该对象进行的</p><h3 id="核心对象使用步骤"><a href="#核心对象使用步骤" class="headerlink" title="核心对象使用步骤"></a>核心对象使用步骤</h3><h4 id="创建XMLHttpRequest-对象"><a href="#创建XMLHttpRequest-对象" class="headerlink" title="创建XMLHttpRequest 对象"></a>创建XMLHttpRequest 对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><h4 id="设置请求信息（请求方法和url）"><a href="#设置请求信息（请求方法和url）" class="headerlink" title="设置请求信息（请求方法和url）"></a>设置请求信息（请求方法和url）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求方式</span></span><br><span class="line">xhr.<span class="title function_">open</span>(method, url);</span><br><span class="line"><span class="comment">//可以设置请求头，一般不设置</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(body) <span class="comment">//get请求不传 body 参数，只有post请求使用</span></span><br></pre></td></tr></table></figure><h4 id="接收响应（事件绑定，处理服务端返回的结果）"><a href="#接收响应（事件绑定，处理服务端返回的结果）" class="headerlink" title="接收响应（事件绑定，处理服务端返回的结果）"></a>接收响应（事件绑定，处理服务端返回的结果）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xhr.responseXML 接收 xml格式 的响应数据</span></span><br><span class="line"><span class="comment">//xhr.responseText 接收 文本格式 的响应数据</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// readyState 是 xhr对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line"><span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> text = xhr.<span class="property">responseText</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ul><li>同源策略(Same-Origin Policy)最早由Netscape 公司提出，是浏览器的一种安全策略</li><li>同源： 协议、域名、端口号必须完全相同</li><li>跨域： 违背同源策略就是<strong>跨域</strong></li></ul><h2 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>1) JSONP 是什么<br>  JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明<br>  才智开发出来，只支持get 请求。<br>2) JSONP 怎么工作的？<br>  在网页有一些标签天生具有跨域能力，比如：img link iframe script。<br>  JSONP 就是利用script 标签的跨域能力来发送请求的。<br>3) JSONP 的使用</p><h5 id="动态的创建一个script-标签"><a href="#动态的创建一个script-标签" class="headerlink" title="动态的创建一个script 标签"></a>动态的创建一个script 标签</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="设置script-的src，设置回调函数"><a href="#设置script-的src，设置回调函数" class="headerlink" title="设置script 的src，设置回调函数"></a>设置script 的src，设置回调函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script.<span class="property">src</span> = <span class="string">&quot;http://localhost:3000/testAJAX?callback=abc&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(data.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="将script-添加到body-中"><a href="#将script-添加到body-中" class="headerlink" title="将script 添加到body 中"></a>将script 添加到body 中</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="服务器中路由的处理"><a href="#服务器中路由的处理" class="headerlink" title="服务器中路由的处理"></a>服务器中路由的处理</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/testAJAX&quot;</span> , <span class="keyword">function</span> (<span class="params">req , res</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到请求&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> callback = req.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">res.<span class="title function_">send</span>(callback+<span class="string">&quot;(&quot;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="jQuery-中的JSONP"><a href="#jQuery-中的JSONP" class="headerlink" title="jQuery 中的JSONP"></a>jQuery 中的JSONP</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;ul id=&quot;list&quot;&gt;&lt;/ul&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;./jquery-1.12.3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">var btn = document.getElementById(&#x27;btn&#x27;)</span><br><span class="line">btn.onclick = function () &#123;</span><br><span class="line">$.getJSON(&quot;http://api.douban.com/v2/movie/in_theaters?callback=?&quot;,function(data) &#123;</span><br><span class="line">console.log(data);</span><br><span class="line">//获取所有的电影的条目</span><br><span class="line">var subjects = data.subjects;</span><br><span class="line">//遍历电影条目</span><br><span class="line">for(var i=0 ; i&lt;subjects.length ; i++)&#123;</span><br><span class="line">$(&quot;#list&quot;).append(&quot;&lt;li&gt;&quot;+</span><br><span class="line">subjects[i].title+&quot;&lt;br /&gt;&quot;+</span><br><span class="line">&quot;&lt;img src=\&quot;&quot;+subjects[i].images.large+&quot;\&quot; &gt;&quot;+</span><br><span class="line">&quot;&lt;/li&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p><h4 id="CORS-是什么？"><a href="#CORS-是什么？" class="headerlink" title="CORS 是什么？"></a>CORS 是什么？</h4><p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get 和post 请求。跨域资源共享标准新增了一组HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p><h4 id="CORS-怎么工作的？"><a href="#CORS-怎么工作的？" class="headerlink" title="CORS 怎么工作的？"></a>CORS 怎么工作的？</h4><p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应<br>以后就会对响应放行</p><h4 id="CORS-的使用"><a href="#CORS-的使用" class="headerlink" title="CORS 的使用"></a>CORS 的使用</h4><p>主要是服务器端的设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/testAJAX&quot;</span> , <span class="keyword">function</span> (<span class="params">req , res</span>) &#123;</span><br><span class="line"><span class="comment">//通过res 来设置响应头，来允许跨域请求</span></span><br><span class="line"><span class="comment">//res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1:3000&quot;);</span></span><br><span class="line">res.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&quot;testAJAX 返回的响应&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise基础</title>
      <link href="/2023/05/12/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/05/12/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-Promise-对象"><a href="#JavaScript-Promise-对象" class="headerlink" title="JavaScript Promise 对象"></a>JavaScript Promise 对象</h2><h3 id="分类-编程技术"><a href="#分类-编程技术" class="headerlink" title="分类 编程技术"></a><em>分类</em> <a href="https://www.runoob.com/w3cnote_genre/code">编程技术</a></h3><p>ECMAscript 6 原生提供了 Promise 对象。</p><p>Promise 对象代表了未来将要发生的事件，用来传递异步操作的消息。</p><h3 id="Promise-对象有以下两个特点"><a href="#Promise-对象有以下两个特点" class="headerlink" title="Promise 对象有以下两个特点:"></a>Promise 对象有以下两个特点:</h3><p><strong><em>1、对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：</em></strong></p><ul><li><strong><em>pending: 初始状态，不是成功或失败状态。</em></strong></li><li><strong><em>fulfilled: 意味着操作成功完成。</em></strong></li><li><strong><em>rejected: 意味着操作失败。</em></strong></li></ul><p>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是「承诺」，表示其他手段无法改变。</p><p>2、<strong><em>一旦状态改变，就不会再变，任何时候都可以得到这个结果。</em></strong></p><p><em>Promise 对象的状态改变，只有两种可能：从 Pending 变为 Resolved 和从 Pending 变为 Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</em></p><h3 id="Promise-优缺点"><a href="#Promise-优缺点" class="headerlink" title="Promise 优缺点"></a>Promise 优缺点</h3><p><em>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。</em></p><p>Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h3 id="Promise-创建"><a href="#Promise-创建" class="headerlink" title="Promise 创建"></a>Promise 创建</h3><p><strong><em>要想创建一个 promise 对象、可以使用 new 来调用 Promise 的构造器来进行实例化。</em></strong></p><p>下面是创建 promise 的步骤：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;    </span><br><span class="line">    <span class="comment">// 异步处理    </span></span><br><span class="line">    <span class="comment">// 处理结束后、调用resolve 或 reject </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 构造函数包含一个参数和一个带有 resolve（解析）和 reject（拒绝）两个参数的回调。在回调中执行一些操作（例如异步），如果一切都正常，则调用 resolve，否则调用 reject。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFirstPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;    </span><br><span class="line">    <span class="comment">//当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)    </span></span><br><span class="line">    <span class="comment">//在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法。 </span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;        </span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功!&quot;</span>); </span><br><span class="line">        <span class="comment">//代码正常执行！    </span></span><br><span class="line">    &#125;, <span class="number">250</span>); &#125;);  </span><br><span class="line">myFirstPromise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">successMessage</span>)&#123;  </span><br><span class="line">    <span class="comment">//successMessage的值是上面调用resolve(...)方法传入的值.    </span></span><br><span class="line">    <span class="comment">//successMessage参数不一定非要是字符串类型，这里只是举个例子    </span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Yay! &quot;</span> + successMessage); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://c.runoob.com/codedemo/3343">尝试一下 »</a></p><p>对于已经实例化过的 promise 对象可以调用 promise.then() 方法，传递 resolve 和 reject 方法作为回调。</p><p>promise.then() 是 promise 最为常用的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><p>promise简化了对error的处理，上面的代码我们也可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(onFulfilled).<span class="title function_">catch</span>(onRejected)</span><br></pre></td></tr></table></figure><hr><h2 id="Promise-Ajax"><a href="#Promise-Ajax" class="headerlink" title="Promise Ajax"></a>Promise Ajax</h2><p>下面是一个用 Promise 对象实现的 Ajax 操作的例子。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">URL</span>) &#123;   </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;        </span><br><span class="line">     <span class="keyword">var</span> req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();         </span><br><span class="line">     req.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="variable constant_">URL</span>, <span class="literal">true</span>);        </span><br><span class="line">     req.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;        </span><br><span class="line">         <span class="keyword">if</span> (req.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">             <span class="title function_">resolve</span>(req.<span class="property">responseText</span>);            </span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(req.<span class="property">statusText</span>));            </span><br><span class="line">         &#125;         </span><br><span class="line">     &#125;;        </span><br><span class="line">     req.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;            </span><br><span class="line">         <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(req.<span class="property">statusText</span>));        </span><br><span class="line">     &#125;;        </span><br><span class="line">     req.<span class="title function_">send</span>();     </span><br><span class="line"> &#125;); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">URL</span> = <span class="string">&quot;/try/ajax/testpromise.php&quot;</span>;  </span><br><span class="line"><span class="title function_">ajax</span>(<span class="variable constant_">URL</span>).<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">onFulfilled</span>(<span class="params">value</span>)&#123;    </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;内容是：&#x27;</span> + value);  </span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> <span class="title function_">onRejected</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;错误：&#x27;</span> + error);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/try/try.php?filename=tryjs_promise1">尝试一下 »</a></p><p>上面代码中，resolve 方法和 reject 方法调用时，都带有参数。它们的参数会被传递给回调函数。reject 方法的参数通常是 Error 对象的实例，而 resolve 方法的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123; </span><br><span class="line"><span class="comment">// ... some code </span></span><br><span class="line">&#125;);  </span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line"><span class="comment">// ... some code </span></span><br><span class="line"><span class="title function_">resolve</span>(p1); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码中，p1 和 p2 都是 Promise 的实例，但是 p2 的 resolve 方法将 p1 作为参数，这时 p1 的状态就会传递给 p2。如果调用的时候，p1 的状态是 pending，那么 p2 的回调函数就会等待 p1 的状态改变；如果 p1 的状态已经是 fulfilled 或者 rejected，那么 p2 的回调函数将会立刻执行。</p><hr><h1 id="Promise-prototype-then方法：链式操作"><a href="#Promise-prototype-then方法：链式操作" class="headerlink" title="Promise.prototype.then方法：链式操作"></a>Promise.prototype.then方法：链式操作</h1><p>Promise.prototype.then 方法<strong>返回的是一个新的 Promise 对象</strong>，因此可以采用链式写法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> json.<span class="property">post</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="comment">// proceed</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码使用 then 方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p><p>如果前一个回调函数返回的是Promise对象，这时后一个回调函数就会等待该Promise对象有了运行结果，才会进一步调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/post/1.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>); </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">comments</span>) &#123;  </span><br><span class="line">    <span class="comment">// 对comments进行处理</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种设计使得嵌套的异步操作，可以被很容易得改写，<strong>从回调函数的”横向发展”改为”向下发展”。</strong></p><hr><h1 id="Promise-prototype-catch方法：捕捉错误"><a href="#Promise-prototype-catch方法：捕捉错误" class="headerlink" title="Promise.prototype.catch方法：捕捉错误"></a>Promise.prototype.catch方法：捕捉错误</h1><p>Promise.prototype.catch 方法是 <strong>Promise.prototype.then(null, rejection) 的别名，用于指定发生错误时的回调函数。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 对象的错误具有”冒泡”性质，会一直向后传递，<strong>直到被捕获为止</strong>。也就是说，<strong>错误总是会被下一个 catch 语句捕获。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/post/1.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">comments</span>) &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理前两个回调函数的错误</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="Promise-all方法，Promise-race方法"><a href="#Promise-all方法，Promise-race方法" class="headerlink" title="Promise.all方法，Promise.race方法"></a>Promise.all方法，Promise.race方法</h2><p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例。（Promise.all 方法的参数不一定是数组，但是必须具有 iterator 接口，且返回的每个成员都是 Promise 实例。）</p><p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p><ul><li>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li><li>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</li></ul><p>下面是一个具体的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个Promise对象的数组 </span></span><br><span class="line"><span class="keyword">var</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">id</span>)&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getJSON</span>(<span class="string">&quot;/post/&quot;</span> + id + <span class="string">&quot;.json&quot;</span>); </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123; </span><br><span class="line">    <span class="comment">// ...   </span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise.race 方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的返回值。</p><p>如果Promise.all方法和Promise.race方法的参数，不是Promise实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。</p><hr><h2 id="Promise-resolve-方法，Promise-reject-方法"><a href="#Promise-resolve-方法，Promise-reject-方法" class="headerlink" title="Promise.resolve 方法，Promise.reject 方法"></a>Promise.resolve 方法，Promise.reject 方法</h2><p>有时需要<strong>将现有对象转为Promise对象</strong>，Promise.resolve方法就起到这个作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsPromise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>($.<span class="title function_">ajax</span>(<span class="string">&#x27;/whatever.json&#x27;</span>));</span><br></pre></td></tr></table></figure><p>上面代码将 jQuery 生成 deferred 对象，转为一个新的 ES6 的 Promise 对象。</p><p>如果 Promise.resolve 方法的参数，不是具有 then 方法的对象（又称 thenable 对象），则返回一个新的 Promise 对象，且它的状态为fulfilled。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">s</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><p>上面代码<strong>生成一个新的Promise对象的实例p，它的状态为fulfilled</strong>，所以回调函数会立即执行，Promise.resolve方法的参数就是回调函数的参数。</p><p>如果Promise.resolve方法的参数是一个Promise对象的实例，则会被原封不动地返回。</p><p>Promise.reject(reason)方法也会返回一个新的Promise实例，该实例的状态为rejected。Promise.reject方法的参数reason，会被传递给实例的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">p.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span> (<span class="params">s</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><p>上面代码生成一个Promise对象的实例，状态为rejected，回调函数会立即执行。</p>]]></content>
      
      
      <categories>
          
          <category> -拓展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -拓展 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
